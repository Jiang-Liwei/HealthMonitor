// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/bloodstatus/v1/blood_status.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBloodStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBloodStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBloodStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBloodStatusRequestMultiError, or nil if none found.
func (m *CreateBloodStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBloodStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetRecordDate(); val < 0 || val > 253402300799000 {
		err := CreateBloodStatusRequestValidationError{
			field:  "RecordDate",
			reason: "value must be inside range [0, 253402300799000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := TimeOfDay_name[int32(m.GetTimeOfDay())]; !ok {
		err := CreateBloodStatusRequestValidationError{
			field:  "TimeOfDay",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := BeforeAfterMeals_name[int32(m.GetBeforeAfterMeals())]; !ok {
		err := CreateBloodStatusRequestValidationError{
			field:  "BeforeAfterMeals",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSystolicPressure(); val < 30 || val > 300 {
		err := CreateBloodStatusRequestValidationError{
			field:  "SystolicPressure",
			reason: "value must be inside range [30, 300]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDiastolicPressure(); val < 10 || val > 200 {
		err := CreateBloodStatusRequestValidationError{
			field:  "DiastolicPressure",
			reason: "value must be inside range [10, 200]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPulse(); val < 30 || val > 220 {
		err := CreateBloodStatusRequestValidationError{
			field:  "Pulse",
			reason: "value must be inside range [30, 220]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Mood_name[int32(m.GetMood())]; !ok {
		err := CreateBloodStatusRequestValidationError{
			field:  "Mood",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateBloodStatusRequestMultiError(errors)
	}

	return nil
}

// CreateBloodStatusRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBloodStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBloodStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBloodStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBloodStatusRequestMultiError) AllErrors() []error { return m }

// CreateBloodStatusRequestValidationError is the validation error returned by
// CreateBloodStatusRequest.Validate if the designated constraints aren't met.
type CreateBloodStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBloodStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBloodStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBloodStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBloodStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBloodStatusRequestValidationError) ErrorName() string {
	return "CreateBloodStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBloodStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBloodStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBloodStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBloodStatusRequestValidationError{}

// Validate checks the field values on CreateBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBloodStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBloodStatusReplyMultiError, or nil if none found.
func (m *CreateBloodStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBloodStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBloodStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBloodStatusReplyValidationError{
					field:  "BloodStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBloodStatusReplyValidationError{
					field:  "BloodStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBloodStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBloodStatusReplyValidationError{
				field:  "BloodStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBloodStatusReplyMultiError(errors)
	}

	return nil
}

// CreateBloodStatusReplyMultiError is an error wrapping multiple validation
// errors returned by CreateBloodStatusReply.ValidateAll() if the designated
// constraints aren't met.
type CreateBloodStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBloodStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBloodStatusReplyMultiError) AllErrors() []error { return m }

// CreateBloodStatusReplyValidationError is the validation error returned by
// CreateBloodStatusReply.Validate if the designated constraints aren't met.
type CreateBloodStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBloodStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBloodStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBloodStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBloodStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBloodStatusReplyValidationError) ErrorName() string {
	return "CreateBloodStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBloodStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBloodStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBloodStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBloodStatusReplyValidationError{}

// Validate checks the field values on UpdateBloodStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBloodStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBloodStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBloodStatusRequestMultiError, or nil if none found.
func (m *UpdateBloodStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBloodStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateBloodStatusRequest_Id_Pattern.MatchString(m.GetId()) {
		err := UpdateBloodStatusRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetRecordDate(); val < 0 || val > 253402300799000 {
		err := UpdateBloodStatusRequestValidationError{
			field:  "RecordDate",
			reason: "value must be inside range [0, 253402300799000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := TimeOfDay_name[int32(m.GetTimeOfDay())]; !ok {
		err := UpdateBloodStatusRequestValidationError{
			field:  "TimeOfDay",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := BeforeAfterMeals_name[int32(m.GetBeforeAfterMeals())]; !ok {
		err := UpdateBloodStatusRequestValidationError{
			field:  "BeforeAfterMeals",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSystolicPressure(); val < 30 || val > 300 {
		err := UpdateBloodStatusRequestValidationError{
			field:  "SystolicPressure",
			reason: "value must be inside range [30, 300]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDiastolicPressure(); val < 10 || val > 200 {
		err := UpdateBloodStatusRequestValidationError{
			field:  "DiastolicPressure",
			reason: "value must be inside range [10, 200]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPulse(); val < 30 || val > 220 {
		err := UpdateBloodStatusRequestValidationError{
			field:  "Pulse",
			reason: "value must be inside range [30, 220]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Mood_name[int32(m.GetMood())]; !ok {
		err := UpdateBloodStatusRequestValidationError{
			field:  "Mood",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateBloodStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateBloodStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBloodStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBloodStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBloodStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBloodStatusRequestMultiError) AllErrors() []error { return m }

// UpdateBloodStatusRequestValidationError is the validation error returned by
// UpdateBloodStatusRequest.Validate if the designated constraints aren't met.
type UpdateBloodStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBloodStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBloodStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBloodStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBloodStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBloodStatusRequestValidationError) ErrorName() string {
	return "UpdateBloodStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBloodStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBloodStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBloodStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBloodStatusRequestValidationError{}

var _UpdateBloodStatusRequest_Id_Pattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UpdateBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBloodStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBloodStatusReplyMultiError, or nil if none found.
func (m *UpdateBloodStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBloodStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBloodStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBloodStatusReplyValidationError{
					field:  "BloodStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBloodStatusReplyValidationError{
					field:  "BloodStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBloodStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBloodStatusReplyValidationError{
				field:  "BloodStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBloodStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateBloodStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateBloodStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateBloodStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBloodStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBloodStatusReplyMultiError) AllErrors() []error { return m }

// UpdateBloodStatusReplyValidationError is the validation error returned by
// UpdateBloodStatusReply.Validate if the designated constraints aren't met.
type UpdateBloodStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBloodStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBloodStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBloodStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBloodStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBloodStatusReplyValidationError) ErrorName() string {
	return "UpdateBloodStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBloodStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBloodStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBloodStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBloodStatusReplyValidationError{}

// Validate checks the field values on DeleteBloodStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBloodStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBloodStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBloodStatusRequestMultiError, or nil if none found.
func (m *DeleteBloodStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBloodStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBloodStatusRequestMultiError(errors)
	}

	return nil
}

// DeleteBloodStatusRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBloodStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBloodStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBloodStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBloodStatusRequestMultiError) AllErrors() []error { return m }

// DeleteBloodStatusRequestValidationError is the validation error returned by
// DeleteBloodStatusRequest.Validate if the designated constraints aren't met.
type DeleteBloodStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBloodStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBloodStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBloodStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBloodStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBloodStatusRequestValidationError) ErrorName() string {
	return "DeleteBloodStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBloodStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBloodStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBloodStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBloodStatusRequestValidationError{}

// Validate checks the field values on DeleteBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBloodStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBloodStatusReplyMultiError, or nil if none found.
func (m *DeleteBloodStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBloodStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBloodStatusReplyMultiError(errors)
	}

	return nil
}

// DeleteBloodStatusReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteBloodStatusReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteBloodStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBloodStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBloodStatusReplyMultiError) AllErrors() []error { return m }

// DeleteBloodStatusReplyValidationError is the validation error returned by
// DeleteBloodStatusReply.Validate if the designated constraints aren't met.
type DeleteBloodStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBloodStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBloodStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBloodStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBloodStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBloodStatusReplyValidationError) ErrorName() string {
	return "DeleteBloodStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBloodStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBloodStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBloodStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBloodStatusReplyValidationError{}

// Validate checks the field values on GetBloodStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBloodStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBloodStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBloodStatusRequestMultiError, or nil if none found.
func (m *GetBloodStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBloodStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBloodStatusRequestMultiError(errors)
	}

	return nil
}

// GetBloodStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetBloodStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBloodStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBloodStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBloodStatusRequestMultiError) AllErrors() []error { return m }

// GetBloodStatusRequestValidationError is the validation error returned by
// GetBloodStatusRequest.Validate if the designated constraints aren't met.
type GetBloodStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBloodStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBloodStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBloodStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBloodStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBloodStatusRequestValidationError) ErrorName() string {
	return "GetBloodStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBloodStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBloodStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBloodStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBloodStatusRequestValidationError{}

// Validate checks the field values on GetBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBloodStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBloodStatusReplyMultiError, or nil if none found.
func (m *GetBloodStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBloodStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBloodStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBloodStatusReplyValidationError{
					field:  "BloodStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBloodStatusReplyValidationError{
					field:  "BloodStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBloodStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBloodStatusReplyValidationError{
				field:  "BloodStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBloodStatusReplyMultiError(errors)
	}

	return nil
}

// GetBloodStatusReplyMultiError is an error wrapping multiple validation
// errors returned by GetBloodStatusReply.ValidateAll() if the designated
// constraints aren't met.
type GetBloodStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBloodStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBloodStatusReplyMultiError) AllErrors() []error { return m }

// GetBloodStatusReplyValidationError is the validation error returned by
// GetBloodStatusReply.Validate if the designated constraints aren't met.
type GetBloodStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBloodStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBloodStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBloodStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBloodStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBloodStatusReplyValidationError) ErrorName() string {
	return "GetBloodStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetBloodStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBloodStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBloodStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBloodStatusReplyValidationError{}

// Validate checks the field values on ListBloodStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBloodStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBloodStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBloodStatusRequestMultiError, or nil if none found.
func (m *ListBloodStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBloodStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ListBloodStatusRequestMultiError(errors)
	}

	return nil
}

// ListBloodStatusRequestMultiError is an error wrapping multiple validation
// errors returned by ListBloodStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBloodStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBloodStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBloodStatusRequestMultiError) AllErrors() []error { return m }

// ListBloodStatusRequestValidationError is the validation error returned by
// ListBloodStatusRequest.Validate if the designated constraints aren't met.
type ListBloodStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBloodStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBloodStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBloodStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBloodStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBloodStatusRequestValidationError) ErrorName() string {
	return "ListBloodStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBloodStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBloodStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBloodStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBloodStatusRequestValidationError{}

// Validate checks the field values on ListBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBloodStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBloodStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBloodStatusReplyMultiError, or nil if none found.
func (m *ListBloodStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBloodStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBloodStatusReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBloodStatusReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBloodStatusReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBloodStatusReplyMultiError(errors)
	}

	return nil
}

// ListBloodStatusReplyMultiError is an error wrapping multiple validation
// errors returned by ListBloodStatusReply.ValidateAll() if the designated
// constraints aren't met.
type ListBloodStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBloodStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBloodStatusReplyMultiError) AllErrors() []error { return m }

// ListBloodStatusReplyValidationError is the validation error returned by
// ListBloodStatusReply.Validate if the designated constraints aren't met.
type ListBloodStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBloodStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBloodStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBloodStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBloodStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBloodStatusReplyValidationError) ErrorName() string {
	return "ListBloodStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListBloodStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBloodStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBloodStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBloodStatusReplyValidationError{}

// Validate checks the field values on PageData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageDataMultiError, or nil
// if none found.
func (m *PageData) ValidateAll() error {
	return m.validate(true)
}

func (m *PageData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPages

	// no validation rules for TotalCount

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageDataMultiError(errors)
	}

	return nil
}

// PageDataMultiError is an error wrapping multiple validation errors returned
// by PageData.ValidateAll() if the designated constraints aren't met.
type PageDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageDataMultiError) AllErrors() []error { return m }

// PageDataValidationError is the validation error returned by
// PageData.Validate if the designated constraints aren't met.
type PageDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageDataValidationError) ErrorName() string { return "PageDataValidationError" }

// Error satisfies the builtin error interface
func (e PageDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageDataValidationError{}

// Validate checks the field values on BloodStatusRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BloodStatusRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BloodStatusRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BloodStatusRecordMultiError, or nil if none found.
func (m *BloodStatusRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *BloodStatusRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RecordDate

	// no validation rules for TimeOfDay

	// no validation rules for BeforeAfterMeals

	// no validation rules for SystolicPressure

	// no validation rules for DiastolicPressure

	// no validation rules for Pulse

	// no validation rules for Mood

	// no validation rules for StatusSummary

	if len(errors) > 0 {
		return BloodStatusRecordMultiError(errors)
	}

	return nil
}

// BloodStatusRecordMultiError is an error wrapping multiple validation errors
// returned by BloodStatusRecord.ValidateAll() if the designated constraints
// aren't met.
type BloodStatusRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BloodStatusRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BloodStatusRecordMultiError) AllErrors() []error { return m }

// BloodStatusRecordValidationError is the validation error returned by
// BloodStatusRecord.Validate if the designated constraints aren't met.
type BloodStatusRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BloodStatusRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BloodStatusRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BloodStatusRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BloodStatusRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BloodStatusRecordValidationError) ErrorName() string {
	return "BloodStatusRecordValidationError"
}

// Error satisfies the builtin error interface
func (e BloodStatusRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBloodStatusRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BloodStatusRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BloodStatusRecordValidationError{}
