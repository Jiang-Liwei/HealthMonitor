// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.0
// source: api/bloodstatus/v1/blood_status.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义 TimeOfDay 枚举类型
type TimeOfDay int32

const (
	TimeOfDay_morning TimeOfDay = 0 // 映射 "morning"
	TimeOfDay_noon    TimeOfDay = 1 // 映射 "noon"
	TimeOfDay_evening TimeOfDay = 2 // 映射 "evening"
)

// Enum value maps for TimeOfDay.
var (
	TimeOfDay_name = map[int32]string{
		0: "morning",
		1: "noon",
		2: "evening",
	}
	TimeOfDay_value = map[string]int32{
		"morning": 0,
		"noon":    1,
		"evening": 2,
	}
)

func (x TimeOfDay) Enum() *TimeOfDay {
	p := new(TimeOfDay)
	*p = x
	return p
}

func (x TimeOfDay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeOfDay) Descriptor() protoreflect.EnumDescriptor {
	return file_api_bloodstatus_v1_blood_status_proto_enumTypes[0].Descriptor()
}

func (TimeOfDay) Type() protoreflect.EnumType {
	return &file_api_bloodstatus_v1_blood_status_proto_enumTypes[0]
}

func (x TimeOfDay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeOfDay.Descriptor instead.
func (TimeOfDay) EnumDescriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{0}
}

// 定义 TimeOfDay 枚举类型
type BeforeAfterMeals int32

const (
	BeforeAfterMeals_before BeforeAfterMeals = 0 // 映射 "before"
	BeforeAfterMeals_after  BeforeAfterMeals = 1 // 映射 "after"
)

// Enum value maps for BeforeAfterMeals.
var (
	BeforeAfterMeals_name = map[int32]string{
		0: "before",
		1: "after",
	}
	BeforeAfterMeals_value = map[string]int32{
		"before": 0,
		"after":  1,
	}
)

func (x BeforeAfterMeals) Enum() *BeforeAfterMeals {
	p := new(BeforeAfterMeals)
	*p = x
	return p
}

func (x BeforeAfterMeals) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BeforeAfterMeals) Descriptor() protoreflect.EnumDescriptor {
	return file_api_bloodstatus_v1_blood_status_proto_enumTypes[1].Descriptor()
}

func (BeforeAfterMeals) Type() protoreflect.EnumType {
	return &file_api_bloodstatus_v1_blood_status_proto_enumTypes[1]
}

func (x BeforeAfterMeals) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BeforeAfterMeals.Descriptor instead.
func (BeforeAfterMeals) EnumDescriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{1}
}

type Mood int32

const (
	Mood_same_as Mood = 0
	Mood_happy   Mood = 1
	Mood_sad     Mood = 2
)

// Enum value maps for Mood.
var (
	Mood_name = map[int32]string{
		0: "same_as",
		1: "happy",
		2: "sad",
	}
	Mood_value = map[string]int32{
		"same_as": 0,
		"happy":   1,
		"sad":     2,
	}
)

func (x Mood) Enum() *Mood {
	p := new(Mood)
	*p = x
	return p
}

func (x Mood) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mood) Descriptor() protoreflect.EnumDescriptor {
	return file_api_bloodstatus_v1_blood_status_proto_enumTypes[2].Descriptor()
}

func (Mood) Type() protoreflect.EnumType {
	return &file_api_bloodstatus_v1_blood_status_proto_enumTypes[2]
}

func (x Mood) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mood.Descriptor instead.
func (Mood) EnumDescriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{2}
}

type CreateBloodStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordDate        uint64           `protobuf:"varint,1,opt,name=recordDate,proto3" json:"recordDate,omitempty"`                                                      // 毫秒级时间戳
	TimeOfDay         TimeOfDay        `protobuf:"varint,2,opt,name=timeOfDay,proto3,enum=api.bloodstatus.v1.TimeOfDay" json:"timeOfDay,omitempty"`                      // 记录时间段
	BeforeAfterMeals  BeforeAfterMeals `protobuf:"varint,3,opt,name=beforeAfterMeals,proto3,enum=api.bloodstatus.v1.BeforeAfterMeals" json:"beforeAfterMeals,omitempty"` // 餐前餐后
	SystolicPressure  uint64           `protobuf:"varint,4,opt,name=systolicPressure,proto3" json:"systolicPressure,omitempty"`                                          // 收缩压
	DiastolicPressure uint64           `protobuf:"varint,5,opt,name=diastolicPressure,proto3" json:"diastolicPressure,omitempty"`                                        // 舒张压
	Pulse             uint64           `protobuf:"varint,6,opt,name=pulse,proto3" json:"pulse,omitempty"`                                                                // 脉搏
	Mood              Mood             `protobuf:"varint,7,opt,name=mood,proto3,enum=api.bloodstatus.v1.Mood" json:"mood,omitempty"`                                     // 心情
}

func (x *CreateBloodStatusRequest) Reset() {
	*x = CreateBloodStatusRequest{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBloodStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBloodStatusRequest) ProtoMessage() {}

func (x *CreateBloodStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBloodStatusRequest.ProtoReflect.Descriptor instead.
func (*CreateBloodStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBloodStatusRequest) GetRecordDate() uint64 {
	if x != nil {
		return x.RecordDate
	}
	return 0
}

func (x *CreateBloodStatusRequest) GetTimeOfDay() TimeOfDay {
	if x != nil {
		return x.TimeOfDay
	}
	return TimeOfDay_morning
}

func (x *CreateBloodStatusRequest) GetBeforeAfterMeals() BeforeAfterMeals {
	if x != nil {
		return x.BeforeAfterMeals
	}
	return BeforeAfterMeals_before
}

func (x *CreateBloodStatusRequest) GetSystolicPressure() uint64 {
	if x != nil {
		return x.SystolicPressure
	}
	return 0
}

func (x *CreateBloodStatusRequest) GetDiastolicPressure() uint64 {
	if x != nil {
		return x.DiastolicPressure
	}
	return 0
}

func (x *CreateBloodStatusRequest) GetPulse() uint64 {
	if x != nil {
		return x.Pulse
	}
	return 0
}

func (x *CreateBloodStatusRequest) GetMood() Mood {
	if x != nil {
		return x.Mood
	}
	return Mood_same_as
}

type CreateBloodStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BloodStatus *BloodStatusRecord `protobuf:"bytes,1,opt,name=blood_status,json=bloodStatus,proto3" json:"blood_status,omitempty"`
}

func (x *CreateBloodStatusReply) Reset() {
	*x = CreateBloodStatusReply{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBloodStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBloodStatusReply) ProtoMessage() {}

func (x *CreateBloodStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBloodStatusReply.ProtoReflect.Descriptor instead.
func (*CreateBloodStatusReply) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBloodStatusReply) GetBloodStatus() *BloodStatusRecord {
	if x != nil {
		return x.BloodStatus
	}
	return nil
}

type UpdateBloodStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RecordDate        uint64           `protobuf:"varint,2,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`                                                              // 毫秒级时间戳
	TimeOfDay         TimeOfDay        `protobuf:"varint,3,opt,name=time_of_day,json=timeOfDay,proto3,enum=api.bloodstatus.v1.TimeOfDay" json:"time_of_day,omitempty"`                             // 记录时间段
	BeforeAfterMeals  BeforeAfterMeals `protobuf:"varint,4,opt,name=before_after_meals,json=beforeAfterMeals,proto3,enum=api.bloodstatus.v1.BeforeAfterMeals" json:"before_after_meals,omitempty"` // 餐前餐后
	SystolicPressure  uint64           `protobuf:"varint,5,opt,name=systolic_pressure,json=systolicPressure,proto3" json:"systolic_pressure,omitempty"`                                            // 收缩压
	DiastolicPressure uint64           `protobuf:"varint,6,opt,name=diastolic_pressure,json=diastolicPressure,proto3" json:"diastolic_pressure,omitempty"`                                         // 舒张压
	Pulse             uint64           `protobuf:"varint,7,opt,name=pulse,proto3" json:"pulse,omitempty"`                                                                                          // 脉搏
	Mood              Mood             `protobuf:"varint,8,opt,name=mood,proto3,enum=api.bloodstatus.v1.Mood" json:"mood,omitempty"`                                                               // 心情
}

func (x *UpdateBloodStatusRequest) Reset() {
	*x = UpdateBloodStatusRequest{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBloodStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBloodStatusRequest) ProtoMessage() {}

func (x *UpdateBloodStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBloodStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateBloodStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateBloodStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBloodStatusRequest) GetRecordDate() uint64 {
	if x != nil {
		return x.RecordDate
	}
	return 0
}

func (x *UpdateBloodStatusRequest) GetTimeOfDay() TimeOfDay {
	if x != nil {
		return x.TimeOfDay
	}
	return TimeOfDay_morning
}

func (x *UpdateBloodStatusRequest) GetBeforeAfterMeals() BeforeAfterMeals {
	if x != nil {
		return x.BeforeAfterMeals
	}
	return BeforeAfterMeals_before
}

func (x *UpdateBloodStatusRequest) GetSystolicPressure() uint64 {
	if x != nil {
		return x.SystolicPressure
	}
	return 0
}

func (x *UpdateBloodStatusRequest) GetDiastolicPressure() uint64 {
	if x != nil {
		return x.DiastolicPressure
	}
	return 0
}

func (x *UpdateBloodStatusRequest) GetPulse() uint64 {
	if x != nil {
		return x.Pulse
	}
	return 0
}

func (x *UpdateBloodStatusRequest) GetMood() Mood {
	if x != nil {
		return x.Mood
	}
	return Mood_same_as
}

type UpdateBloodStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BloodStatus *BloodStatusRecord `protobuf:"bytes,1,opt,name=blood_status,json=bloodStatus,proto3" json:"blood_status,omitempty"`
}

func (x *UpdateBloodStatusReply) Reset() {
	*x = UpdateBloodStatusReply{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBloodStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBloodStatusReply) ProtoMessage() {}

func (x *UpdateBloodStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBloodStatusReply.ProtoReflect.Descriptor instead.
func (*UpdateBloodStatusReply) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateBloodStatusReply) GetBloodStatus() *BloodStatusRecord {
	if x != nil {
		return x.BloodStatus
	}
	return nil
}

type DeleteBloodStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBloodStatusRequest) Reset() {
	*x = DeleteBloodStatusRequest{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBloodStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBloodStatusRequest) ProtoMessage() {}

func (x *DeleteBloodStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBloodStatusRequest.ProtoReflect.Descriptor instead.
func (*DeleteBloodStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteBloodStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteBloodStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBloodStatusReply) Reset() {
	*x = DeleteBloodStatusReply{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBloodStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBloodStatusReply) ProtoMessage() {}

func (x *DeleteBloodStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBloodStatusReply.ProtoReflect.Descriptor instead.
func (*DeleteBloodStatusReply) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{5}
}

type GetBloodStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBloodStatusRequest) Reset() {
	*x = GetBloodStatusRequest{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBloodStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBloodStatusRequest) ProtoMessage() {}

func (x *GetBloodStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBloodStatusRequest.ProtoReflect.Descriptor instead.
func (*GetBloodStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{6}
}

func (x *GetBloodStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBloodStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BloodStatus *BloodStatusRecord `protobuf:"bytes,1,opt,name=blood_status,json=bloodStatus,proto3" json:"blood_status,omitempty"`
}

func (x *GetBloodStatusReply) Reset() {
	*x = GetBloodStatusReply{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBloodStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBloodStatusReply) ProtoMessage() {}

func (x *GetBloodStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBloodStatusReply.ProtoReflect.Descriptor instead.
func (*GetBloodStatusReply) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{7}
}

func (x *GetBloodStatusReply) GetBloodStatus() *BloodStatusRecord {
	if x != nil {
		return x.BloodStatus
	}
	return nil
}

type ListBloodStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *ListBloodStatusRequest) Reset() {
	*x = ListBloodStatusRequest{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBloodStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBloodStatusRequest) ProtoMessage() {}

func (x *ListBloodStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBloodStatusRequest.ProtoReflect.Descriptor instead.
func (*ListBloodStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{8}
}

func (x *ListBloodStatusRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ListBloodStatusRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type ListBloodStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BloodStatusRecord `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListBloodStatusReply) Reset() {
	*x = ListBloodStatusReply{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBloodStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBloodStatusReply) ProtoMessage() {}

func (x *ListBloodStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBloodStatusReply.ProtoReflect.Descriptor instead.
func (*ListBloodStatusReply) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{9}
}

func (x *ListBloodStatusReply) GetData() []*BloodStatusRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type PageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int64                `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages int64                `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalCount int64                `protobuf:"varint,4,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Data       []*BloodStatusRecord `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PageData) Reset() {
	*x = PageData{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageData) ProtoMessage() {}

func (x *PageData) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageData.ProtoReflect.Descriptor instead.
func (*PageData) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{10}
}

func (x *PageData) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageData) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageData) GetTotalPages() int64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *PageData) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *PageData) GetData() []*BloodStatusRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type BloodStatusRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RecordDate        uint64 `protobuf:"varint,2,opt,name=recordDate,proto3" json:"recordDate,omitempty"`
	TimeOfDay         string `protobuf:"bytes,3,opt,name=timeOfDay,proto3" json:"timeOfDay,omitempty"`
	BeforeAfterMeals  string `protobuf:"bytes,4,opt,name=beforeAfterMeals,proto3" json:"beforeAfterMeals,omitempty"`
	SystolicPressure  uint32 `protobuf:"varint,5,opt,name=systolicPressure,proto3" json:"systolicPressure,omitempty"`
	DiastolicPressure uint32 `protobuf:"varint,6,opt,name=diastolicPressure,proto3" json:"diastolicPressure,omitempty"`
	Pulse             uint32 `protobuf:"varint,7,opt,name=pulse,proto3" json:"pulse,omitempty"`
	Mood              string `protobuf:"bytes,8,opt,name=mood,proto3" json:"mood,omitempty"`
	StatusSummary     string `protobuf:"bytes,9,opt,name=statusSummary,proto3" json:"statusSummary,omitempty"`
}

func (x *BloodStatusRecord) Reset() {
	*x = BloodStatusRecord{}
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BloodStatusRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BloodStatusRecord) ProtoMessage() {}

func (x *BloodStatusRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_bloodstatus_v1_blood_status_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BloodStatusRecord.ProtoReflect.Descriptor instead.
func (*BloodStatusRecord) Descriptor() ([]byte, []int) {
	return file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP(), []int{11}
}

func (x *BloodStatusRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BloodStatusRecord) GetRecordDate() uint64 {
	if x != nil {
		return x.RecordDate
	}
	return 0
}

func (x *BloodStatusRecord) GetTimeOfDay() string {
	if x != nil {
		return x.TimeOfDay
	}
	return ""
}

func (x *BloodStatusRecord) GetBeforeAfterMeals() string {
	if x != nil {
		return x.BeforeAfterMeals
	}
	return ""
}

func (x *BloodStatusRecord) GetSystolicPressure() uint32 {
	if x != nil {
		return x.SystolicPressure
	}
	return 0
}

func (x *BloodStatusRecord) GetDiastolicPressure() uint32 {
	if x != nil {
		return x.DiastolicPressure
	}
	return 0
}

func (x *BloodStatusRecord) GetPulse() uint32 {
	if x != nil {
		return x.Pulse
	}
	return 0
}

func (x *BloodStatusRecord) GetMood() string {
	if x != nil {
		return x.Mood
	}
	return ""
}

func (x *BloodStatusRecord) GetStatusSummary() string {
	if x != nil {
		return x.StatusSummary
	}
	return ""
}

var File_api_bloodstatus_v1_blood_status_proto protoreflect.FileDescriptor

var file_api_bloodstatus_v1_blood_status_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xba, 0x03, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x32, 0x0a, 0x18, 0x98, 0xb0, 0xff, 0x90, 0xfd,
	0xce, 0x39, 0x28, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x45, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44,
	0x61, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x5a, 0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x61, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x32, 0x05, 0x18, 0xac, 0x02, 0x28, 0x1e, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x6f,
	0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x11, 0x64,
	0x69, 0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x32, 0x05, 0x18, 0xc8, 0x01,
	0x28, 0x0a, 0x52, 0x11, 0x64, 0x69, 0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x32, 0x05, 0x18, 0xdc, 0x01, 0x28, 0x1e,
	0x52, 0x05, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6f, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x22,
	0x62, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa7, 0x04, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x64, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0xfa, 0x42,
	0x51, 0x72, 0x4f, 0x32, 0x4d, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0f, 0xfa, 0x42, 0x0c,
	0x32, 0x0a, 0x18, 0x98, 0xb0, 0xff, 0x90, 0xfd, 0xce, 0x39, 0x28, 0x00, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61,
	0x79, 0x12, 0x5c, 0x0a, 0x12, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x61, 0x6c, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x12,
	0x37, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x32,
	0x05, 0x18, 0xac, 0x02, 0x28, 0x1e, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63,
	0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x12, 0x64, 0x69, 0x61, 0x73,
	0x74, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x32, 0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a,
	0x52, 0x11, 0x64, 0x69, 0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x32, 0x05, 0x18, 0xdc, 0x01, 0x28, 0x1e, 0x52, 0x05,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6f, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x22, 0x62, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x5f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x50, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb7,
	0x02, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44,
	0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x6f, 0x6c,
	0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69,
	0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x69, 0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63,
	0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f,
	0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2a, 0x2f, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x6f, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0x29, 0x0a, 0x10, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x0a, 0x0a,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x10, 0x01, 0x2a, 0x27, 0x0a, 0x04, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07,
	0x73, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x68, 0x61, 0x70,
	0x70, 0x79, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x61, 0x64, 0x10, 0x02, 0x32, 0xcf, 0x05,
	0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8d, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8d, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8f, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x86, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x3b, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x23, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x64,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_bloodstatus_v1_blood_status_proto_rawDescOnce sync.Once
	file_api_bloodstatus_v1_blood_status_proto_rawDescData = file_api_bloodstatus_v1_blood_status_proto_rawDesc
)

func file_api_bloodstatus_v1_blood_status_proto_rawDescGZIP() []byte {
	file_api_bloodstatus_v1_blood_status_proto_rawDescOnce.Do(func() {
		file_api_bloodstatus_v1_blood_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_bloodstatus_v1_blood_status_proto_rawDescData)
	})
	return file_api_bloodstatus_v1_blood_status_proto_rawDescData
}

var file_api_bloodstatus_v1_blood_status_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_bloodstatus_v1_blood_status_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_bloodstatus_v1_blood_status_proto_goTypes = []any{
	(TimeOfDay)(0),                   // 0: api.bloodstatus.v1.TimeOfDay
	(BeforeAfterMeals)(0),            // 1: api.bloodstatus.v1.BeforeAfterMeals
	(Mood)(0),                        // 2: api.bloodstatus.v1.Mood
	(*CreateBloodStatusRequest)(nil), // 3: api.bloodstatus.v1.CreateBloodStatusRequest
	(*CreateBloodStatusReply)(nil),   // 4: api.bloodstatus.v1.CreateBloodStatusReply
	(*UpdateBloodStatusRequest)(nil), // 5: api.bloodstatus.v1.UpdateBloodStatusRequest
	(*UpdateBloodStatusReply)(nil),   // 6: api.bloodstatus.v1.UpdateBloodStatusReply
	(*DeleteBloodStatusRequest)(nil), // 7: api.bloodstatus.v1.DeleteBloodStatusRequest
	(*DeleteBloodStatusReply)(nil),   // 8: api.bloodstatus.v1.DeleteBloodStatusReply
	(*GetBloodStatusRequest)(nil),    // 9: api.bloodstatus.v1.GetBloodStatusRequest
	(*GetBloodStatusReply)(nil),      // 10: api.bloodstatus.v1.GetBloodStatusReply
	(*ListBloodStatusRequest)(nil),   // 11: api.bloodstatus.v1.ListBloodStatusRequest
	(*ListBloodStatusReply)(nil),     // 12: api.bloodstatus.v1.ListBloodStatusReply
	(*PageData)(nil),                 // 13: api.bloodstatus.v1.PageData
	(*BloodStatusRecord)(nil),        // 14: api.bloodstatus.v1.BloodStatusRecord
}
var file_api_bloodstatus_v1_blood_status_proto_depIdxs = []int32{
	0,  // 0: api.bloodstatus.v1.CreateBloodStatusRequest.timeOfDay:type_name -> api.bloodstatus.v1.TimeOfDay
	1,  // 1: api.bloodstatus.v1.CreateBloodStatusRequest.beforeAfterMeals:type_name -> api.bloodstatus.v1.BeforeAfterMeals
	2,  // 2: api.bloodstatus.v1.CreateBloodStatusRequest.mood:type_name -> api.bloodstatus.v1.Mood
	14, // 3: api.bloodstatus.v1.CreateBloodStatusReply.blood_status:type_name -> api.bloodstatus.v1.BloodStatusRecord
	0,  // 4: api.bloodstatus.v1.UpdateBloodStatusRequest.time_of_day:type_name -> api.bloodstatus.v1.TimeOfDay
	1,  // 5: api.bloodstatus.v1.UpdateBloodStatusRequest.before_after_meals:type_name -> api.bloodstatus.v1.BeforeAfterMeals
	2,  // 6: api.bloodstatus.v1.UpdateBloodStatusRequest.mood:type_name -> api.bloodstatus.v1.Mood
	14, // 7: api.bloodstatus.v1.UpdateBloodStatusReply.blood_status:type_name -> api.bloodstatus.v1.BloodStatusRecord
	14, // 8: api.bloodstatus.v1.GetBloodStatusReply.blood_status:type_name -> api.bloodstatus.v1.BloodStatusRecord
	14, // 9: api.bloodstatus.v1.ListBloodStatusReply.data:type_name -> api.bloodstatus.v1.BloodStatusRecord
	14, // 10: api.bloodstatus.v1.PageData.data:type_name -> api.bloodstatus.v1.BloodStatusRecord
	3,  // 11: api.bloodstatus.v1.BloodStatus.CreateBloodStatus:input_type -> api.bloodstatus.v1.CreateBloodStatusRequest
	5,  // 12: api.bloodstatus.v1.BloodStatus.UpdateBloodStatus:input_type -> api.bloodstatus.v1.UpdateBloodStatusRequest
	7,  // 13: api.bloodstatus.v1.BloodStatus.DeleteBloodStatus:input_type -> api.bloodstatus.v1.DeleteBloodStatusRequest
	9,  // 14: api.bloodstatus.v1.BloodStatus.GetBloodStatus:input_type -> api.bloodstatus.v1.GetBloodStatusRequest
	11, // 15: api.bloodstatus.v1.BloodStatus.ListBloodStatus:input_type -> api.bloodstatus.v1.ListBloodStatusRequest
	4,  // 16: api.bloodstatus.v1.BloodStatus.CreateBloodStatus:output_type -> api.bloodstatus.v1.CreateBloodStatusReply
	6,  // 17: api.bloodstatus.v1.BloodStatus.UpdateBloodStatus:output_type -> api.bloodstatus.v1.UpdateBloodStatusReply
	8,  // 18: api.bloodstatus.v1.BloodStatus.DeleteBloodStatus:output_type -> api.bloodstatus.v1.DeleteBloodStatusReply
	10, // 19: api.bloodstatus.v1.BloodStatus.GetBloodStatus:output_type -> api.bloodstatus.v1.GetBloodStatusReply
	12, // 20: api.bloodstatus.v1.BloodStatus.ListBloodStatus:output_type -> api.bloodstatus.v1.ListBloodStatusReply
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_bloodstatus_v1_blood_status_proto_init() }
func file_api_bloodstatus_v1_blood_status_proto_init() {
	if File_api_bloodstatus_v1_blood_status_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_bloodstatus_v1_blood_status_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_bloodstatus_v1_blood_status_proto_goTypes,
		DependencyIndexes: file_api_bloodstatus_v1_blood_status_proto_depIdxs,
		EnumInfos:         file_api_bloodstatus_v1_blood_status_proto_enumTypes,
		MessageInfos:      file_api_bloodstatus_v1_blood_status_proto_msgTypes,
	}.Build()
	File_api_bloodstatus_v1_blood_status_proto = out.File
	file_api_bloodstatus_v1_blood_status_proto_rawDesc = nil
	file_api_bloodstatus_v1_blood_status_proto_goTypes = nil
	file_api_bloodstatus_v1_blood_status_proto_depIdxs = nil
}
