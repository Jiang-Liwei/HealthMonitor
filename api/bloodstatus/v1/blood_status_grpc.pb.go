// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/bloodstatus/v1/blood_status.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BloodStatus_CreateBloodStatus_FullMethodName = "/api.bloodstatus.v1.BloodStatus/CreateBloodStatus"
	BloodStatus_UpdateBloodStatus_FullMethodName = "/api.bloodstatus.v1.BloodStatus/UpdateBloodStatus"
	BloodStatus_DeleteBloodStatus_FullMethodName = "/api.bloodstatus.v1.BloodStatus/DeleteBloodStatus"
	BloodStatus_GetBloodStatus_FullMethodName    = "/api.bloodstatus.v1.BloodStatus/GetBloodStatus"
	BloodStatus_ListBloodStatus_FullMethodName   = "/api.bloodstatus.v1.BloodStatus/ListBloodStatus"
)

// BloodStatusClient is the client API for BloodStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BloodStatusClient interface {
	CreateBloodStatus(ctx context.Context, in *CreateBloodStatusRequest, opts ...grpc.CallOption) (*CreateBloodStatusReply, error)
	UpdateBloodStatus(ctx context.Context, in *UpdateBloodStatusRequest, opts ...grpc.CallOption) (*UpdateBloodStatusReply, error)
	DeleteBloodStatus(ctx context.Context, in *DeleteBloodStatusRequest, opts ...grpc.CallOption) (*DeleteBloodStatusReply, error)
	GetBloodStatus(ctx context.Context, in *GetBloodStatusRequest, opts ...grpc.CallOption) (*GetBloodStatusReply, error)
	ListBloodStatus(ctx context.Context, in *ListBloodStatusRequest, opts ...grpc.CallOption) (*ListBloodStatusReply, error)
}

type bloodStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewBloodStatusClient(cc grpc.ClientConnInterface) BloodStatusClient {
	return &bloodStatusClient{cc}
}

func (c *bloodStatusClient) CreateBloodStatus(ctx context.Context, in *CreateBloodStatusRequest, opts ...grpc.CallOption) (*CreateBloodStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBloodStatusReply)
	err := c.cc.Invoke(ctx, BloodStatus_CreateBloodStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodStatusClient) UpdateBloodStatus(ctx context.Context, in *UpdateBloodStatusRequest, opts ...grpc.CallOption) (*UpdateBloodStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBloodStatusReply)
	err := c.cc.Invoke(ctx, BloodStatus_UpdateBloodStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodStatusClient) DeleteBloodStatus(ctx context.Context, in *DeleteBloodStatusRequest, opts ...grpc.CallOption) (*DeleteBloodStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBloodStatusReply)
	err := c.cc.Invoke(ctx, BloodStatus_DeleteBloodStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodStatusClient) GetBloodStatus(ctx context.Context, in *GetBloodStatusRequest, opts ...grpc.CallOption) (*GetBloodStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBloodStatusReply)
	err := c.cc.Invoke(ctx, BloodStatus_GetBloodStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloodStatusClient) ListBloodStatus(ctx context.Context, in *ListBloodStatusRequest, opts ...grpc.CallOption) (*ListBloodStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBloodStatusReply)
	err := c.cc.Invoke(ctx, BloodStatus_ListBloodStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BloodStatusServer is the server API for BloodStatus service.
// All implementations must embed UnimplementedBloodStatusServer
// for forward compatibility.
type BloodStatusServer interface {
	CreateBloodStatus(context.Context, *CreateBloodStatusRequest) (*CreateBloodStatusReply, error)
	UpdateBloodStatus(context.Context, *UpdateBloodStatusRequest) (*UpdateBloodStatusReply, error)
	DeleteBloodStatus(context.Context, *DeleteBloodStatusRequest) (*DeleteBloodStatusReply, error)
	GetBloodStatus(context.Context, *GetBloodStatusRequest) (*GetBloodStatusReply, error)
	ListBloodStatus(context.Context, *ListBloodStatusRequest) (*ListBloodStatusReply, error)
	mustEmbedUnimplementedBloodStatusServer()
}

// UnimplementedBloodStatusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBloodStatusServer struct{}

func (UnimplementedBloodStatusServer) CreateBloodStatus(context.Context, *CreateBloodStatusRequest) (*CreateBloodStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBloodStatus not implemented")
}
func (UnimplementedBloodStatusServer) UpdateBloodStatus(context.Context, *UpdateBloodStatusRequest) (*UpdateBloodStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBloodStatus not implemented")
}
func (UnimplementedBloodStatusServer) DeleteBloodStatus(context.Context, *DeleteBloodStatusRequest) (*DeleteBloodStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBloodStatus not implemented")
}
func (UnimplementedBloodStatusServer) GetBloodStatus(context.Context, *GetBloodStatusRequest) (*GetBloodStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBloodStatus not implemented")
}
func (UnimplementedBloodStatusServer) ListBloodStatus(context.Context, *ListBloodStatusRequest) (*ListBloodStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBloodStatus not implemented")
}
func (UnimplementedBloodStatusServer) mustEmbedUnimplementedBloodStatusServer() {}
func (UnimplementedBloodStatusServer) testEmbeddedByValue()                     {}

// UnsafeBloodStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BloodStatusServer will
// result in compilation errors.
type UnsafeBloodStatusServer interface {
	mustEmbedUnimplementedBloodStatusServer()
}

func RegisterBloodStatusServer(s grpc.ServiceRegistrar, srv BloodStatusServer) {
	// If the following call pancis, it indicates UnimplementedBloodStatusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BloodStatus_ServiceDesc, srv)
}

func _BloodStatus_CreateBloodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBloodStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodStatusServer).CreateBloodStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloodStatus_CreateBloodStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodStatusServer).CreateBloodStatus(ctx, req.(*CreateBloodStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodStatus_UpdateBloodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBloodStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodStatusServer).UpdateBloodStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloodStatus_UpdateBloodStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodStatusServer).UpdateBloodStatus(ctx, req.(*UpdateBloodStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodStatus_DeleteBloodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBloodStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodStatusServer).DeleteBloodStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloodStatus_DeleteBloodStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodStatusServer).DeleteBloodStatus(ctx, req.(*DeleteBloodStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodStatus_GetBloodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBloodStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodStatusServer).GetBloodStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloodStatus_GetBloodStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodStatusServer).GetBloodStatus(ctx, req.(*GetBloodStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloodStatus_ListBloodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBloodStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloodStatusServer).ListBloodStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloodStatus_ListBloodStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloodStatusServer).ListBloodStatus(ctx, req.(*ListBloodStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BloodStatus_ServiceDesc is the grpc.ServiceDesc for BloodStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BloodStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bloodstatus.v1.BloodStatus",
	HandlerType: (*BloodStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBloodStatus",
			Handler:    _BloodStatus_CreateBloodStatus_Handler,
		},
		{
			MethodName: "UpdateBloodStatus",
			Handler:    _BloodStatus_UpdateBloodStatus_Handler,
		},
		{
			MethodName: "DeleteBloodStatus",
			Handler:    _BloodStatus_DeleteBloodStatus_Handler,
		},
		{
			MethodName: "GetBloodStatus",
			Handler:    _BloodStatus_GetBloodStatus_Handler,
		},
		{
			MethodName: "ListBloodStatus",
			Handler:    _BloodStatus_ListBloodStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/bloodstatus/v1/blood_status.proto",
}
