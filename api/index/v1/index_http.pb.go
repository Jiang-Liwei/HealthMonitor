// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.3
// source: api/index/v1/index.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationIndexIndex = "/api.index.v1.Index/Index"

type IndexHTTPServer interface {
	Index(context.Context, *IndexRequest) (*IndexReply, error)
}

func RegisterIndexHTTPServer(s *http.Server, srv IndexHTTPServer) {
	r := s.Route("/")
	r.GET("api/v1/index", _Index_Index0_HTTP_Handler(srv))
}

func _Index_Index0_HTTP_Handler(srv IndexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IndexRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIndexIndex)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Index(ctx, req.(*IndexRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IndexReply)
		return ctx.Result(200, reply)
	}
}

type IndexHTTPClient interface {
	Index(ctx context.Context, req *IndexRequest, opts ...http.CallOption) (rsp *IndexReply, err error)
}

type IndexHTTPClientImpl struct {
	cc *http.Client
}

func NewIndexHTTPClient(client *http.Client) IndexHTTPClient {
	return &IndexHTTPClientImpl{client}
}

func (c *IndexHTTPClientImpl) Index(ctx context.Context, in *IndexRequest, opts ...http.CallOption) (*IndexReply, error) {
	var out IndexReply
	pattern := "api/v1/index"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIndexIndex))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
