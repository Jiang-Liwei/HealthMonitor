// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"healthmonitor/internal/biz"
	"healthmonitor/internal/conf"
	"healthmonitor/internal/data"
	"healthmonitor/internal/server"
	"healthmonitor/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(c *conf.Server, d *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	indexService := service.NewIndexService()
	dataData, cleanup, err := data.NewData(d, logger)
	if err != nil {
		return nil, nil, err
	}
	bloodStatusRepo := data.NewBloodStatusRepo(dataData, logger)
	bloodStatusUsecase := biz.NewBloodStatusUsecase(bloodStatusRepo, logger)
	bloodStatusService := service.NewBloodStatusService(bloodStatusUsecase, logger)
	httpServerConfig := ProvideHTTPServerConfig(c, indexService, bloodStatusService, logger)
	grpcServer := server.NewGRPCServer(httpServerConfig)
	httpServer := server.NewHTTPServer(httpServerConfig)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// ProvideHTTPServerConfig provides the HTTP server configuration.
func ProvideHTTPServerConfig(
	c *conf.Server,
	index *service.IndexService,
	bloodStatus *service.BloodStatusService,
	logger log.Logger,
) server.HTTPServerConfig {
	return server.HTTPServerConfig{
		Conf:        c,
		Index:       index,
		BloodStatus: bloodStatus,
		Logger:      logger,
	}
}
