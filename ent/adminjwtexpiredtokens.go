// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthmonitor/ent/adminjwtexpiredtokens"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AdminJWTExpiredTokens is the model entity for the AdminJWTExpiredTokens schema.
type AdminJWTExpiredTokens struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Jti holds the value of the "jti" field.
	Jti string `json:"jti,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt int `json:"expires_at,omitempty"`
	// RevokedAt holds the value of the "revoked_at" field.
	RevokedAt    int `json:"revoked_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminJWTExpiredTokens) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminjwtexpiredtokens.FieldID, adminjwtexpiredtokens.FieldExpiresAt, adminjwtexpiredtokens.FieldRevokedAt:
			values[i] = new(sql.NullInt64)
		case adminjwtexpiredtokens.FieldJti:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminJWTExpiredTokens fields.
func (ajet *AdminJWTExpiredTokens) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminjwtexpiredtokens.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ajet.ID = int(value.Int64)
		case adminjwtexpiredtokens.FieldJti:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jti", values[i])
			} else if value.Valid {
				ajet.Jti = value.String
			}
		case adminjwtexpiredtokens.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				ajet.ExpiresAt = int(value.Int64)
			}
		case adminjwtexpiredtokens.FieldRevokedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revoked_at", values[i])
			} else if value.Valid {
				ajet.RevokedAt = int(value.Int64)
			}
		default:
			ajet.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminJWTExpiredTokens.
// This includes values selected through modifiers, order, etc.
func (ajet *AdminJWTExpiredTokens) Value(name string) (ent.Value, error) {
	return ajet.selectValues.Get(name)
}

// Update returns a builder for updating this AdminJWTExpiredTokens.
// Note that you need to call AdminJWTExpiredTokens.Unwrap() before calling this method if this AdminJWTExpiredTokens
// was returned from a transaction, and the transaction was committed or rolled back.
func (ajet *AdminJWTExpiredTokens) Update() *AdminJWTExpiredTokensUpdateOne {
	return NewAdminJWTExpiredTokensClient(ajet.config).UpdateOne(ajet)
}

// Unwrap unwraps the AdminJWTExpiredTokens entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ajet *AdminJWTExpiredTokens) Unwrap() *AdminJWTExpiredTokens {
	_tx, ok := ajet.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminJWTExpiredTokens is not a transactional entity")
	}
	ajet.config.driver = _tx.drv
	return ajet
}

// String implements the fmt.Stringer.
func (ajet *AdminJWTExpiredTokens) String() string {
	var builder strings.Builder
	builder.WriteString("AdminJWTExpiredTokens(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ajet.ID))
	builder.WriteString("jti=")
	builder.WriteString(ajet.Jti)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(fmt.Sprintf("%v", ajet.ExpiresAt))
	builder.WriteString(", ")
	builder.WriteString("revoked_at=")
	builder.WriteString(fmt.Sprintf("%v", ajet.RevokedAt))
	builder.WriteByte(')')
	return builder.String()
}

// AdminJWTExpiredTokensSlice is a parsable slice of AdminJWTExpiredTokens.
type AdminJWTExpiredTokensSlice []*AdminJWTExpiredTokens
