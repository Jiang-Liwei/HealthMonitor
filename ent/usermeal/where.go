// Code generated by ent, DO NOT EDIT.

package usermeal

import (
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEQ(FieldUserID, v))
}

// RecordDate applies equality check predicate on the "record_date" field. It's identical to RecordDateEQ.
func RecordDate(v int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEQ(FieldRecordDate, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEQ(FieldDescription, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldLTE(FieldUserID, v))
}

// RecordDateEQ applies the EQ predicate on the "record_date" field.
func RecordDateEQ(v int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEQ(FieldRecordDate, v))
}

// RecordDateNEQ applies the NEQ predicate on the "record_date" field.
func RecordDateNEQ(v int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNEQ(FieldRecordDate, v))
}

// RecordDateIn applies the In predicate on the "record_date" field.
func RecordDateIn(vs ...int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldIn(FieldRecordDate, vs...))
}

// RecordDateNotIn applies the NotIn predicate on the "record_date" field.
func RecordDateNotIn(vs ...int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNotIn(FieldRecordDate, vs...))
}

// RecordDateGT applies the GT predicate on the "record_date" field.
func RecordDateGT(v int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldGT(FieldRecordDate, v))
}

// RecordDateGTE applies the GTE predicate on the "record_date" field.
func RecordDateGTE(v int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldGTE(FieldRecordDate, v))
}

// RecordDateLT applies the LT predicate on the "record_date" field.
func RecordDateLT(v int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldLT(FieldRecordDate, v))
}

// RecordDateLTE applies the LTE predicate on the "record_date" field.
func RecordDateLTE(v int) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldLTE(FieldRecordDate, v))
}

// MealTypeEQ applies the EQ predicate on the "meal_type" field.
func MealTypeEQ(v MealType) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEQ(FieldMealType, v))
}

// MealTypeNEQ applies the NEQ predicate on the "meal_type" field.
func MealTypeNEQ(v MealType) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNEQ(FieldMealType, v))
}

// MealTypeIn applies the In predicate on the "meal_type" field.
func MealTypeIn(vs ...MealType) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldIn(FieldMealType, vs...))
}

// MealTypeNotIn applies the NotIn predicate on the "meal_type" field.
func MealTypeNotIn(vs ...MealType) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNotIn(FieldMealType, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.UserMeal {
	return predicate.UserMeal(sql.FieldContainsFold(FieldDescription, v))
}

// HasFood applies the HasEdge predicate on the "food" edge.
func HasFood() predicate.UserMeal {
	return predicate.UserMeal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FoodTable, FoodColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFoodWith applies the HasEdge predicate on the "food" edge with a given conditions (other predicates).
func HasFoodWith(preds ...predicate.UserMealFood) predicate.UserMeal {
	return predicate.UserMeal(func(s *sql.Selector) {
		step := newFoodStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserMeal) predicate.UserMeal {
	return predicate.UserMeal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserMeal) predicate.UserMeal {
	return predicate.UserMeal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserMeal) predicate.UserMeal {
	return predicate.UserMeal(sql.NotPredicates(p))
}
