// Code generated by ent, DO NOT EDIT.

package usermeal

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usermeal type in the database.
	Label = "user_meal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldRecordDate holds the string denoting the record_date field in the database.
	FieldRecordDate = "record_date"
	// FieldMealType holds the string denoting the meal_type field in the database.
	FieldMealType = "meal_type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeFood holds the string denoting the food edge name in mutations.
	EdgeFood = "food"
	// Table holds the table name of the usermeal in the database.
	Table = "user_meals"
	// FoodTable is the table that holds the food relation/edge.
	FoodTable = "user_meal_foods"
	// FoodInverseTable is the table name for the UserMealFood entity.
	// It exists in this package in order to avoid circular dependency with the "usermealfood" package.
	FoodInverseTable = "user_meal_foods"
	// FoodColumn is the table column denoting the food relation/edge.
	FoodColumn = "user_meal_food"
)

// Columns holds all SQL columns for usermeal fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldRecordDate,
	FieldMealType,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// MealType defines the type for the "meal_type" enum field.
type MealType string

// MealType values.
const (
	MealTypeBreakfast MealType = "breakfast"
	MealTypeLunch     MealType = "lunch"
	MealTypeDinner    MealType = "dinner"
)

func (mt MealType) String() string {
	return string(mt)
}

// MealTypeValidator is a validator for the "meal_type" field enum values. It is called by the builders before save.
func MealTypeValidator(mt MealType) error {
	switch mt {
	case MealTypeBreakfast, MealTypeLunch, MealTypeDinner:
		return nil
	default:
		return fmt.Errorf("usermeal: invalid enum value for meal_type field: %q", mt)
	}
}

// OrderOption defines the ordering options for the UserMeal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByRecordDate orders the results by the record_date field.
func ByRecordDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecordDate, opts...).ToFunc()
}

// ByMealType orders the results by the meal_type field.
func ByMealType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMealType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByFoodCount orders the results by food count.
func ByFoodCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFoodStep(), opts...)
	}
}

// ByFood orders the results by food terms.
func ByFood(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFoodStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFoodStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FoodInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FoodTable, FoodColumn),
	)
}
