// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"healthmonitor/ent/adminjwtblacklist"
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminJWTBlacklistDelete is the builder for deleting a AdminJWTBlacklist entity.
type AdminJWTBlacklistDelete struct {
	config
	hooks    []Hook
	mutation *AdminJWTBlacklistMutation
}

// Where appends a list predicates to the AdminJWTBlacklistDelete builder.
func (ajbd *AdminJWTBlacklistDelete) Where(ps ...predicate.AdminJWTBlacklist) *AdminJWTBlacklistDelete {
	ajbd.mutation.Where(ps...)
	return ajbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ajbd *AdminJWTBlacklistDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ajbd.sqlExec, ajbd.mutation, ajbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ajbd *AdminJWTBlacklistDelete) ExecX(ctx context.Context) int {
	n, err := ajbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ajbd *AdminJWTBlacklistDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(adminjwtblacklist.Table, sqlgraph.NewFieldSpec(adminjwtblacklist.FieldID, field.TypeInt))
	if ps := ajbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ajbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ajbd.mutation.done = true
	return affected, err
}

// AdminJWTBlacklistDeleteOne is the builder for deleting a single AdminJWTBlacklist entity.
type AdminJWTBlacklistDeleteOne struct {
	ajbd *AdminJWTBlacklistDelete
}

// Where appends a list predicates to the AdminJWTBlacklistDelete builder.
func (ajbdo *AdminJWTBlacklistDeleteOne) Where(ps ...predicate.AdminJWTBlacklist) *AdminJWTBlacklistDeleteOne {
	ajbdo.ajbd.mutation.Where(ps...)
	return ajbdo
}

// Exec executes the deletion query.
func (ajbdo *AdminJWTBlacklistDeleteOne) Exec(ctx context.Context) error {
	n, err := ajbdo.ajbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{adminjwtblacklist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ajbdo *AdminJWTBlacklistDeleteOne) ExecX(ctx context.Context) {
	if err := ajbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
