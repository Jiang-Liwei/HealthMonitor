// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/adminpermission"
	"healthmonitor/ent/adminrolepermission"
	"healthmonitor/ent/adminroles"
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AdminRolePermissionUpdate is the builder for updating AdminRolePermission entities.
type AdminRolePermissionUpdate struct {
	config
	hooks    []Hook
	mutation *AdminRolePermissionMutation
}

// Where appends a list predicates to the AdminRolePermissionUpdate builder.
func (arpu *AdminRolePermissionUpdate) Where(ps ...predicate.AdminRolePermission) *AdminRolePermissionUpdate {
	arpu.mutation.Where(ps...)
	return arpu
}

// SetRoleID sets the "role" edge to the AdminRoles entity by ID.
func (arpu *AdminRolePermissionUpdate) SetRoleID(id uuid.UUID) *AdminRolePermissionUpdate {
	arpu.mutation.SetRoleID(id)
	return arpu
}

// SetNillableRoleID sets the "role" edge to the AdminRoles entity by ID if the given value is not nil.
func (arpu *AdminRolePermissionUpdate) SetNillableRoleID(id *uuid.UUID) *AdminRolePermissionUpdate {
	if id != nil {
		arpu = arpu.SetRoleID(*id)
	}
	return arpu
}

// SetRole sets the "role" edge to the AdminRoles entity.
func (arpu *AdminRolePermissionUpdate) SetRole(a *AdminRoles) *AdminRolePermissionUpdate {
	return arpu.SetRoleID(a.ID)
}

// SetPermissionID sets the "permission" edge to the AdminPermission entity by ID.
func (arpu *AdminRolePermissionUpdate) SetPermissionID(id uuid.UUID) *AdminRolePermissionUpdate {
	arpu.mutation.SetPermissionID(id)
	return arpu
}

// SetNillablePermissionID sets the "permission" edge to the AdminPermission entity by ID if the given value is not nil.
func (arpu *AdminRolePermissionUpdate) SetNillablePermissionID(id *uuid.UUID) *AdminRolePermissionUpdate {
	if id != nil {
		arpu = arpu.SetPermissionID(*id)
	}
	return arpu
}

// SetPermission sets the "permission" edge to the AdminPermission entity.
func (arpu *AdminRolePermissionUpdate) SetPermission(a *AdminPermission) *AdminRolePermissionUpdate {
	return arpu.SetPermissionID(a.ID)
}

// Mutation returns the AdminRolePermissionMutation object of the builder.
func (arpu *AdminRolePermissionUpdate) Mutation() *AdminRolePermissionMutation {
	return arpu.mutation
}

// ClearRole clears the "role" edge to the AdminRoles entity.
func (arpu *AdminRolePermissionUpdate) ClearRole() *AdminRolePermissionUpdate {
	arpu.mutation.ClearRole()
	return arpu
}

// ClearPermission clears the "permission" edge to the AdminPermission entity.
func (arpu *AdminRolePermissionUpdate) ClearPermission() *AdminRolePermissionUpdate {
	arpu.mutation.ClearPermission()
	return arpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (arpu *AdminRolePermissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, arpu.sqlSave, arpu.mutation, arpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (arpu *AdminRolePermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := arpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (arpu *AdminRolePermissionUpdate) Exec(ctx context.Context) error {
	_, err := arpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpu *AdminRolePermissionUpdate) ExecX(ctx context.Context) {
	if err := arpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (arpu *AdminRolePermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminrolepermission.Table, adminrolepermission.Columns, sqlgraph.NewFieldSpec(adminrolepermission.FieldID, field.TypeInt))
	if ps := arpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if arpu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.RoleTable,
			Columns: []string{adminrolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminroles.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.RoleTable,
			Columns: []string{adminrolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminroles.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if arpu.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.PermissionTable,
			Columns: []string{adminrolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminpermission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpu.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.PermissionTable,
			Columns: []string{adminrolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminpermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, arpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminrolepermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	arpu.mutation.done = true
	return n, nil
}

// AdminRolePermissionUpdateOne is the builder for updating a single AdminRolePermission entity.
type AdminRolePermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminRolePermissionMutation
}

// SetRoleID sets the "role" edge to the AdminRoles entity by ID.
func (arpuo *AdminRolePermissionUpdateOne) SetRoleID(id uuid.UUID) *AdminRolePermissionUpdateOne {
	arpuo.mutation.SetRoleID(id)
	return arpuo
}

// SetNillableRoleID sets the "role" edge to the AdminRoles entity by ID if the given value is not nil.
func (arpuo *AdminRolePermissionUpdateOne) SetNillableRoleID(id *uuid.UUID) *AdminRolePermissionUpdateOne {
	if id != nil {
		arpuo = arpuo.SetRoleID(*id)
	}
	return arpuo
}

// SetRole sets the "role" edge to the AdminRoles entity.
func (arpuo *AdminRolePermissionUpdateOne) SetRole(a *AdminRoles) *AdminRolePermissionUpdateOne {
	return arpuo.SetRoleID(a.ID)
}

// SetPermissionID sets the "permission" edge to the AdminPermission entity by ID.
func (arpuo *AdminRolePermissionUpdateOne) SetPermissionID(id uuid.UUID) *AdminRolePermissionUpdateOne {
	arpuo.mutation.SetPermissionID(id)
	return arpuo
}

// SetNillablePermissionID sets the "permission" edge to the AdminPermission entity by ID if the given value is not nil.
func (arpuo *AdminRolePermissionUpdateOne) SetNillablePermissionID(id *uuid.UUID) *AdminRolePermissionUpdateOne {
	if id != nil {
		arpuo = arpuo.SetPermissionID(*id)
	}
	return arpuo
}

// SetPermission sets the "permission" edge to the AdminPermission entity.
func (arpuo *AdminRolePermissionUpdateOne) SetPermission(a *AdminPermission) *AdminRolePermissionUpdateOne {
	return arpuo.SetPermissionID(a.ID)
}

// Mutation returns the AdminRolePermissionMutation object of the builder.
func (arpuo *AdminRolePermissionUpdateOne) Mutation() *AdminRolePermissionMutation {
	return arpuo.mutation
}

// ClearRole clears the "role" edge to the AdminRoles entity.
func (arpuo *AdminRolePermissionUpdateOne) ClearRole() *AdminRolePermissionUpdateOne {
	arpuo.mutation.ClearRole()
	return arpuo
}

// ClearPermission clears the "permission" edge to the AdminPermission entity.
func (arpuo *AdminRolePermissionUpdateOne) ClearPermission() *AdminRolePermissionUpdateOne {
	arpuo.mutation.ClearPermission()
	return arpuo
}

// Where appends a list predicates to the AdminRolePermissionUpdate builder.
func (arpuo *AdminRolePermissionUpdateOne) Where(ps ...predicate.AdminRolePermission) *AdminRolePermissionUpdateOne {
	arpuo.mutation.Where(ps...)
	return arpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (arpuo *AdminRolePermissionUpdateOne) Select(field string, fields ...string) *AdminRolePermissionUpdateOne {
	arpuo.fields = append([]string{field}, fields...)
	return arpuo
}

// Save executes the query and returns the updated AdminRolePermission entity.
func (arpuo *AdminRolePermissionUpdateOne) Save(ctx context.Context) (*AdminRolePermission, error) {
	return withHooks(ctx, arpuo.sqlSave, arpuo.mutation, arpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (arpuo *AdminRolePermissionUpdateOne) SaveX(ctx context.Context) *AdminRolePermission {
	node, err := arpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (arpuo *AdminRolePermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := arpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpuo *AdminRolePermissionUpdateOne) ExecX(ctx context.Context) {
	if err := arpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (arpuo *AdminRolePermissionUpdateOne) sqlSave(ctx context.Context) (_node *AdminRolePermission, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminrolepermission.Table, adminrolepermission.Columns, sqlgraph.NewFieldSpec(adminrolepermission.FieldID, field.TypeInt))
	id, ok := arpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminRolePermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := arpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminrolepermission.FieldID)
		for _, f := range fields {
			if !adminrolepermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminrolepermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := arpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if arpuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.RoleTable,
			Columns: []string{adminrolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminroles.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.RoleTable,
			Columns: []string{adminrolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminroles.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if arpuo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.PermissionTable,
			Columns: []string{adminrolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminpermission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpuo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.PermissionTable,
			Columns: []string{adminrolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminpermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminRolePermission{config: arpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, arpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminrolepermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	arpuo.mutation.done = true
	return _node, nil
}
