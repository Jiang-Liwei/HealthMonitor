// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/adminjwtblacklist"
	"healthmonitor/ent/adminlog"
	"healthmonitor/ent/adminmenu"
	"healthmonitor/ent/adminpermission"
	"healthmonitor/ent/adminrolepermission"
	"healthmonitor/ent/adminroles"
	"healthmonitor/ent/adminuser"
	"healthmonitor/ent/adminuserrole"
	"healthmonitor/ent/bloodstatusrecord"
	"healthmonitor/ent/food"
	"healthmonitor/ent/foodingredients"
	"healthmonitor/ent/foodnutrientsrelationships"
	"healthmonitor/ent/ingredients"
	"healthmonitor/ent/nutrient"
	"healthmonitor/ent/predicate"
	"healthmonitor/ent/usermeal"
	"healthmonitor/ent/usermealfood"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdminJWTBlacklist          = "AdminJWTBlacklist"
	TypeAdminLog                   = "AdminLog"
	TypeAdminMenu                  = "AdminMenu"
	TypeAdminPermission            = "AdminPermission"
	TypeAdminRolePermission        = "AdminRolePermission"
	TypeAdminRoles                 = "AdminRoles"
	TypeAdminUser                  = "AdminUser"
	TypeAdminUserRole              = "AdminUserRole"
	TypeBloodStatusRecord          = "BloodStatusRecord"
	TypeFood                       = "Food"
	TypeFoodIngredients            = "FoodIngredients"
	TypeFoodNutrientsRelationships = "FoodNutrientsRelationships"
	TypeIngredients                = "Ingredients"
	TypeNutrient                   = "Nutrient"
	TypeUserMeal                   = "UserMeal"
	TypeUserMealFood               = "UserMealFood"
)

// AdminJWTBlacklistMutation represents an operation that mutates the AdminJWTBlacklist nodes in the graph.
type AdminJWTBlacklistMutation struct {
	config
	op            Op
	typ           string
	id            *int
	jti           *string
	expires_at    *int
	addexpires_at *int
	revoked_at    *int
	addrevoked_at *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AdminJWTBlacklist, error)
	predicates    []predicate.AdminJWTBlacklist
}

var _ ent.Mutation = (*AdminJWTBlacklistMutation)(nil)

// adminjwtblacklistOption allows management of the mutation configuration using functional options.
type adminjwtblacklistOption func(*AdminJWTBlacklistMutation)

// newAdminJWTBlacklistMutation creates new mutation for the AdminJWTBlacklist entity.
func newAdminJWTBlacklistMutation(c config, op Op, opts ...adminjwtblacklistOption) *AdminJWTBlacklistMutation {
	m := &AdminJWTBlacklistMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminJWTBlacklist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminJWTBlacklistID sets the ID field of the mutation.
func withAdminJWTBlacklistID(id int) adminjwtblacklistOption {
	return func(m *AdminJWTBlacklistMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminJWTBlacklist
		)
		m.oldValue = func(ctx context.Context) (*AdminJWTBlacklist, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminJWTBlacklist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminJWTBlacklist sets the old AdminJWTBlacklist of the mutation.
func withAdminJWTBlacklist(node *AdminJWTBlacklist) adminjwtblacklistOption {
	return func(m *AdminJWTBlacklistMutation) {
		m.oldValue = func(context.Context) (*AdminJWTBlacklist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminJWTBlacklistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminJWTBlacklistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminJWTBlacklistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminJWTBlacklistMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminJWTBlacklist.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetJti sets the "jti" field.
func (m *AdminJWTBlacklistMutation) SetJti(s string) {
	m.jti = &s
}

// Jti returns the value of the "jti" field in the mutation.
func (m *AdminJWTBlacklistMutation) Jti() (r string, exists bool) {
	v := m.jti
	if v == nil {
		return
	}
	return *v, true
}

// OldJti returns the old "jti" field's value of the AdminJWTBlacklist entity.
// If the AdminJWTBlacklist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminJWTBlacklistMutation) OldJti(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJti is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJti requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJti: %w", err)
	}
	return oldValue.Jti, nil
}

// ResetJti resets all changes to the "jti" field.
func (m *AdminJWTBlacklistMutation) ResetJti() {
	m.jti = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *AdminJWTBlacklistMutation) SetExpiresAt(i int) {
	m.expires_at = &i
	m.addexpires_at = nil
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *AdminJWTBlacklistMutation) ExpiresAt() (r int, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the AdminJWTBlacklist entity.
// If the AdminJWTBlacklist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminJWTBlacklistMutation) OldExpiresAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// AddExpiresAt adds i to the "expires_at" field.
func (m *AdminJWTBlacklistMutation) AddExpiresAt(i int) {
	if m.addexpires_at != nil {
		*m.addexpires_at += i
	} else {
		m.addexpires_at = &i
	}
}

// AddedExpiresAt returns the value that was added to the "expires_at" field in this mutation.
func (m *AdminJWTBlacklistMutation) AddedExpiresAt() (r int, exists bool) {
	v := m.addexpires_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *AdminJWTBlacklistMutation) ResetExpiresAt() {
	m.expires_at = nil
	m.addexpires_at = nil
}

// SetRevokedAt sets the "revoked_at" field.
func (m *AdminJWTBlacklistMutation) SetRevokedAt(i int) {
	m.revoked_at = &i
	m.addrevoked_at = nil
}

// RevokedAt returns the value of the "revoked_at" field in the mutation.
func (m *AdminJWTBlacklistMutation) RevokedAt() (r int, exists bool) {
	v := m.revoked_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRevokedAt returns the old "revoked_at" field's value of the AdminJWTBlacklist entity.
// If the AdminJWTBlacklist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminJWTBlacklistMutation) OldRevokedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevokedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevokedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevokedAt: %w", err)
	}
	return oldValue.RevokedAt, nil
}

// AddRevokedAt adds i to the "revoked_at" field.
func (m *AdminJWTBlacklistMutation) AddRevokedAt(i int) {
	if m.addrevoked_at != nil {
		*m.addrevoked_at += i
	} else {
		m.addrevoked_at = &i
	}
}

// AddedRevokedAt returns the value that was added to the "revoked_at" field in this mutation.
func (m *AdminJWTBlacklistMutation) AddedRevokedAt() (r int, exists bool) {
	v := m.addrevoked_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetRevokedAt resets all changes to the "revoked_at" field.
func (m *AdminJWTBlacklistMutation) ResetRevokedAt() {
	m.revoked_at = nil
	m.addrevoked_at = nil
}

// Where appends a list predicates to the AdminJWTBlacklistMutation builder.
func (m *AdminJWTBlacklistMutation) Where(ps ...predicate.AdminJWTBlacklist) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminJWTBlacklistMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminJWTBlacklistMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminJWTBlacklist, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminJWTBlacklistMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminJWTBlacklistMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminJWTBlacklist).
func (m *AdminJWTBlacklistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminJWTBlacklistMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.jti != nil {
		fields = append(fields, adminjwtblacklist.FieldJti)
	}
	if m.expires_at != nil {
		fields = append(fields, adminjwtblacklist.FieldExpiresAt)
	}
	if m.revoked_at != nil {
		fields = append(fields, adminjwtblacklist.FieldRevokedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminJWTBlacklistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminjwtblacklist.FieldJti:
		return m.Jti()
	case adminjwtblacklist.FieldExpiresAt:
		return m.ExpiresAt()
	case adminjwtblacklist.FieldRevokedAt:
		return m.RevokedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminJWTBlacklistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminjwtblacklist.FieldJti:
		return m.OldJti(ctx)
	case adminjwtblacklist.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case adminjwtblacklist.FieldRevokedAt:
		return m.OldRevokedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AdminJWTBlacklist field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminJWTBlacklistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminjwtblacklist.FieldJti:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJti(v)
		return nil
	case adminjwtblacklist.FieldExpiresAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case adminjwtblacklist.FieldRevokedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevokedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminJWTBlacklist field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminJWTBlacklistMutation) AddedFields() []string {
	var fields []string
	if m.addexpires_at != nil {
		fields = append(fields, adminjwtblacklist.FieldExpiresAt)
	}
	if m.addrevoked_at != nil {
		fields = append(fields, adminjwtblacklist.FieldRevokedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminJWTBlacklistMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminjwtblacklist.FieldExpiresAt:
		return m.AddedExpiresAt()
	case adminjwtblacklist.FieldRevokedAt:
		return m.AddedRevokedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminJWTBlacklistMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminjwtblacklist.FieldExpiresAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiresAt(v)
		return nil
	case adminjwtblacklist.FieldRevokedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRevokedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminJWTBlacklist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminJWTBlacklistMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminJWTBlacklistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminJWTBlacklistMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AdminJWTBlacklist nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminJWTBlacklistMutation) ResetField(name string) error {
	switch name {
	case adminjwtblacklist.FieldJti:
		m.ResetJti()
		return nil
	case adminjwtblacklist.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case adminjwtblacklist.FieldRevokedAt:
		m.ResetRevokedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminJWTBlacklist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminJWTBlacklistMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminJWTBlacklistMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminJWTBlacklistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminJWTBlacklistMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminJWTBlacklistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminJWTBlacklistMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminJWTBlacklistMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AdminJWTBlacklist unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminJWTBlacklistMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AdminJWTBlacklist edge %s", name)
}

// AdminLogMutation represents an operation that mutates the AdminLog nodes in the graph.
type AdminLogMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	action        *string
	ip_address    *string
	created_at    *int
	addcreated_at *int
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*AdminLog, error)
	predicates    []predicate.AdminLog
}

var _ ent.Mutation = (*AdminLogMutation)(nil)

// adminlogOption allows management of the mutation configuration using functional options.
type adminlogOption func(*AdminLogMutation)

// newAdminLogMutation creates new mutation for the AdminLog entity.
func newAdminLogMutation(c config, op Op, opts ...adminlogOption) *AdminLogMutation {
	m := &AdminLogMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminLogID sets the ID field of the mutation.
func withAdminLogID(id uuid.UUID) adminlogOption {
	return func(m *AdminLogMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminLog
		)
		m.oldValue = func(ctx context.Context) (*AdminLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminLog sets the old AdminLog of the mutation.
func withAdminLog(node *AdminLog) adminlogOption {
	return func(m *AdminLogMutation) {
		m.oldValue = func(context.Context) (*AdminLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AdminLog entities.
func (m *AdminLogMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminLogMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminLogMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAction sets the "action" field.
func (m *AdminLogMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *AdminLogMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the AdminLog entity.
// If the AdminLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLogMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *AdminLogMutation) ResetAction() {
	m.action = nil
}

// SetIPAddress sets the "ip_address" field.
func (m *AdminLogMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *AdminLogMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the AdminLog entity.
// If the AdminLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLogMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *AdminLogMutation) ResetIPAddress() {
	m.ip_address = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminLogMutation) SetCreatedAt(i int) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminLogMutation) CreatedAt() (r int, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminLog entity.
// If the AdminLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminLogMutation) OldCreatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *AdminLogMutation) AddCreatedAt(i int) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AdminLogMutation) AddedCreatedAt() (r int, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminLogMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUserID sets the "user" edge to the AdminUser entity by id.
func (m *AdminLogMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the AdminUser entity.
func (m *AdminLogMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the AdminUser entity was cleared.
func (m *AdminLogMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *AdminLogMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *AdminLogMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *AdminLogMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the AdminLogMutation builder.
func (m *AdminLogMutation) Where(ps ...predicate.AdminLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminLog).
func (m *AdminLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminLogMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.action != nil {
		fields = append(fields, adminlog.FieldAction)
	}
	if m.ip_address != nil {
		fields = append(fields, adminlog.FieldIPAddress)
	}
	if m.created_at != nil {
		fields = append(fields, adminlog.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminlog.FieldAction:
		return m.Action()
	case adminlog.FieldIPAddress:
		return m.IPAddress()
	case adminlog.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminlog.FieldAction:
		return m.OldAction(ctx)
	case adminlog.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case adminlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AdminLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminlog.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case adminlog.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case adminlog.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminLogMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, adminlog.FieldCreatedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminlog.FieldCreatedAt:
		return m.AddedCreatedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminlog.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AdminLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminLogMutation) ResetField(name string) error {
	switch name {
	case adminlog.FieldAction:
		m.ResetAction()
		return nil
	case adminlog.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case adminlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, adminlog.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminlog.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, adminlog.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminLogMutation) EdgeCleared(name string) bool {
	switch name {
	case adminlog.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminLogMutation) ClearEdge(name string) error {
	switch name {
	case adminlog.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown AdminLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminLogMutation) ResetEdge(name string) error {
	switch name {
	case adminlog.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown AdminLog edge %s", name)
}

// AdminMenuMutation represents an operation that mutates the AdminMenu nodes in the graph.
type AdminMenuMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	icon          *string
	_path         *string
	_order        *uint16
	add_order     *int16
	created_at    *int
	addcreated_at *int
	updated_at    *int
	addupdated_at *int
	deleted_at    *int
	adddeleted_at *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AdminMenu, error)
	predicates    []predicate.AdminMenu
}

var _ ent.Mutation = (*AdminMenuMutation)(nil)

// adminmenuOption allows management of the mutation configuration using functional options.
type adminmenuOption func(*AdminMenuMutation)

// newAdminMenuMutation creates new mutation for the AdminMenu entity.
func newAdminMenuMutation(c config, op Op, opts ...adminmenuOption) *AdminMenuMutation {
	m := &AdminMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminMenuID sets the ID field of the mutation.
func withAdminMenuID(id uuid.UUID) adminmenuOption {
	return func(m *AdminMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminMenu
		)
		m.oldValue = func(ctx context.Context) (*AdminMenu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminMenu sets the old AdminMenu of the mutation.
func withAdminMenu(node *AdminMenu) adminmenuOption {
	return func(m *AdminMenuMutation) {
		m.oldValue = func(context.Context) (*AdminMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AdminMenu entities.
func (m *AdminMenuMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminMenuMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminMenuMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminMenu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AdminMenuMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AdminMenuMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AdminMenu entity.
// If the AdminMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenuMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AdminMenuMutation) ResetName() {
	m.name = nil
}

// SetIcon sets the "icon" field.
func (m *AdminMenuMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *AdminMenuMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the AdminMenu entity.
// If the AdminMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenuMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *AdminMenuMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[adminmenu.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *AdminMenuMutation) IconCleared() bool {
	_, ok := m.clearedFields[adminmenu.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *AdminMenuMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, adminmenu.FieldIcon)
}

// SetPath sets the "path" field.
func (m *AdminMenuMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *AdminMenuMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the AdminMenu entity.
// If the AdminMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenuMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *AdminMenuMutation) ResetPath() {
	m._path = nil
}

// SetOrder sets the "order" field.
func (m *AdminMenuMutation) SetOrder(u uint16) {
	m._order = &u
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *AdminMenuMutation) Order() (r uint16, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the AdminMenu entity.
// If the AdminMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenuMutation) OldOrder(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds u to the "order" field.
func (m *AdminMenuMutation) AddOrder(u int16) {
	if m.add_order != nil {
		*m.add_order += u
	} else {
		m.add_order = &u
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *AdminMenuMutation) AddedOrder() (r int16, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *AdminMenuMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminMenuMutation) SetCreatedAt(i int) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminMenuMutation) CreatedAt() (r int, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminMenu entity.
// If the AdminMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenuMutation) OldCreatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *AdminMenuMutation) AddCreatedAt(i int) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AdminMenuMutation) AddedCreatedAt() (r int, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminMenuMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminMenuMutation) SetUpdatedAt(i int) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminMenuMutation) UpdatedAt() (r int, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminMenu entity.
// If the AdminMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenuMutation) OldUpdatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *AdminMenuMutation) AddUpdatedAt(i int) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AdminMenuMutation) AddedUpdatedAt() (r int, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminMenuMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminMenuMutation) SetDeletedAt(i int) {
	m.deleted_at = &i
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminMenuMutation) DeletedAt() (r int, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminMenu entity.
// If the AdminMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMenuMutation) OldDeletedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds i to the "deleted_at" field.
func (m *AdminMenuMutation) AddDeletedAt(i int) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += i
	} else {
		m.adddeleted_at = &i
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AdminMenuMutation) AddedDeletedAt() (r int, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminMenuMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	m.clearedFields[adminmenu.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminMenuMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[adminmenu.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminMenuMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	delete(m.clearedFields, adminmenu.FieldDeletedAt)
}

// Where appends a list predicates to the AdminMenuMutation builder.
func (m *AdminMenuMutation) Where(ps ...predicate.AdminMenu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminMenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminMenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminMenu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminMenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminMenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminMenu).
func (m *AdminMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminMenuMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, adminmenu.FieldName)
	}
	if m.icon != nil {
		fields = append(fields, adminmenu.FieldIcon)
	}
	if m._path != nil {
		fields = append(fields, adminmenu.FieldPath)
	}
	if m._order != nil {
		fields = append(fields, adminmenu.FieldOrder)
	}
	if m.created_at != nil {
		fields = append(fields, adminmenu.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, adminmenu.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, adminmenu.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminmenu.FieldName:
		return m.Name()
	case adminmenu.FieldIcon:
		return m.Icon()
	case adminmenu.FieldPath:
		return m.Path()
	case adminmenu.FieldOrder:
		return m.Order()
	case adminmenu.FieldCreatedAt:
		return m.CreatedAt()
	case adminmenu.FieldUpdatedAt:
		return m.UpdatedAt()
	case adminmenu.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminmenu.FieldName:
		return m.OldName(ctx)
	case adminmenu.FieldIcon:
		return m.OldIcon(ctx)
	case adminmenu.FieldPath:
		return m.OldPath(ctx)
	case adminmenu.FieldOrder:
		return m.OldOrder(ctx)
	case adminmenu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminmenu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case adminmenu.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AdminMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminmenu.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case adminmenu.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case adminmenu.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case adminmenu.FieldOrder:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case adminmenu.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminmenu.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case adminmenu.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminMenuMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, adminmenu.FieldOrder)
	}
	if m.addcreated_at != nil {
		fields = append(fields, adminmenu.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, adminmenu.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, adminmenu.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminMenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminmenu.FieldOrder:
		return m.AddedOrder()
	case adminmenu.FieldCreatedAt:
		return m.AddedCreatedAt()
	case adminmenu.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case adminmenu.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminmenu.FieldOrder:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	case adminmenu.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case adminmenu.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case adminmenu.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminMenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminmenu.FieldIcon) {
		fields = append(fields, adminmenu.FieldIcon)
	}
	if m.FieldCleared(adminmenu.FieldDeletedAt) {
		fields = append(fields, adminmenu.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminMenuMutation) ClearField(name string) error {
	switch name {
	case adminmenu.FieldIcon:
		m.ClearIcon()
		return nil
	case adminmenu.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminMenuMutation) ResetField(name string) error {
	switch name {
	case adminmenu.FieldName:
		m.ResetName()
		return nil
	case adminmenu.FieldIcon:
		m.ResetIcon()
		return nil
	case adminmenu.FieldPath:
		m.ResetPath()
		return nil
	case adminmenu.FieldOrder:
		m.ResetOrder()
		return nil
	case adminmenu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminmenu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case adminmenu.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminMenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminMenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminMenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminMenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AdminMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminMenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AdminMenu edge %s", name)
}

// AdminPermissionMutation represents an operation that mutates the AdminPermission nodes in the graph.
type AdminPermissionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	description   *string
	_path         *string
	method        *string
	created_at    *int
	addcreated_at *int
	updated_at    *int
	addupdated_at *int
	deleted_at    *int
	adddeleted_at *int
	clearedFields map[string]struct{}
	roles         map[int]struct{}
	removedroles  map[int]struct{}
	clearedroles  bool
	done          bool
	oldValue      func(context.Context) (*AdminPermission, error)
	predicates    []predicate.AdminPermission
}

var _ ent.Mutation = (*AdminPermissionMutation)(nil)

// adminpermissionOption allows management of the mutation configuration using functional options.
type adminpermissionOption func(*AdminPermissionMutation)

// newAdminPermissionMutation creates new mutation for the AdminPermission entity.
func newAdminPermissionMutation(c config, op Op, opts ...adminpermissionOption) *AdminPermissionMutation {
	m := &AdminPermissionMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminPermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminPermissionID sets the ID field of the mutation.
func withAdminPermissionID(id uuid.UUID) adminpermissionOption {
	return func(m *AdminPermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminPermission
		)
		m.oldValue = func(ctx context.Context) (*AdminPermission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminPermission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminPermission sets the old AdminPermission of the mutation.
func withAdminPermission(node *AdminPermission) adminpermissionOption {
	return func(m *AdminPermissionMutation) {
		m.oldValue = func(context.Context) (*AdminPermission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminPermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminPermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AdminPermission entities.
func (m *AdminPermissionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminPermissionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminPermissionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminPermission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AdminPermissionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AdminPermissionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AdminPermission entity.
// If the AdminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminPermissionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AdminPermissionMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *AdminPermissionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AdminPermissionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the AdminPermission entity.
// If the AdminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminPermissionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *AdminPermissionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[adminpermission.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *AdminPermissionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[adminpermission.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *AdminPermissionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, adminpermission.FieldDescription)
}

// SetPath sets the "path" field.
func (m *AdminPermissionMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *AdminPermissionMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the AdminPermission entity.
// If the AdminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminPermissionMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *AdminPermissionMutation) ResetPath() {
	m._path = nil
}

// SetMethod sets the "method" field.
func (m *AdminPermissionMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *AdminPermissionMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the AdminPermission entity.
// If the AdminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminPermissionMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *AdminPermissionMutation) ResetMethod() {
	m.method = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminPermissionMutation) SetCreatedAt(i int) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminPermissionMutation) CreatedAt() (r int, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminPermission entity.
// If the AdminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminPermissionMutation) OldCreatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *AdminPermissionMutation) AddCreatedAt(i int) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AdminPermissionMutation) AddedCreatedAt() (r int, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminPermissionMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminPermissionMutation) SetUpdatedAt(i int) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminPermissionMutation) UpdatedAt() (r int, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminPermission entity.
// If the AdminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminPermissionMutation) OldUpdatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *AdminPermissionMutation) AddUpdatedAt(i int) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AdminPermissionMutation) AddedUpdatedAt() (r int, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminPermissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminPermissionMutation) SetDeletedAt(i int) {
	m.deleted_at = &i
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminPermissionMutation) DeletedAt() (r int, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminPermission entity.
// If the AdminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminPermissionMutation) OldDeletedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds i to the "deleted_at" field.
func (m *AdminPermissionMutation) AddDeletedAt(i int) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += i
	} else {
		m.adddeleted_at = &i
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AdminPermissionMutation) AddedDeletedAt() (r int, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminPermissionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	m.clearedFields[adminpermission.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminPermissionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[adminpermission.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminPermissionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	delete(m.clearedFields, adminpermission.FieldDeletedAt)
}

// AddRoleIDs adds the "roles" edge to the AdminRolePermission entity by ids.
func (m *AdminPermissionMutation) AddRoleIDs(ids ...int) {
	if m.roles == nil {
		m.roles = make(map[int]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the AdminRolePermission entity.
func (m *AdminPermissionMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the AdminRolePermission entity was cleared.
func (m *AdminPermissionMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the AdminRolePermission entity by IDs.
func (m *AdminPermissionMutation) RemoveRoleIDs(ids ...int) {
	if m.removedroles == nil {
		m.removedroles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the AdminRolePermission entity.
func (m *AdminPermissionMutation) RemovedRolesIDs() (ids []int) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *AdminPermissionMutation) RolesIDs() (ids []int) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *AdminPermissionMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the AdminPermissionMutation builder.
func (m *AdminPermissionMutation) Where(ps ...predicate.AdminPermission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminPermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminPermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminPermission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminPermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminPermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminPermission).
func (m *AdminPermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminPermissionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, adminpermission.FieldName)
	}
	if m.description != nil {
		fields = append(fields, adminpermission.FieldDescription)
	}
	if m._path != nil {
		fields = append(fields, adminpermission.FieldPath)
	}
	if m.method != nil {
		fields = append(fields, adminpermission.FieldMethod)
	}
	if m.created_at != nil {
		fields = append(fields, adminpermission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, adminpermission.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, adminpermission.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminPermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminpermission.FieldName:
		return m.Name()
	case adminpermission.FieldDescription:
		return m.Description()
	case adminpermission.FieldPath:
		return m.Path()
	case adminpermission.FieldMethod:
		return m.Method()
	case adminpermission.FieldCreatedAt:
		return m.CreatedAt()
	case adminpermission.FieldUpdatedAt:
		return m.UpdatedAt()
	case adminpermission.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminPermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminpermission.FieldName:
		return m.OldName(ctx)
	case adminpermission.FieldDescription:
		return m.OldDescription(ctx)
	case adminpermission.FieldPath:
		return m.OldPath(ctx)
	case adminpermission.FieldMethod:
		return m.OldMethod(ctx)
	case adminpermission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminpermission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case adminpermission.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AdminPermission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminPermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminpermission.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case adminpermission.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case adminpermission.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case adminpermission.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case adminpermission.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminpermission.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case adminpermission.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminPermission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminPermissionMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, adminpermission.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, adminpermission.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, adminpermission.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminPermissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminpermission.FieldCreatedAt:
		return m.AddedCreatedAt()
	case adminpermission.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case adminpermission.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminPermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminpermission.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case adminpermission.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case adminpermission.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminPermission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminPermissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminpermission.FieldDescription) {
		fields = append(fields, adminpermission.FieldDescription)
	}
	if m.FieldCleared(adminpermission.FieldDeletedAt) {
		fields = append(fields, adminpermission.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminPermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminPermissionMutation) ClearField(name string) error {
	switch name {
	case adminpermission.FieldDescription:
		m.ClearDescription()
		return nil
	case adminpermission.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminPermission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminPermissionMutation) ResetField(name string) error {
	switch name {
	case adminpermission.FieldName:
		m.ResetName()
		return nil
	case adminpermission.FieldDescription:
		m.ResetDescription()
		return nil
	case adminpermission.FieldPath:
		m.ResetPath()
		return nil
	case adminpermission.FieldMethod:
		m.ResetMethod()
		return nil
	case adminpermission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminpermission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case adminpermission.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminPermission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminPermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.roles != nil {
		edges = append(edges, adminpermission.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminPermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminpermission.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminPermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroles != nil {
		edges = append(edges, adminpermission.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminPermissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adminpermission.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminPermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedroles {
		edges = append(edges, adminpermission.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminPermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case adminpermission.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminPermissionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminPermission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminPermissionMutation) ResetEdge(name string) error {
	switch name {
	case adminpermission.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown AdminPermission edge %s", name)
}

// AdminRolePermissionMutation represents an operation that mutates the AdminRolePermission nodes in the graph.
type AdminRolePermissionMutation struct {
	config
	op                Op
	typ               string
	id                *int
	clearedFields     map[string]struct{}
	role              *uuid.UUID
	clearedrole       bool
	permission        *uuid.UUID
	clearedpermission bool
	done              bool
	oldValue          func(context.Context) (*AdminRolePermission, error)
	predicates        []predicate.AdminRolePermission
}

var _ ent.Mutation = (*AdminRolePermissionMutation)(nil)

// adminrolepermissionOption allows management of the mutation configuration using functional options.
type adminrolepermissionOption func(*AdminRolePermissionMutation)

// newAdminRolePermissionMutation creates new mutation for the AdminRolePermission entity.
func newAdminRolePermissionMutation(c config, op Op, opts ...adminrolepermissionOption) *AdminRolePermissionMutation {
	m := &AdminRolePermissionMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminRolePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminRolePermissionID sets the ID field of the mutation.
func withAdminRolePermissionID(id int) adminrolepermissionOption {
	return func(m *AdminRolePermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminRolePermission
		)
		m.oldValue = func(ctx context.Context) (*AdminRolePermission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminRolePermission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminRolePermission sets the old AdminRolePermission of the mutation.
func withAdminRolePermission(node *AdminRolePermission) adminrolepermissionOption {
	return func(m *AdminRolePermissionMutation) {
		m.oldValue = func(context.Context) (*AdminRolePermission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminRolePermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminRolePermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminRolePermissionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminRolePermissionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminRolePermission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRoleID sets the "role" edge to the AdminRoles entity by id.
func (m *AdminRolePermissionMutation) SetRoleID(id uuid.UUID) {
	m.role = &id
}

// ClearRole clears the "role" edge to the AdminRoles entity.
func (m *AdminRolePermissionMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared reports if the "role" edge to the AdminRoles entity was cleared.
func (m *AdminRolePermissionMutation) RoleCleared() bool {
	return m.clearedrole
}

// RoleID returns the "role" edge ID in the mutation.
func (m *AdminRolePermissionMutation) RoleID() (id uuid.UUID, exists bool) {
	if m.role != nil {
		return *m.role, true
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoleID instead. It exists only for internal usage by the builders.
func (m *AdminRolePermissionMutation) RoleIDs() (ids []uuid.UUID) {
	if id := m.role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *AdminRolePermissionMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
}

// SetPermissionID sets the "permission" edge to the AdminPermission entity by id.
func (m *AdminRolePermissionMutation) SetPermissionID(id uuid.UUID) {
	m.permission = &id
}

// ClearPermission clears the "permission" edge to the AdminPermission entity.
func (m *AdminRolePermissionMutation) ClearPermission() {
	m.clearedpermission = true
}

// PermissionCleared reports if the "permission" edge to the AdminPermission entity was cleared.
func (m *AdminRolePermissionMutation) PermissionCleared() bool {
	return m.clearedpermission
}

// PermissionID returns the "permission" edge ID in the mutation.
func (m *AdminRolePermissionMutation) PermissionID() (id uuid.UUID, exists bool) {
	if m.permission != nil {
		return *m.permission, true
	}
	return
}

// PermissionIDs returns the "permission" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PermissionID instead. It exists only for internal usage by the builders.
func (m *AdminRolePermissionMutation) PermissionIDs() (ids []uuid.UUID) {
	if id := m.permission; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPermission resets all changes to the "permission" edge.
func (m *AdminRolePermissionMutation) ResetPermission() {
	m.permission = nil
	m.clearedpermission = false
}

// Where appends a list predicates to the AdminRolePermissionMutation builder.
func (m *AdminRolePermissionMutation) Where(ps ...predicate.AdminRolePermission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminRolePermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminRolePermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminRolePermission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminRolePermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminRolePermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminRolePermission).
func (m *AdminRolePermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminRolePermissionMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminRolePermissionMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminRolePermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown AdminRolePermission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminRolePermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminRolePermission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminRolePermissionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminRolePermissionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminRolePermissionMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown AdminRolePermission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminRolePermissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminRolePermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminRolePermissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AdminRolePermission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminRolePermissionMutation) ResetField(name string) error {
	return fmt.Errorf("unknown AdminRolePermission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminRolePermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.role != nil {
		edges = append(edges, adminrolepermission.EdgeRole)
	}
	if m.permission != nil {
		edges = append(edges, adminrolepermission.EdgePermission)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminRolePermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminrolepermission.EdgeRole:
		if id := m.role; id != nil {
			return []ent.Value{*id}
		}
	case adminrolepermission.EdgePermission:
		if id := m.permission; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminRolePermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminRolePermissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminRolePermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrole {
		edges = append(edges, adminrolepermission.EdgeRole)
	}
	if m.clearedpermission {
		edges = append(edges, adminrolepermission.EdgePermission)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminRolePermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case adminrolepermission.EdgeRole:
		return m.clearedrole
	case adminrolepermission.EdgePermission:
		return m.clearedpermission
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminRolePermissionMutation) ClearEdge(name string) error {
	switch name {
	case adminrolepermission.EdgeRole:
		m.ClearRole()
		return nil
	case adminrolepermission.EdgePermission:
		m.ClearPermission()
		return nil
	}
	return fmt.Errorf("unknown AdminRolePermission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminRolePermissionMutation) ResetEdge(name string) error {
	switch name {
	case adminrolepermission.EdgeRole:
		m.ResetRole()
		return nil
	case adminrolepermission.EdgePermission:
		m.ResetPermission()
		return nil
	}
	return fmt.Errorf("unknown AdminRolePermission edge %s", name)
}

// AdminRolesMutation represents an operation that mutates the AdminRoles nodes in the graph.
type AdminRolesMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	name               *string
	description        *string
	created_at         *int
	addcreated_at      *int
	updated_at         *int
	addupdated_at      *int
	deleted_at         *int
	adddeleted_at      *int
	clearedFields      map[string]struct{}
	permissions        map[int]struct{}
	removedpermissions map[int]struct{}
	clearedpermissions bool
	users              map[int]struct{}
	removedusers       map[int]struct{}
	clearedusers       bool
	done               bool
	oldValue           func(context.Context) (*AdminRoles, error)
	predicates         []predicate.AdminRoles
}

var _ ent.Mutation = (*AdminRolesMutation)(nil)

// adminrolesOption allows management of the mutation configuration using functional options.
type adminrolesOption func(*AdminRolesMutation)

// newAdminRolesMutation creates new mutation for the AdminRoles entity.
func newAdminRolesMutation(c config, op Op, opts ...adminrolesOption) *AdminRolesMutation {
	m := &AdminRolesMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminRoles,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminRolesID sets the ID field of the mutation.
func withAdminRolesID(id uuid.UUID) adminrolesOption {
	return func(m *AdminRolesMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminRoles
		)
		m.oldValue = func(ctx context.Context) (*AdminRoles, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminRoles.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminRoles sets the old AdminRoles of the mutation.
func withAdminRoles(node *AdminRoles) adminrolesOption {
	return func(m *AdminRolesMutation) {
		m.oldValue = func(context.Context) (*AdminRoles, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminRolesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminRolesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AdminRoles entities.
func (m *AdminRolesMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminRolesMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminRolesMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminRoles.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AdminRolesMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AdminRolesMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AdminRoles entity.
// If the AdminRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRolesMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AdminRolesMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *AdminRolesMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AdminRolesMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the AdminRoles entity.
// If the AdminRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRolesMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *AdminRolesMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[adminroles.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *AdminRolesMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[adminroles.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *AdminRolesMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, adminroles.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminRolesMutation) SetCreatedAt(i int) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminRolesMutation) CreatedAt() (r int, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminRoles entity.
// If the AdminRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRolesMutation) OldCreatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *AdminRolesMutation) AddCreatedAt(i int) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AdminRolesMutation) AddedCreatedAt() (r int, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminRolesMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminRolesMutation) SetUpdatedAt(i int) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminRolesMutation) UpdatedAt() (r int, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminRoles entity.
// If the AdminRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRolesMutation) OldUpdatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *AdminRolesMutation) AddUpdatedAt(i int) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AdminRolesMutation) AddedUpdatedAt() (r int, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminRolesMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminRolesMutation) SetDeletedAt(i int) {
	m.deleted_at = &i
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminRolesMutation) DeletedAt() (r int, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminRoles entity.
// If the AdminRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminRolesMutation) OldDeletedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds i to the "deleted_at" field.
func (m *AdminRolesMutation) AddDeletedAt(i int) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += i
	} else {
		m.adddeleted_at = &i
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AdminRolesMutation) AddedDeletedAt() (r int, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminRolesMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	m.clearedFields[adminroles.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminRolesMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[adminroles.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminRolesMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	delete(m.clearedFields, adminroles.FieldDeletedAt)
}

// AddPermissionIDs adds the "permissions" edge to the AdminRolePermission entity by ids.
func (m *AdminRolesMutation) AddPermissionIDs(ids ...int) {
	if m.permissions == nil {
		m.permissions = make(map[int]struct{})
	}
	for i := range ids {
		m.permissions[ids[i]] = struct{}{}
	}
}

// ClearPermissions clears the "permissions" edge to the AdminRolePermission entity.
func (m *AdminRolesMutation) ClearPermissions() {
	m.clearedpermissions = true
}

// PermissionsCleared reports if the "permissions" edge to the AdminRolePermission entity was cleared.
func (m *AdminRolesMutation) PermissionsCleared() bool {
	return m.clearedpermissions
}

// RemovePermissionIDs removes the "permissions" edge to the AdminRolePermission entity by IDs.
func (m *AdminRolesMutation) RemovePermissionIDs(ids ...int) {
	if m.removedpermissions == nil {
		m.removedpermissions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.permissions, ids[i])
		m.removedpermissions[ids[i]] = struct{}{}
	}
}

// RemovedPermissions returns the removed IDs of the "permissions" edge to the AdminRolePermission entity.
func (m *AdminRolesMutation) RemovedPermissionsIDs() (ids []int) {
	for id := range m.removedpermissions {
		ids = append(ids, id)
	}
	return
}

// PermissionsIDs returns the "permissions" edge IDs in the mutation.
func (m *AdminRolesMutation) PermissionsIDs() (ids []int) {
	for id := range m.permissions {
		ids = append(ids, id)
	}
	return
}

// ResetPermissions resets all changes to the "permissions" edge.
func (m *AdminRolesMutation) ResetPermissions() {
	m.permissions = nil
	m.clearedpermissions = false
	m.removedpermissions = nil
}

// AddUserIDs adds the "users" edge to the AdminUserRole entity by ids.
func (m *AdminRolesMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the AdminUserRole entity.
func (m *AdminRolesMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the AdminUserRole entity was cleared.
func (m *AdminRolesMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the AdminUserRole entity by IDs.
func (m *AdminRolesMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the AdminUserRole entity.
func (m *AdminRolesMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *AdminRolesMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *AdminRolesMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the AdminRolesMutation builder.
func (m *AdminRolesMutation) Where(ps ...predicate.AdminRoles) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminRolesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminRolesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminRoles, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminRolesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminRolesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminRoles).
func (m *AdminRolesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminRolesMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, adminroles.FieldName)
	}
	if m.description != nil {
		fields = append(fields, adminroles.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, adminroles.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, adminroles.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, adminroles.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminRolesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminroles.FieldName:
		return m.Name()
	case adminroles.FieldDescription:
		return m.Description()
	case adminroles.FieldCreatedAt:
		return m.CreatedAt()
	case adminroles.FieldUpdatedAt:
		return m.UpdatedAt()
	case adminroles.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminRolesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminroles.FieldName:
		return m.OldName(ctx)
	case adminroles.FieldDescription:
		return m.OldDescription(ctx)
	case adminroles.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminroles.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case adminroles.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AdminRoles field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminRolesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminroles.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case adminroles.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case adminroles.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminroles.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case adminroles.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminRoles field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminRolesMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, adminroles.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, adminroles.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, adminroles.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminRolesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminroles.FieldCreatedAt:
		return m.AddedCreatedAt()
	case adminroles.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case adminroles.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminRolesMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminroles.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case adminroles.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case adminroles.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminRoles numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminRolesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminroles.FieldDescription) {
		fields = append(fields, adminroles.FieldDescription)
	}
	if m.FieldCleared(adminroles.FieldDeletedAt) {
		fields = append(fields, adminroles.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminRolesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminRolesMutation) ClearField(name string) error {
	switch name {
	case adminroles.FieldDescription:
		m.ClearDescription()
		return nil
	case adminroles.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminRoles nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminRolesMutation) ResetField(name string) error {
	switch name {
	case adminroles.FieldName:
		m.ResetName()
		return nil
	case adminroles.FieldDescription:
		m.ResetDescription()
		return nil
	case adminroles.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminroles.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case adminroles.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminRoles field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminRolesMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.permissions != nil {
		edges = append(edges, adminroles.EdgePermissions)
	}
	if m.users != nil {
		edges = append(edges, adminroles.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminRolesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminroles.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.permissions))
		for id := range m.permissions {
			ids = append(ids, id)
		}
		return ids
	case adminroles.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminRolesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpermissions != nil {
		edges = append(edges, adminroles.EdgePermissions)
	}
	if m.removedusers != nil {
		edges = append(edges, adminroles.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminRolesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adminroles.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.removedpermissions))
		for id := range m.removedpermissions {
			ids = append(ids, id)
		}
		return ids
	case adminroles.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminRolesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpermissions {
		edges = append(edges, adminroles.EdgePermissions)
	}
	if m.clearedusers {
		edges = append(edges, adminroles.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminRolesMutation) EdgeCleared(name string) bool {
	switch name {
	case adminroles.EdgePermissions:
		return m.clearedpermissions
	case adminroles.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminRolesMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminRoles unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminRolesMutation) ResetEdge(name string) error {
	switch name {
	case adminroles.EdgePermissions:
		m.ResetPermissions()
		return nil
	case adminroles.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown AdminRoles edge %s", name)
}

// AdminUserMutation represents an operation that mutates the AdminUser nodes in the graph.
type AdminUserMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	username         *string
	email            *string
	password_hash    *string
	is_active        *bool
	last_login_at    *int
	addlast_login_at *int
	jwt_issued_at    *int
	addjwt_issued_at *int
	created_at       *int
	addcreated_at    *int
	updated_at       *int
	addupdated_at    *int
	deleted_at       *int
	adddeleted_at    *int
	clearedFields    map[string]struct{}
	roles            map[int]struct{}
	removedroles     map[int]struct{}
	clearedroles     bool
	logs             map[uuid.UUID]struct{}
	removedlogs      map[uuid.UUID]struct{}
	clearedlogs      bool
	done             bool
	oldValue         func(context.Context) (*AdminUser, error)
	predicates       []predicate.AdminUser
}

var _ ent.Mutation = (*AdminUserMutation)(nil)

// adminuserOption allows management of the mutation configuration using functional options.
type adminuserOption func(*AdminUserMutation)

// newAdminUserMutation creates new mutation for the AdminUser entity.
func newAdminUserMutation(c config, op Op, opts ...adminuserOption) *AdminUserMutation {
	m := &AdminUserMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminUserID sets the ID field of the mutation.
func withAdminUserID(id uuid.UUID) adminuserOption {
	return func(m *AdminUserMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminUser
		)
		m.oldValue = func(ctx context.Context) (*AdminUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminUser sets the old AdminUser of the mutation.
func withAdminUser(node *AdminUser) adminuserOption {
	return func(m *AdminUserMutation) {
		m.oldValue = func(context.Context) (*AdminUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AdminUser entities.
func (m *AdminUserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminUserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminUserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *AdminUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *AdminUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *AdminUserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *AdminUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *AdminUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *AdminUserMutation) ResetEmail() {
	m.email = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *AdminUserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *AdminUserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *AdminUserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetIsActive sets the "is_active" field.
func (m *AdminUserMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *AdminUserMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *AdminUserMutation) ResetIsActive() {
	m.is_active = nil
}

// SetLastLoginAt sets the "last_login_at" field.
func (m *AdminUserMutation) SetLastLoginAt(i int) {
	m.last_login_at = &i
	m.addlast_login_at = nil
}

// LastLoginAt returns the value of the "last_login_at" field in the mutation.
func (m *AdminUserMutation) LastLoginAt() (r int, exists bool) {
	v := m.last_login_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginAt returns the old "last_login_at" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldLastLoginAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginAt: %w", err)
	}
	return oldValue.LastLoginAt, nil
}

// AddLastLoginAt adds i to the "last_login_at" field.
func (m *AdminUserMutation) AddLastLoginAt(i int) {
	if m.addlast_login_at != nil {
		*m.addlast_login_at += i
	} else {
		m.addlast_login_at = &i
	}
}

// AddedLastLoginAt returns the value that was added to the "last_login_at" field in this mutation.
func (m *AdminUserMutation) AddedLastLoginAt() (r int, exists bool) {
	v := m.addlast_login_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (m *AdminUserMutation) ClearLastLoginAt() {
	m.last_login_at = nil
	m.addlast_login_at = nil
	m.clearedFields[adminuser.FieldLastLoginAt] = struct{}{}
}

// LastLoginAtCleared returns if the "last_login_at" field was cleared in this mutation.
func (m *AdminUserMutation) LastLoginAtCleared() bool {
	_, ok := m.clearedFields[adminuser.FieldLastLoginAt]
	return ok
}

// ResetLastLoginAt resets all changes to the "last_login_at" field.
func (m *AdminUserMutation) ResetLastLoginAt() {
	m.last_login_at = nil
	m.addlast_login_at = nil
	delete(m.clearedFields, adminuser.FieldLastLoginAt)
}

// SetJwtIssuedAt sets the "jwt_issued_at" field.
func (m *AdminUserMutation) SetJwtIssuedAt(i int) {
	m.jwt_issued_at = &i
	m.addjwt_issued_at = nil
}

// JwtIssuedAt returns the value of the "jwt_issued_at" field in the mutation.
func (m *AdminUserMutation) JwtIssuedAt() (r int, exists bool) {
	v := m.jwt_issued_at
	if v == nil {
		return
	}
	return *v, true
}

// OldJwtIssuedAt returns the old "jwt_issued_at" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldJwtIssuedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJwtIssuedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJwtIssuedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJwtIssuedAt: %w", err)
	}
	return oldValue.JwtIssuedAt, nil
}

// AddJwtIssuedAt adds i to the "jwt_issued_at" field.
func (m *AdminUserMutation) AddJwtIssuedAt(i int) {
	if m.addjwt_issued_at != nil {
		*m.addjwt_issued_at += i
	} else {
		m.addjwt_issued_at = &i
	}
}

// AddedJwtIssuedAt returns the value that was added to the "jwt_issued_at" field in this mutation.
func (m *AdminUserMutation) AddedJwtIssuedAt() (r int, exists bool) {
	v := m.addjwt_issued_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearJwtIssuedAt clears the value of the "jwt_issued_at" field.
func (m *AdminUserMutation) ClearJwtIssuedAt() {
	m.jwt_issued_at = nil
	m.addjwt_issued_at = nil
	m.clearedFields[adminuser.FieldJwtIssuedAt] = struct{}{}
}

// JwtIssuedAtCleared returns if the "jwt_issued_at" field was cleared in this mutation.
func (m *AdminUserMutation) JwtIssuedAtCleared() bool {
	_, ok := m.clearedFields[adminuser.FieldJwtIssuedAt]
	return ok
}

// ResetJwtIssuedAt resets all changes to the "jwt_issued_at" field.
func (m *AdminUserMutation) ResetJwtIssuedAt() {
	m.jwt_issued_at = nil
	m.addjwt_issued_at = nil
	delete(m.clearedFields, adminuser.FieldJwtIssuedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminUserMutation) SetCreatedAt(i int) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminUserMutation) CreatedAt() (r int, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldCreatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *AdminUserMutation) AddCreatedAt(i int) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AdminUserMutation) AddedCreatedAt() (r int, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminUserMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminUserMutation) SetUpdatedAt(i int) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminUserMutation) UpdatedAt() (r int, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldUpdatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *AdminUserMutation) AddUpdatedAt(i int) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AdminUserMutation) AddedUpdatedAt() (r int, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminUserMutation) SetDeletedAt(i int) {
	m.deleted_at = &i
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminUserMutation) DeletedAt() (r int, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the AdminUser entity.
// If the AdminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminUserMutation) OldDeletedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds i to the "deleted_at" field.
func (m *AdminUserMutation) AddDeletedAt(i int) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += i
	} else {
		m.adddeleted_at = &i
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AdminUserMutation) AddedDeletedAt() (r int, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AdminUserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	m.clearedFields[adminuser.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AdminUserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[adminuser.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminUserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	delete(m.clearedFields, adminuser.FieldDeletedAt)
}

// AddRoleIDs adds the "roles" edge to the AdminUserRole entity by ids.
func (m *AdminUserMutation) AddRoleIDs(ids ...int) {
	if m.roles == nil {
		m.roles = make(map[int]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the AdminUserRole entity.
func (m *AdminUserMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the AdminUserRole entity was cleared.
func (m *AdminUserMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the AdminUserRole entity by IDs.
func (m *AdminUserMutation) RemoveRoleIDs(ids ...int) {
	if m.removedroles == nil {
		m.removedroles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the AdminUserRole entity.
func (m *AdminUserMutation) RemovedRolesIDs() (ids []int) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *AdminUserMutation) RolesIDs() (ids []int) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *AdminUserMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// AddLogIDs adds the "logs" edge to the AdminLog entity by ids.
func (m *AdminUserMutation) AddLogIDs(ids ...uuid.UUID) {
	if m.logs == nil {
		m.logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.logs[ids[i]] = struct{}{}
	}
}

// ClearLogs clears the "logs" edge to the AdminLog entity.
func (m *AdminUserMutation) ClearLogs() {
	m.clearedlogs = true
}

// LogsCleared reports if the "logs" edge to the AdminLog entity was cleared.
func (m *AdminUserMutation) LogsCleared() bool {
	return m.clearedlogs
}

// RemoveLogIDs removes the "logs" edge to the AdminLog entity by IDs.
func (m *AdminUserMutation) RemoveLogIDs(ids ...uuid.UUID) {
	if m.removedlogs == nil {
		m.removedlogs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.logs, ids[i])
		m.removedlogs[ids[i]] = struct{}{}
	}
}

// RemovedLogs returns the removed IDs of the "logs" edge to the AdminLog entity.
func (m *AdminUserMutation) RemovedLogsIDs() (ids []uuid.UUID) {
	for id := range m.removedlogs {
		ids = append(ids, id)
	}
	return
}

// LogsIDs returns the "logs" edge IDs in the mutation.
func (m *AdminUserMutation) LogsIDs() (ids []uuid.UUID) {
	for id := range m.logs {
		ids = append(ids, id)
	}
	return
}

// ResetLogs resets all changes to the "logs" edge.
func (m *AdminUserMutation) ResetLogs() {
	m.logs = nil
	m.clearedlogs = false
	m.removedlogs = nil
}

// Where appends a list predicates to the AdminUserMutation builder.
func (m *AdminUserMutation) Where(ps ...predicate.AdminUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminUser).
func (m *AdminUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminUserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.username != nil {
		fields = append(fields, adminuser.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, adminuser.FieldEmail)
	}
	if m.password_hash != nil {
		fields = append(fields, adminuser.FieldPasswordHash)
	}
	if m.is_active != nil {
		fields = append(fields, adminuser.FieldIsActive)
	}
	if m.last_login_at != nil {
		fields = append(fields, adminuser.FieldLastLoginAt)
	}
	if m.jwt_issued_at != nil {
		fields = append(fields, adminuser.FieldJwtIssuedAt)
	}
	if m.created_at != nil {
		fields = append(fields, adminuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, adminuser.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, adminuser.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminuser.FieldUsername:
		return m.Username()
	case adminuser.FieldEmail:
		return m.Email()
	case adminuser.FieldPasswordHash:
		return m.PasswordHash()
	case adminuser.FieldIsActive:
		return m.IsActive()
	case adminuser.FieldLastLoginAt:
		return m.LastLoginAt()
	case adminuser.FieldJwtIssuedAt:
		return m.JwtIssuedAt()
	case adminuser.FieldCreatedAt:
		return m.CreatedAt()
	case adminuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case adminuser.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminuser.FieldUsername:
		return m.OldUsername(ctx)
	case adminuser.FieldEmail:
		return m.OldEmail(ctx)
	case adminuser.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case adminuser.FieldIsActive:
		return m.OldIsActive(ctx)
	case adminuser.FieldLastLoginAt:
		return m.OldLastLoginAt(ctx)
	case adminuser.FieldJwtIssuedAt:
		return m.OldJwtIssuedAt(ctx)
	case adminuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case adminuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case adminuser.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AdminUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminuser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case adminuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case adminuser.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case adminuser.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case adminuser.FieldLastLoginAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginAt(v)
		return nil
	case adminuser.FieldJwtIssuedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJwtIssuedAt(v)
		return nil
	case adminuser.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case adminuser.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case adminuser.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminUserMutation) AddedFields() []string {
	var fields []string
	if m.addlast_login_at != nil {
		fields = append(fields, adminuser.FieldLastLoginAt)
	}
	if m.addjwt_issued_at != nil {
		fields = append(fields, adminuser.FieldJwtIssuedAt)
	}
	if m.addcreated_at != nil {
		fields = append(fields, adminuser.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, adminuser.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, adminuser.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adminuser.FieldLastLoginAt:
		return m.AddedLastLoginAt()
	case adminuser.FieldJwtIssuedAt:
		return m.AddedJwtIssuedAt()
	case adminuser.FieldCreatedAt:
		return m.AddedCreatedAt()
	case adminuser.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case adminuser.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adminuser.FieldLastLoginAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastLoginAt(v)
		return nil
	case adminuser.FieldJwtIssuedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddJwtIssuedAt(v)
		return nil
	case adminuser.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case adminuser.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case adminuser.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AdminUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(adminuser.FieldLastLoginAt) {
		fields = append(fields, adminuser.FieldLastLoginAt)
	}
	if m.FieldCleared(adminuser.FieldJwtIssuedAt) {
		fields = append(fields, adminuser.FieldJwtIssuedAt)
	}
	if m.FieldCleared(adminuser.FieldDeletedAt) {
		fields = append(fields, adminuser.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminUserMutation) ClearField(name string) error {
	switch name {
	case adminuser.FieldLastLoginAt:
		m.ClearLastLoginAt()
		return nil
	case adminuser.FieldJwtIssuedAt:
		m.ClearJwtIssuedAt()
		return nil
	case adminuser.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminUserMutation) ResetField(name string) error {
	switch name {
	case adminuser.FieldUsername:
		m.ResetUsername()
		return nil
	case adminuser.FieldEmail:
		m.ResetEmail()
		return nil
	case adminuser.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case adminuser.FieldIsActive:
		m.ResetIsActive()
		return nil
	case adminuser.FieldLastLoginAt:
		m.ResetLastLoginAt()
		return nil
	case adminuser.FieldJwtIssuedAt:
		m.ResetJwtIssuedAt()
		return nil
	case adminuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case adminuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case adminuser.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown AdminUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.roles != nil {
		edges = append(edges, adminuser.EdgeRoles)
	}
	if m.logs != nil {
		edges = append(edges, adminuser.EdgeLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminuser.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	case adminuser.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.logs))
		for id := range m.logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedroles != nil {
		edges = append(edges, adminuser.EdgeRoles)
	}
	if m.removedlogs != nil {
		edges = append(edges, adminuser.EdgeLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adminuser.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	case adminuser.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.removedlogs))
		for id := range m.removedlogs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedroles {
		edges = append(edges, adminuser.EdgeRoles)
	}
	if m.clearedlogs {
		edges = append(edges, adminuser.EdgeLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminUserMutation) EdgeCleared(name string) bool {
	switch name {
	case adminuser.EdgeRoles:
		return m.clearedroles
	case adminuser.EdgeLogs:
		return m.clearedlogs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminUserMutation) ResetEdge(name string) error {
	switch name {
	case adminuser.EdgeRoles:
		m.ResetRoles()
		return nil
	case adminuser.EdgeLogs:
		m.ResetLogs()
		return nil
	}
	return fmt.Errorf("unknown AdminUser edge %s", name)
}

// AdminUserRoleMutation represents an operation that mutates the AdminUserRole nodes in the graph.
type AdminUserRoleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	role          *uuid.UUID
	clearedrole   bool
	done          bool
	oldValue      func(context.Context) (*AdminUserRole, error)
	predicates    []predicate.AdminUserRole
}

var _ ent.Mutation = (*AdminUserRoleMutation)(nil)

// adminuserroleOption allows management of the mutation configuration using functional options.
type adminuserroleOption func(*AdminUserRoleMutation)

// newAdminUserRoleMutation creates new mutation for the AdminUserRole entity.
func newAdminUserRoleMutation(c config, op Op, opts ...adminuserroleOption) *AdminUserRoleMutation {
	m := &AdminUserRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminUserRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminUserRoleID sets the ID field of the mutation.
func withAdminUserRoleID(id int) adminuserroleOption {
	return func(m *AdminUserRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *AdminUserRole
		)
		m.oldValue = func(ctx context.Context) (*AdminUserRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AdminUserRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminUserRole sets the old AdminUserRole of the mutation.
func withAdminUserRole(node *AdminUserRole) adminuserroleOption {
	return func(m *AdminUserRoleMutation) {
		m.oldValue = func(context.Context) (*AdminUserRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminUserRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminUserRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminUserRoleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminUserRoleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AdminUserRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user" edge to the AdminUser entity by id.
func (m *AdminUserRoleMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the AdminUser entity.
func (m *AdminUserRoleMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the AdminUser entity was cleared.
func (m *AdminUserRoleMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *AdminUserRoleMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *AdminUserRoleMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *AdminUserRoleMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetRoleID sets the "role" edge to the AdminRoles entity by id.
func (m *AdminUserRoleMutation) SetRoleID(id uuid.UUID) {
	m.role = &id
}

// ClearRole clears the "role" edge to the AdminRoles entity.
func (m *AdminUserRoleMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared reports if the "role" edge to the AdminRoles entity was cleared.
func (m *AdminUserRoleMutation) RoleCleared() bool {
	return m.clearedrole
}

// RoleID returns the "role" edge ID in the mutation.
func (m *AdminUserRoleMutation) RoleID() (id uuid.UUID, exists bool) {
	if m.role != nil {
		return *m.role, true
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoleID instead. It exists only for internal usage by the builders.
func (m *AdminUserRoleMutation) RoleIDs() (ids []uuid.UUID) {
	if id := m.role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *AdminUserRoleMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
}

// Where appends a list predicates to the AdminUserRoleMutation builder.
func (m *AdminUserRoleMutation) Where(ps ...predicate.AdminUserRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminUserRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminUserRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AdminUserRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminUserRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminUserRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AdminUserRole).
func (m *AdminUserRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminUserRoleMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminUserRoleMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminUserRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown AdminUserRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminUserRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AdminUserRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminUserRoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminUserRoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminUserRoleMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown AdminUserRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminUserRoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminUserRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminUserRoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AdminUserRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminUserRoleMutation) ResetField(name string) error {
	return fmt.Errorf("unknown AdminUserRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminUserRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, adminuserrole.EdgeUser)
	}
	if m.role != nil {
		edges = append(edges, adminuserrole.EdgeRole)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminUserRoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminuserrole.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case adminuserrole.EdgeRole:
		if id := m.role; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminUserRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminUserRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminUserRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, adminuserrole.EdgeUser)
	}
	if m.clearedrole {
		edges = append(edges, adminuserrole.EdgeRole)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminUserRoleMutation) EdgeCleared(name string) bool {
	switch name {
	case adminuserrole.EdgeUser:
		return m.cleareduser
	case adminuserrole.EdgeRole:
		return m.clearedrole
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminUserRoleMutation) ClearEdge(name string) error {
	switch name {
	case adminuserrole.EdgeUser:
		m.ClearUser()
		return nil
	case adminuserrole.EdgeRole:
		m.ClearRole()
		return nil
	}
	return fmt.Errorf("unknown AdminUserRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminUserRoleMutation) ResetEdge(name string) error {
	switch name {
	case adminuserrole.EdgeUser:
		m.ResetUser()
		return nil
	case adminuserrole.EdgeRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown AdminUserRole edge %s", name)
}

// BloodStatusRecordMutation represents an operation that mutates the BloodStatusRecord nodes in the graph.
type BloodStatusRecordMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	user_id               *uuid.UUID
	record_date           *uint
	addrecord_date        *int
	time_of_day           *bloodstatusrecord.TimeOfDay
	before_after_meals    *bloodstatusrecord.BeforeAfterMeals
	systolic_pressure     *uint8
	addsystolic_pressure  *int8
	diastolic_pressure    *uint8
	adddiastolic_pressure *int8
	pulse                 *uint8
	addpulse              *int8
	mood                  *bloodstatusrecord.Mood
	created_at            *int
	addcreated_at         *int
	updated_at            *int
	addupdated_at         *int
	deleted_at            *int
	adddeleted_at         *int
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*BloodStatusRecord, error)
	predicates            []predicate.BloodStatusRecord
}

var _ ent.Mutation = (*BloodStatusRecordMutation)(nil)

// bloodstatusrecordOption allows management of the mutation configuration using functional options.
type bloodstatusrecordOption func(*BloodStatusRecordMutation)

// newBloodStatusRecordMutation creates new mutation for the BloodStatusRecord entity.
func newBloodStatusRecordMutation(c config, op Op, opts ...bloodstatusrecordOption) *BloodStatusRecordMutation {
	m := &BloodStatusRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeBloodStatusRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBloodStatusRecordID sets the ID field of the mutation.
func withBloodStatusRecordID(id uuid.UUID) bloodstatusrecordOption {
	return func(m *BloodStatusRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *BloodStatusRecord
		)
		m.oldValue = func(ctx context.Context) (*BloodStatusRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BloodStatusRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBloodStatusRecord sets the old BloodStatusRecord of the mutation.
func withBloodStatusRecord(node *BloodStatusRecord) bloodstatusrecordOption {
	return func(m *BloodStatusRecordMutation) {
		m.oldValue = func(context.Context) (*BloodStatusRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BloodStatusRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BloodStatusRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BloodStatusRecord entities.
func (m *BloodStatusRecordMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BloodStatusRecordMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BloodStatusRecordMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BloodStatusRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *BloodStatusRecordMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *BloodStatusRecordMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *BloodStatusRecordMutation) ResetUserID() {
	m.user_id = nil
}

// SetRecordDate sets the "record_date" field.
func (m *BloodStatusRecordMutation) SetRecordDate(u uint) {
	m.record_date = &u
	m.addrecord_date = nil
}

// RecordDate returns the value of the "record_date" field in the mutation.
func (m *BloodStatusRecordMutation) RecordDate() (r uint, exists bool) {
	v := m.record_date
	if v == nil {
		return
	}
	return *v, true
}

// OldRecordDate returns the old "record_date" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldRecordDate(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecordDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecordDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecordDate: %w", err)
	}
	return oldValue.RecordDate, nil
}

// AddRecordDate adds u to the "record_date" field.
func (m *BloodStatusRecordMutation) AddRecordDate(u int) {
	if m.addrecord_date != nil {
		*m.addrecord_date += u
	} else {
		m.addrecord_date = &u
	}
}

// AddedRecordDate returns the value that was added to the "record_date" field in this mutation.
func (m *BloodStatusRecordMutation) AddedRecordDate() (r int, exists bool) {
	v := m.addrecord_date
	if v == nil {
		return
	}
	return *v, true
}

// ResetRecordDate resets all changes to the "record_date" field.
func (m *BloodStatusRecordMutation) ResetRecordDate() {
	m.record_date = nil
	m.addrecord_date = nil
}

// SetTimeOfDay sets the "time_of_day" field.
func (m *BloodStatusRecordMutation) SetTimeOfDay(bod bloodstatusrecord.TimeOfDay) {
	m.time_of_day = &bod
}

// TimeOfDay returns the value of the "time_of_day" field in the mutation.
func (m *BloodStatusRecordMutation) TimeOfDay() (r bloodstatusrecord.TimeOfDay, exists bool) {
	v := m.time_of_day
	if v == nil {
		return
	}
	return *v, true
}

// OldTimeOfDay returns the old "time_of_day" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldTimeOfDay(ctx context.Context) (v bloodstatusrecord.TimeOfDay, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimeOfDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimeOfDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimeOfDay: %w", err)
	}
	return oldValue.TimeOfDay, nil
}

// ResetTimeOfDay resets all changes to the "time_of_day" field.
func (m *BloodStatusRecordMutation) ResetTimeOfDay() {
	m.time_of_day = nil
}

// SetBeforeAfterMeals sets the "before_after_meals" field.
func (m *BloodStatusRecordMutation) SetBeforeAfterMeals(bam bloodstatusrecord.BeforeAfterMeals) {
	m.before_after_meals = &bam
}

// BeforeAfterMeals returns the value of the "before_after_meals" field in the mutation.
func (m *BloodStatusRecordMutation) BeforeAfterMeals() (r bloodstatusrecord.BeforeAfterMeals, exists bool) {
	v := m.before_after_meals
	if v == nil {
		return
	}
	return *v, true
}

// OldBeforeAfterMeals returns the old "before_after_meals" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldBeforeAfterMeals(ctx context.Context) (v bloodstatusrecord.BeforeAfterMeals, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBeforeAfterMeals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBeforeAfterMeals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBeforeAfterMeals: %w", err)
	}
	return oldValue.BeforeAfterMeals, nil
}

// ResetBeforeAfterMeals resets all changes to the "before_after_meals" field.
func (m *BloodStatusRecordMutation) ResetBeforeAfterMeals() {
	m.before_after_meals = nil
}

// SetSystolicPressure sets the "systolic_pressure" field.
func (m *BloodStatusRecordMutation) SetSystolicPressure(u uint8) {
	m.systolic_pressure = &u
	m.addsystolic_pressure = nil
}

// SystolicPressure returns the value of the "systolic_pressure" field in the mutation.
func (m *BloodStatusRecordMutation) SystolicPressure() (r uint8, exists bool) {
	v := m.systolic_pressure
	if v == nil {
		return
	}
	return *v, true
}

// OldSystolicPressure returns the old "systolic_pressure" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldSystolicPressure(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSystolicPressure is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSystolicPressure requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSystolicPressure: %w", err)
	}
	return oldValue.SystolicPressure, nil
}

// AddSystolicPressure adds u to the "systolic_pressure" field.
func (m *BloodStatusRecordMutation) AddSystolicPressure(u int8) {
	if m.addsystolic_pressure != nil {
		*m.addsystolic_pressure += u
	} else {
		m.addsystolic_pressure = &u
	}
}

// AddedSystolicPressure returns the value that was added to the "systolic_pressure" field in this mutation.
func (m *BloodStatusRecordMutation) AddedSystolicPressure() (r int8, exists bool) {
	v := m.addsystolic_pressure
	if v == nil {
		return
	}
	return *v, true
}

// ResetSystolicPressure resets all changes to the "systolic_pressure" field.
func (m *BloodStatusRecordMutation) ResetSystolicPressure() {
	m.systolic_pressure = nil
	m.addsystolic_pressure = nil
}

// SetDiastolicPressure sets the "diastolic_pressure" field.
func (m *BloodStatusRecordMutation) SetDiastolicPressure(u uint8) {
	m.diastolic_pressure = &u
	m.adddiastolic_pressure = nil
}

// DiastolicPressure returns the value of the "diastolic_pressure" field in the mutation.
func (m *BloodStatusRecordMutation) DiastolicPressure() (r uint8, exists bool) {
	v := m.diastolic_pressure
	if v == nil {
		return
	}
	return *v, true
}

// OldDiastolicPressure returns the old "diastolic_pressure" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldDiastolicPressure(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiastolicPressure is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiastolicPressure requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiastolicPressure: %w", err)
	}
	return oldValue.DiastolicPressure, nil
}

// AddDiastolicPressure adds u to the "diastolic_pressure" field.
func (m *BloodStatusRecordMutation) AddDiastolicPressure(u int8) {
	if m.adddiastolic_pressure != nil {
		*m.adddiastolic_pressure += u
	} else {
		m.adddiastolic_pressure = &u
	}
}

// AddedDiastolicPressure returns the value that was added to the "diastolic_pressure" field in this mutation.
func (m *BloodStatusRecordMutation) AddedDiastolicPressure() (r int8, exists bool) {
	v := m.adddiastolic_pressure
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiastolicPressure resets all changes to the "diastolic_pressure" field.
func (m *BloodStatusRecordMutation) ResetDiastolicPressure() {
	m.diastolic_pressure = nil
	m.adddiastolic_pressure = nil
}

// SetPulse sets the "pulse" field.
func (m *BloodStatusRecordMutation) SetPulse(u uint8) {
	m.pulse = &u
	m.addpulse = nil
}

// Pulse returns the value of the "pulse" field in the mutation.
func (m *BloodStatusRecordMutation) Pulse() (r uint8, exists bool) {
	v := m.pulse
	if v == nil {
		return
	}
	return *v, true
}

// OldPulse returns the old "pulse" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldPulse(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPulse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPulse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPulse: %w", err)
	}
	return oldValue.Pulse, nil
}

// AddPulse adds u to the "pulse" field.
func (m *BloodStatusRecordMutation) AddPulse(u int8) {
	if m.addpulse != nil {
		*m.addpulse += u
	} else {
		m.addpulse = &u
	}
}

// AddedPulse returns the value that was added to the "pulse" field in this mutation.
func (m *BloodStatusRecordMutation) AddedPulse() (r int8, exists bool) {
	v := m.addpulse
	if v == nil {
		return
	}
	return *v, true
}

// ResetPulse resets all changes to the "pulse" field.
func (m *BloodStatusRecordMutation) ResetPulse() {
	m.pulse = nil
	m.addpulse = nil
}

// SetMood sets the "mood" field.
func (m *BloodStatusRecordMutation) SetMood(b bloodstatusrecord.Mood) {
	m.mood = &b
}

// Mood returns the value of the "mood" field in the mutation.
func (m *BloodStatusRecordMutation) Mood() (r bloodstatusrecord.Mood, exists bool) {
	v := m.mood
	if v == nil {
		return
	}
	return *v, true
}

// OldMood returns the old "mood" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldMood(ctx context.Context) (v bloodstatusrecord.Mood, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMood is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMood requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMood: %w", err)
	}
	return oldValue.Mood, nil
}

// ResetMood resets all changes to the "mood" field.
func (m *BloodStatusRecordMutation) ResetMood() {
	m.mood = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BloodStatusRecordMutation) SetCreatedAt(i int) {
	m.created_at = &i
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BloodStatusRecordMutation) CreatedAt() (r int, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldCreatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds i to the "created_at" field.
func (m *BloodStatusRecordMutation) AddCreatedAt(i int) {
	if m.addcreated_at != nil {
		*m.addcreated_at += i
	} else {
		m.addcreated_at = &i
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *BloodStatusRecordMutation) AddedCreatedAt() (r int, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BloodStatusRecordMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BloodStatusRecordMutation) SetUpdatedAt(i int) {
	m.updated_at = &i
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BloodStatusRecordMutation) UpdatedAt() (r int, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldUpdatedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds i to the "updated_at" field.
func (m *BloodStatusRecordMutation) AddUpdatedAt(i int) {
	if m.addupdated_at != nil {
		*m.addupdated_at += i
	} else {
		m.addupdated_at = &i
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *BloodStatusRecordMutation) AddedUpdatedAt() (r int, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BloodStatusRecordMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *BloodStatusRecordMutation) SetDeletedAt(i int) {
	m.deleted_at = &i
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *BloodStatusRecordMutation) DeletedAt() (r int, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the BloodStatusRecord entity.
// If the BloodStatusRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BloodStatusRecordMutation) OldDeletedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds i to the "deleted_at" field.
func (m *BloodStatusRecordMutation) AddDeletedAt(i int) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += i
	} else {
		m.adddeleted_at = &i
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *BloodStatusRecordMutation) AddedDeletedAt() (r int, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *BloodStatusRecordMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	m.clearedFields[bloodstatusrecord.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *BloodStatusRecordMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[bloodstatusrecord.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *BloodStatusRecordMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
	delete(m.clearedFields, bloodstatusrecord.FieldDeletedAt)
}

// Where appends a list predicates to the BloodStatusRecordMutation builder.
func (m *BloodStatusRecordMutation) Where(ps ...predicate.BloodStatusRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BloodStatusRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BloodStatusRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BloodStatusRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BloodStatusRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BloodStatusRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BloodStatusRecord).
func (m *BloodStatusRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BloodStatusRecordMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.user_id != nil {
		fields = append(fields, bloodstatusrecord.FieldUserID)
	}
	if m.record_date != nil {
		fields = append(fields, bloodstatusrecord.FieldRecordDate)
	}
	if m.time_of_day != nil {
		fields = append(fields, bloodstatusrecord.FieldTimeOfDay)
	}
	if m.before_after_meals != nil {
		fields = append(fields, bloodstatusrecord.FieldBeforeAfterMeals)
	}
	if m.systolic_pressure != nil {
		fields = append(fields, bloodstatusrecord.FieldSystolicPressure)
	}
	if m.diastolic_pressure != nil {
		fields = append(fields, bloodstatusrecord.FieldDiastolicPressure)
	}
	if m.pulse != nil {
		fields = append(fields, bloodstatusrecord.FieldPulse)
	}
	if m.mood != nil {
		fields = append(fields, bloodstatusrecord.FieldMood)
	}
	if m.created_at != nil {
		fields = append(fields, bloodstatusrecord.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bloodstatusrecord.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, bloodstatusrecord.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BloodStatusRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bloodstatusrecord.FieldUserID:
		return m.UserID()
	case bloodstatusrecord.FieldRecordDate:
		return m.RecordDate()
	case bloodstatusrecord.FieldTimeOfDay:
		return m.TimeOfDay()
	case bloodstatusrecord.FieldBeforeAfterMeals:
		return m.BeforeAfterMeals()
	case bloodstatusrecord.FieldSystolicPressure:
		return m.SystolicPressure()
	case bloodstatusrecord.FieldDiastolicPressure:
		return m.DiastolicPressure()
	case bloodstatusrecord.FieldPulse:
		return m.Pulse()
	case bloodstatusrecord.FieldMood:
		return m.Mood()
	case bloodstatusrecord.FieldCreatedAt:
		return m.CreatedAt()
	case bloodstatusrecord.FieldUpdatedAt:
		return m.UpdatedAt()
	case bloodstatusrecord.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BloodStatusRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bloodstatusrecord.FieldUserID:
		return m.OldUserID(ctx)
	case bloodstatusrecord.FieldRecordDate:
		return m.OldRecordDate(ctx)
	case bloodstatusrecord.FieldTimeOfDay:
		return m.OldTimeOfDay(ctx)
	case bloodstatusrecord.FieldBeforeAfterMeals:
		return m.OldBeforeAfterMeals(ctx)
	case bloodstatusrecord.FieldSystolicPressure:
		return m.OldSystolicPressure(ctx)
	case bloodstatusrecord.FieldDiastolicPressure:
		return m.OldDiastolicPressure(ctx)
	case bloodstatusrecord.FieldPulse:
		return m.OldPulse(ctx)
	case bloodstatusrecord.FieldMood:
		return m.OldMood(ctx)
	case bloodstatusrecord.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bloodstatusrecord.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case bloodstatusrecord.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown BloodStatusRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BloodStatusRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bloodstatusrecord.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case bloodstatusrecord.FieldRecordDate:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecordDate(v)
		return nil
	case bloodstatusrecord.FieldTimeOfDay:
		v, ok := value.(bloodstatusrecord.TimeOfDay)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimeOfDay(v)
		return nil
	case bloodstatusrecord.FieldBeforeAfterMeals:
		v, ok := value.(bloodstatusrecord.BeforeAfterMeals)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBeforeAfterMeals(v)
		return nil
	case bloodstatusrecord.FieldSystolicPressure:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSystolicPressure(v)
		return nil
	case bloodstatusrecord.FieldDiastolicPressure:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiastolicPressure(v)
		return nil
	case bloodstatusrecord.FieldPulse:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPulse(v)
		return nil
	case bloodstatusrecord.FieldMood:
		v, ok := value.(bloodstatusrecord.Mood)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMood(v)
		return nil
	case bloodstatusrecord.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bloodstatusrecord.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case bloodstatusrecord.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown BloodStatusRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BloodStatusRecordMutation) AddedFields() []string {
	var fields []string
	if m.addrecord_date != nil {
		fields = append(fields, bloodstatusrecord.FieldRecordDate)
	}
	if m.addsystolic_pressure != nil {
		fields = append(fields, bloodstatusrecord.FieldSystolicPressure)
	}
	if m.adddiastolic_pressure != nil {
		fields = append(fields, bloodstatusrecord.FieldDiastolicPressure)
	}
	if m.addpulse != nil {
		fields = append(fields, bloodstatusrecord.FieldPulse)
	}
	if m.addcreated_at != nil {
		fields = append(fields, bloodstatusrecord.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, bloodstatusrecord.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, bloodstatusrecord.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BloodStatusRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bloodstatusrecord.FieldRecordDate:
		return m.AddedRecordDate()
	case bloodstatusrecord.FieldSystolicPressure:
		return m.AddedSystolicPressure()
	case bloodstatusrecord.FieldDiastolicPressure:
		return m.AddedDiastolicPressure()
	case bloodstatusrecord.FieldPulse:
		return m.AddedPulse()
	case bloodstatusrecord.FieldCreatedAt:
		return m.AddedCreatedAt()
	case bloodstatusrecord.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case bloodstatusrecord.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BloodStatusRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bloodstatusrecord.FieldRecordDate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecordDate(v)
		return nil
	case bloodstatusrecord.FieldSystolicPressure:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSystolicPressure(v)
		return nil
	case bloodstatusrecord.FieldDiastolicPressure:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiastolicPressure(v)
		return nil
	case bloodstatusrecord.FieldPulse:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPulse(v)
		return nil
	case bloodstatusrecord.FieldCreatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case bloodstatusrecord.FieldUpdatedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case bloodstatusrecord.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown BloodStatusRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BloodStatusRecordMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bloodstatusrecord.FieldDeletedAt) {
		fields = append(fields, bloodstatusrecord.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BloodStatusRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BloodStatusRecordMutation) ClearField(name string) error {
	switch name {
	case bloodstatusrecord.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown BloodStatusRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BloodStatusRecordMutation) ResetField(name string) error {
	switch name {
	case bloodstatusrecord.FieldUserID:
		m.ResetUserID()
		return nil
	case bloodstatusrecord.FieldRecordDate:
		m.ResetRecordDate()
		return nil
	case bloodstatusrecord.FieldTimeOfDay:
		m.ResetTimeOfDay()
		return nil
	case bloodstatusrecord.FieldBeforeAfterMeals:
		m.ResetBeforeAfterMeals()
		return nil
	case bloodstatusrecord.FieldSystolicPressure:
		m.ResetSystolicPressure()
		return nil
	case bloodstatusrecord.FieldDiastolicPressure:
		m.ResetDiastolicPressure()
		return nil
	case bloodstatusrecord.FieldPulse:
		m.ResetPulse()
		return nil
	case bloodstatusrecord.FieldMood:
		m.ResetMood()
		return nil
	case bloodstatusrecord.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bloodstatusrecord.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case bloodstatusrecord.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown BloodStatusRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BloodStatusRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BloodStatusRecordMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BloodStatusRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BloodStatusRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BloodStatusRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BloodStatusRecordMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BloodStatusRecordMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BloodStatusRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BloodStatusRecordMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BloodStatusRecord edge %s", name)
}

// FoodMutation represents an operation that mutates the Food nodes in the graph.
type FoodMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	name               *string
	effect             *food.Effect
	clearedFields      map[string]struct{}
	ingredients        map[int]struct{}
	removedingredients map[int]struct{}
	clearedingredients bool
	nutrient           map[int]struct{}
	removednutrient    map[int]struct{}
	clearednutrient    bool
	user_meal          map[int]struct{}
	removeduser_meal   map[int]struct{}
	cleareduser_meal   bool
	done               bool
	oldValue           func(context.Context) (*Food, error)
	predicates         []predicate.Food
}

var _ ent.Mutation = (*FoodMutation)(nil)

// foodOption allows management of the mutation configuration using functional options.
type foodOption func(*FoodMutation)

// newFoodMutation creates new mutation for the Food entity.
func newFoodMutation(c config, op Op, opts ...foodOption) *FoodMutation {
	m := &FoodMutation{
		config:        c,
		op:            op,
		typ:           TypeFood,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFoodID sets the ID field of the mutation.
func withFoodID(id uuid.UUID) foodOption {
	return func(m *FoodMutation) {
		var (
			err   error
			once  sync.Once
			value *Food
		)
		m.oldValue = func(ctx context.Context) (*Food, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Food.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFood sets the old Food of the mutation.
func withFood(node *Food) foodOption {
	return func(m *FoodMutation) {
		m.oldValue = func(context.Context) (*Food, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FoodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FoodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Food entities.
func (m *FoodMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FoodMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FoodMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Food.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FoodMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FoodMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Food entity.
// If the Food object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FoodMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FoodMutation) ResetName() {
	m.name = nil
}

// SetEffect sets the "effect" field.
func (m *FoodMutation) SetEffect(f food.Effect) {
	m.effect = &f
}

// Effect returns the value of the "effect" field in the mutation.
func (m *FoodMutation) Effect() (r food.Effect, exists bool) {
	v := m.effect
	if v == nil {
		return
	}
	return *v, true
}

// OldEffect returns the old "effect" field's value of the Food entity.
// If the Food object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FoodMutation) OldEffect(ctx context.Context) (v food.Effect, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEffect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEffect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEffect: %w", err)
	}
	return oldValue.Effect, nil
}

// ResetEffect resets all changes to the "effect" field.
func (m *FoodMutation) ResetEffect() {
	m.effect = nil
}

// AddIngredientIDs adds the "ingredients" edge to the FoodIngredients entity by ids.
func (m *FoodMutation) AddIngredientIDs(ids ...int) {
	if m.ingredients == nil {
		m.ingredients = make(map[int]struct{})
	}
	for i := range ids {
		m.ingredients[ids[i]] = struct{}{}
	}
}

// ClearIngredients clears the "ingredients" edge to the FoodIngredients entity.
func (m *FoodMutation) ClearIngredients() {
	m.clearedingredients = true
}

// IngredientsCleared reports if the "ingredients" edge to the FoodIngredients entity was cleared.
func (m *FoodMutation) IngredientsCleared() bool {
	return m.clearedingredients
}

// RemoveIngredientIDs removes the "ingredients" edge to the FoodIngredients entity by IDs.
func (m *FoodMutation) RemoveIngredientIDs(ids ...int) {
	if m.removedingredients == nil {
		m.removedingredients = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ingredients, ids[i])
		m.removedingredients[ids[i]] = struct{}{}
	}
}

// RemovedIngredients returns the removed IDs of the "ingredients" edge to the FoodIngredients entity.
func (m *FoodMutation) RemovedIngredientsIDs() (ids []int) {
	for id := range m.removedingredients {
		ids = append(ids, id)
	}
	return
}

// IngredientsIDs returns the "ingredients" edge IDs in the mutation.
func (m *FoodMutation) IngredientsIDs() (ids []int) {
	for id := range m.ingredients {
		ids = append(ids, id)
	}
	return
}

// ResetIngredients resets all changes to the "ingredients" edge.
func (m *FoodMutation) ResetIngredients() {
	m.ingredients = nil
	m.clearedingredients = false
	m.removedingredients = nil
}

// AddNutrientIDs adds the "nutrient" edge to the FoodNutrientsRelationships entity by ids.
func (m *FoodMutation) AddNutrientIDs(ids ...int) {
	if m.nutrient == nil {
		m.nutrient = make(map[int]struct{})
	}
	for i := range ids {
		m.nutrient[ids[i]] = struct{}{}
	}
}

// ClearNutrient clears the "nutrient" edge to the FoodNutrientsRelationships entity.
func (m *FoodMutation) ClearNutrient() {
	m.clearednutrient = true
}

// NutrientCleared reports if the "nutrient" edge to the FoodNutrientsRelationships entity was cleared.
func (m *FoodMutation) NutrientCleared() bool {
	return m.clearednutrient
}

// RemoveNutrientIDs removes the "nutrient" edge to the FoodNutrientsRelationships entity by IDs.
func (m *FoodMutation) RemoveNutrientIDs(ids ...int) {
	if m.removednutrient == nil {
		m.removednutrient = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.nutrient, ids[i])
		m.removednutrient[ids[i]] = struct{}{}
	}
}

// RemovedNutrient returns the removed IDs of the "nutrient" edge to the FoodNutrientsRelationships entity.
func (m *FoodMutation) RemovedNutrientIDs() (ids []int) {
	for id := range m.removednutrient {
		ids = append(ids, id)
	}
	return
}

// NutrientIDs returns the "nutrient" edge IDs in the mutation.
func (m *FoodMutation) NutrientIDs() (ids []int) {
	for id := range m.nutrient {
		ids = append(ids, id)
	}
	return
}

// ResetNutrient resets all changes to the "nutrient" edge.
func (m *FoodMutation) ResetNutrient() {
	m.nutrient = nil
	m.clearednutrient = false
	m.removednutrient = nil
}

// AddUserMealIDs adds the "user_meal" edge to the UserMealFood entity by ids.
func (m *FoodMutation) AddUserMealIDs(ids ...int) {
	if m.user_meal == nil {
		m.user_meal = make(map[int]struct{})
	}
	for i := range ids {
		m.user_meal[ids[i]] = struct{}{}
	}
}

// ClearUserMeal clears the "user_meal" edge to the UserMealFood entity.
func (m *FoodMutation) ClearUserMeal() {
	m.cleareduser_meal = true
}

// UserMealCleared reports if the "user_meal" edge to the UserMealFood entity was cleared.
func (m *FoodMutation) UserMealCleared() bool {
	return m.cleareduser_meal
}

// RemoveUserMealIDs removes the "user_meal" edge to the UserMealFood entity by IDs.
func (m *FoodMutation) RemoveUserMealIDs(ids ...int) {
	if m.removeduser_meal == nil {
		m.removeduser_meal = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_meal, ids[i])
		m.removeduser_meal[ids[i]] = struct{}{}
	}
}

// RemovedUserMeal returns the removed IDs of the "user_meal" edge to the UserMealFood entity.
func (m *FoodMutation) RemovedUserMealIDs() (ids []int) {
	for id := range m.removeduser_meal {
		ids = append(ids, id)
	}
	return
}

// UserMealIDs returns the "user_meal" edge IDs in the mutation.
func (m *FoodMutation) UserMealIDs() (ids []int) {
	for id := range m.user_meal {
		ids = append(ids, id)
	}
	return
}

// ResetUserMeal resets all changes to the "user_meal" edge.
func (m *FoodMutation) ResetUserMeal() {
	m.user_meal = nil
	m.cleareduser_meal = false
	m.removeduser_meal = nil
}

// Where appends a list predicates to the FoodMutation builder.
func (m *FoodMutation) Where(ps ...predicate.Food) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FoodMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FoodMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Food, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FoodMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FoodMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Food).
func (m *FoodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FoodMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, food.FieldName)
	}
	if m.effect != nil {
		fields = append(fields, food.FieldEffect)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FoodMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case food.FieldName:
		return m.Name()
	case food.FieldEffect:
		return m.Effect()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FoodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case food.FieldName:
		return m.OldName(ctx)
	case food.FieldEffect:
		return m.OldEffect(ctx)
	}
	return nil, fmt.Errorf("unknown Food field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FoodMutation) SetField(name string, value ent.Value) error {
	switch name {
	case food.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case food.FieldEffect:
		v, ok := value.(food.Effect)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEffect(v)
		return nil
	}
	return fmt.Errorf("unknown Food field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FoodMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FoodMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FoodMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Food numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FoodMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FoodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FoodMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Food nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FoodMutation) ResetField(name string) error {
	switch name {
	case food.FieldName:
		m.ResetName()
		return nil
	case food.FieldEffect:
		m.ResetEffect()
		return nil
	}
	return fmt.Errorf("unknown Food field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FoodMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.ingredients != nil {
		edges = append(edges, food.EdgeIngredients)
	}
	if m.nutrient != nil {
		edges = append(edges, food.EdgeNutrient)
	}
	if m.user_meal != nil {
		edges = append(edges, food.EdgeUserMeal)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FoodMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case food.EdgeIngredients:
		ids := make([]ent.Value, 0, len(m.ingredients))
		for id := range m.ingredients {
			ids = append(ids, id)
		}
		return ids
	case food.EdgeNutrient:
		ids := make([]ent.Value, 0, len(m.nutrient))
		for id := range m.nutrient {
			ids = append(ids, id)
		}
		return ids
	case food.EdgeUserMeal:
		ids := make([]ent.Value, 0, len(m.user_meal))
		for id := range m.user_meal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FoodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedingredients != nil {
		edges = append(edges, food.EdgeIngredients)
	}
	if m.removednutrient != nil {
		edges = append(edges, food.EdgeNutrient)
	}
	if m.removeduser_meal != nil {
		edges = append(edges, food.EdgeUserMeal)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FoodMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case food.EdgeIngredients:
		ids := make([]ent.Value, 0, len(m.removedingredients))
		for id := range m.removedingredients {
			ids = append(ids, id)
		}
		return ids
	case food.EdgeNutrient:
		ids := make([]ent.Value, 0, len(m.removednutrient))
		for id := range m.removednutrient {
			ids = append(ids, id)
		}
		return ids
	case food.EdgeUserMeal:
		ids := make([]ent.Value, 0, len(m.removeduser_meal))
		for id := range m.removeduser_meal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FoodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedingredients {
		edges = append(edges, food.EdgeIngredients)
	}
	if m.clearednutrient {
		edges = append(edges, food.EdgeNutrient)
	}
	if m.cleareduser_meal {
		edges = append(edges, food.EdgeUserMeal)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FoodMutation) EdgeCleared(name string) bool {
	switch name {
	case food.EdgeIngredients:
		return m.clearedingredients
	case food.EdgeNutrient:
		return m.clearednutrient
	case food.EdgeUserMeal:
		return m.cleareduser_meal
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FoodMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Food unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FoodMutation) ResetEdge(name string) error {
	switch name {
	case food.EdgeIngredients:
		m.ResetIngredients()
		return nil
	case food.EdgeNutrient:
		m.ResetNutrient()
		return nil
	case food.EdgeUserMeal:
		m.ResetUserMeal()
		return nil
	}
	return fmt.Errorf("unknown Food edge %s", name)
}

// FoodIngredientsMutation represents an operation that mutates the FoodIngredients nodes in the graph.
type FoodIngredientsMutation struct {
	config
	op                Op
	typ               string
	id                *int
	clearedFields     map[string]struct{}
	food              *uuid.UUID
	clearedfood       bool
	ingredient        *uuid.UUID
	clearedingredient bool
	done              bool
	oldValue          func(context.Context) (*FoodIngredients, error)
	predicates        []predicate.FoodIngredients
}

var _ ent.Mutation = (*FoodIngredientsMutation)(nil)

// foodingredientsOption allows management of the mutation configuration using functional options.
type foodingredientsOption func(*FoodIngredientsMutation)

// newFoodIngredientsMutation creates new mutation for the FoodIngredients entity.
func newFoodIngredientsMutation(c config, op Op, opts ...foodingredientsOption) *FoodIngredientsMutation {
	m := &FoodIngredientsMutation{
		config:        c,
		op:            op,
		typ:           TypeFoodIngredients,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFoodIngredientsID sets the ID field of the mutation.
func withFoodIngredientsID(id int) foodingredientsOption {
	return func(m *FoodIngredientsMutation) {
		var (
			err   error
			once  sync.Once
			value *FoodIngredients
		)
		m.oldValue = func(ctx context.Context) (*FoodIngredients, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FoodIngredients.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFoodIngredients sets the old FoodIngredients of the mutation.
func withFoodIngredients(node *FoodIngredients) foodingredientsOption {
	return func(m *FoodIngredientsMutation) {
		m.oldValue = func(context.Context) (*FoodIngredients, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FoodIngredientsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FoodIngredientsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FoodIngredientsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FoodIngredientsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FoodIngredients.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFoodID sets the "food" edge to the Food entity by id.
func (m *FoodIngredientsMutation) SetFoodID(id uuid.UUID) {
	m.food = &id
}

// ClearFood clears the "food" edge to the Food entity.
func (m *FoodIngredientsMutation) ClearFood() {
	m.clearedfood = true
}

// FoodCleared reports if the "food" edge to the Food entity was cleared.
func (m *FoodIngredientsMutation) FoodCleared() bool {
	return m.clearedfood
}

// FoodID returns the "food" edge ID in the mutation.
func (m *FoodIngredientsMutation) FoodID() (id uuid.UUID, exists bool) {
	if m.food != nil {
		return *m.food, true
	}
	return
}

// FoodIDs returns the "food" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FoodID instead. It exists only for internal usage by the builders.
func (m *FoodIngredientsMutation) FoodIDs() (ids []uuid.UUID) {
	if id := m.food; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFood resets all changes to the "food" edge.
func (m *FoodIngredientsMutation) ResetFood() {
	m.food = nil
	m.clearedfood = false
}

// SetIngredientID sets the "ingredient" edge to the Ingredients entity by id.
func (m *FoodIngredientsMutation) SetIngredientID(id uuid.UUID) {
	m.ingredient = &id
}

// ClearIngredient clears the "ingredient" edge to the Ingredients entity.
func (m *FoodIngredientsMutation) ClearIngredient() {
	m.clearedingredient = true
}

// IngredientCleared reports if the "ingredient" edge to the Ingredients entity was cleared.
func (m *FoodIngredientsMutation) IngredientCleared() bool {
	return m.clearedingredient
}

// IngredientID returns the "ingredient" edge ID in the mutation.
func (m *FoodIngredientsMutation) IngredientID() (id uuid.UUID, exists bool) {
	if m.ingredient != nil {
		return *m.ingredient, true
	}
	return
}

// IngredientIDs returns the "ingredient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IngredientID instead. It exists only for internal usage by the builders.
func (m *FoodIngredientsMutation) IngredientIDs() (ids []uuid.UUID) {
	if id := m.ingredient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIngredient resets all changes to the "ingredient" edge.
func (m *FoodIngredientsMutation) ResetIngredient() {
	m.ingredient = nil
	m.clearedingredient = false
}

// Where appends a list predicates to the FoodIngredientsMutation builder.
func (m *FoodIngredientsMutation) Where(ps ...predicate.FoodIngredients) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FoodIngredientsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FoodIngredientsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FoodIngredients, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FoodIngredientsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FoodIngredientsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FoodIngredients).
func (m *FoodIngredientsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FoodIngredientsMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FoodIngredientsMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FoodIngredientsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown FoodIngredients field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FoodIngredientsMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FoodIngredients field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FoodIngredientsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FoodIngredientsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FoodIngredientsMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown FoodIngredients numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FoodIngredientsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FoodIngredientsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FoodIngredientsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FoodIngredients nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FoodIngredientsMutation) ResetField(name string) error {
	return fmt.Errorf("unknown FoodIngredients field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FoodIngredientsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.food != nil {
		edges = append(edges, foodingredients.EdgeFood)
	}
	if m.ingredient != nil {
		edges = append(edges, foodingredients.EdgeIngredient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FoodIngredientsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case foodingredients.EdgeFood:
		if id := m.food; id != nil {
			return []ent.Value{*id}
		}
	case foodingredients.EdgeIngredient:
		if id := m.ingredient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FoodIngredientsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FoodIngredientsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FoodIngredientsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfood {
		edges = append(edges, foodingredients.EdgeFood)
	}
	if m.clearedingredient {
		edges = append(edges, foodingredients.EdgeIngredient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FoodIngredientsMutation) EdgeCleared(name string) bool {
	switch name {
	case foodingredients.EdgeFood:
		return m.clearedfood
	case foodingredients.EdgeIngredient:
		return m.clearedingredient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FoodIngredientsMutation) ClearEdge(name string) error {
	switch name {
	case foodingredients.EdgeFood:
		m.ClearFood()
		return nil
	case foodingredients.EdgeIngredient:
		m.ClearIngredient()
		return nil
	}
	return fmt.Errorf("unknown FoodIngredients unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FoodIngredientsMutation) ResetEdge(name string) error {
	switch name {
	case foodingredients.EdgeFood:
		m.ResetFood()
		return nil
	case foodingredients.EdgeIngredient:
		m.ResetIngredient()
		return nil
	}
	return fmt.Errorf("unknown FoodIngredients edge %s", name)
}

// FoodNutrientsRelationshipsMutation represents an operation that mutates the FoodNutrientsRelationships nodes in the graph.
type FoodNutrientsRelationshipsMutation struct {
	config
	op              Op
	typ             string
	id              *int
	clearedFields   map[string]struct{}
	food            *uuid.UUID
	clearedfood     bool
	nutrient        *uuid.UUID
	clearednutrient bool
	done            bool
	oldValue        func(context.Context) (*FoodNutrientsRelationships, error)
	predicates      []predicate.FoodNutrientsRelationships
}

var _ ent.Mutation = (*FoodNutrientsRelationshipsMutation)(nil)

// foodnutrientsrelationshipsOption allows management of the mutation configuration using functional options.
type foodnutrientsrelationshipsOption func(*FoodNutrientsRelationshipsMutation)

// newFoodNutrientsRelationshipsMutation creates new mutation for the FoodNutrientsRelationships entity.
func newFoodNutrientsRelationshipsMutation(c config, op Op, opts ...foodnutrientsrelationshipsOption) *FoodNutrientsRelationshipsMutation {
	m := &FoodNutrientsRelationshipsMutation{
		config:        c,
		op:            op,
		typ:           TypeFoodNutrientsRelationships,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFoodNutrientsRelationshipsID sets the ID field of the mutation.
func withFoodNutrientsRelationshipsID(id int) foodnutrientsrelationshipsOption {
	return func(m *FoodNutrientsRelationshipsMutation) {
		var (
			err   error
			once  sync.Once
			value *FoodNutrientsRelationships
		)
		m.oldValue = func(ctx context.Context) (*FoodNutrientsRelationships, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FoodNutrientsRelationships.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFoodNutrientsRelationships sets the old FoodNutrientsRelationships of the mutation.
func withFoodNutrientsRelationships(node *FoodNutrientsRelationships) foodnutrientsrelationshipsOption {
	return func(m *FoodNutrientsRelationshipsMutation) {
		m.oldValue = func(context.Context) (*FoodNutrientsRelationships, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FoodNutrientsRelationshipsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FoodNutrientsRelationshipsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FoodNutrientsRelationshipsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FoodNutrientsRelationshipsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FoodNutrientsRelationships.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFoodID sets the "food" edge to the Food entity by id.
func (m *FoodNutrientsRelationshipsMutation) SetFoodID(id uuid.UUID) {
	m.food = &id
}

// ClearFood clears the "food" edge to the Food entity.
func (m *FoodNutrientsRelationshipsMutation) ClearFood() {
	m.clearedfood = true
}

// FoodCleared reports if the "food" edge to the Food entity was cleared.
func (m *FoodNutrientsRelationshipsMutation) FoodCleared() bool {
	return m.clearedfood
}

// FoodID returns the "food" edge ID in the mutation.
func (m *FoodNutrientsRelationshipsMutation) FoodID() (id uuid.UUID, exists bool) {
	if m.food != nil {
		return *m.food, true
	}
	return
}

// FoodIDs returns the "food" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FoodID instead. It exists only for internal usage by the builders.
func (m *FoodNutrientsRelationshipsMutation) FoodIDs() (ids []uuid.UUID) {
	if id := m.food; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFood resets all changes to the "food" edge.
func (m *FoodNutrientsRelationshipsMutation) ResetFood() {
	m.food = nil
	m.clearedfood = false
}

// SetNutrientID sets the "nutrient" edge to the Nutrient entity by id.
func (m *FoodNutrientsRelationshipsMutation) SetNutrientID(id uuid.UUID) {
	m.nutrient = &id
}

// ClearNutrient clears the "nutrient" edge to the Nutrient entity.
func (m *FoodNutrientsRelationshipsMutation) ClearNutrient() {
	m.clearednutrient = true
}

// NutrientCleared reports if the "nutrient" edge to the Nutrient entity was cleared.
func (m *FoodNutrientsRelationshipsMutation) NutrientCleared() bool {
	return m.clearednutrient
}

// NutrientID returns the "nutrient" edge ID in the mutation.
func (m *FoodNutrientsRelationshipsMutation) NutrientID() (id uuid.UUID, exists bool) {
	if m.nutrient != nil {
		return *m.nutrient, true
	}
	return
}

// NutrientIDs returns the "nutrient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NutrientID instead. It exists only for internal usage by the builders.
func (m *FoodNutrientsRelationshipsMutation) NutrientIDs() (ids []uuid.UUID) {
	if id := m.nutrient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNutrient resets all changes to the "nutrient" edge.
func (m *FoodNutrientsRelationshipsMutation) ResetNutrient() {
	m.nutrient = nil
	m.clearednutrient = false
}

// Where appends a list predicates to the FoodNutrientsRelationshipsMutation builder.
func (m *FoodNutrientsRelationshipsMutation) Where(ps ...predicate.FoodNutrientsRelationships) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FoodNutrientsRelationshipsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FoodNutrientsRelationshipsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FoodNutrientsRelationships, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FoodNutrientsRelationshipsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FoodNutrientsRelationshipsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FoodNutrientsRelationships).
func (m *FoodNutrientsRelationshipsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FoodNutrientsRelationshipsMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FoodNutrientsRelationshipsMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FoodNutrientsRelationshipsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown FoodNutrientsRelationships field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FoodNutrientsRelationshipsMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FoodNutrientsRelationships field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FoodNutrientsRelationshipsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FoodNutrientsRelationshipsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FoodNutrientsRelationshipsMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown FoodNutrientsRelationships numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FoodNutrientsRelationshipsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FoodNutrientsRelationshipsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FoodNutrientsRelationshipsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FoodNutrientsRelationships nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FoodNutrientsRelationshipsMutation) ResetField(name string) error {
	return fmt.Errorf("unknown FoodNutrientsRelationships field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FoodNutrientsRelationshipsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.food != nil {
		edges = append(edges, foodnutrientsrelationships.EdgeFood)
	}
	if m.nutrient != nil {
		edges = append(edges, foodnutrientsrelationships.EdgeNutrient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FoodNutrientsRelationshipsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case foodnutrientsrelationships.EdgeFood:
		if id := m.food; id != nil {
			return []ent.Value{*id}
		}
	case foodnutrientsrelationships.EdgeNutrient:
		if id := m.nutrient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FoodNutrientsRelationshipsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FoodNutrientsRelationshipsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FoodNutrientsRelationshipsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfood {
		edges = append(edges, foodnutrientsrelationships.EdgeFood)
	}
	if m.clearednutrient {
		edges = append(edges, foodnutrientsrelationships.EdgeNutrient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FoodNutrientsRelationshipsMutation) EdgeCleared(name string) bool {
	switch name {
	case foodnutrientsrelationships.EdgeFood:
		return m.clearedfood
	case foodnutrientsrelationships.EdgeNutrient:
		return m.clearednutrient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FoodNutrientsRelationshipsMutation) ClearEdge(name string) error {
	switch name {
	case foodnutrientsrelationships.EdgeFood:
		m.ClearFood()
		return nil
	case foodnutrientsrelationships.EdgeNutrient:
		m.ClearNutrient()
		return nil
	}
	return fmt.Errorf("unknown FoodNutrientsRelationships unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FoodNutrientsRelationshipsMutation) ResetEdge(name string) error {
	switch name {
	case foodnutrientsrelationships.EdgeFood:
		m.ResetFood()
		return nil
	case foodnutrientsrelationships.EdgeNutrient:
		m.ResetNutrient()
		return nil
	}
	return fmt.Errorf("unknown FoodNutrientsRelationships edge %s", name)
}

// IngredientsMutation represents an operation that mutates the Ingredients nodes in the graph.
type IngredientsMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	effect        *ingredients.Effect
	clearedFields map[string]struct{}
	food          map[int]struct{}
	removedfood   map[int]struct{}
	clearedfood   bool
	done          bool
	oldValue      func(context.Context) (*Ingredients, error)
	predicates    []predicate.Ingredients
}

var _ ent.Mutation = (*IngredientsMutation)(nil)

// ingredientsOption allows management of the mutation configuration using functional options.
type ingredientsOption func(*IngredientsMutation)

// newIngredientsMutation creates new mutation for the Ingredients entity.
func newIngredientsMutation(c config, op Op, opts ...ingredientsOption) *IngredientsMutation {
	m := &IngredientsMutation{
		config:        c,
		op:            op,
		typ:           TypeIngredients,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIngredientsID sets the ID field of the mutation.
func withIngredientsID(id uuid.UUID) ingredientsOption {
	return func(m *IngredientsMutation) {
		var (
			err   error
			once  sync.Once
			value *Ingredients
		)
		m.oldValue = func(ctx context.Context) (*Ingredients, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ingredients.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIngredients sets the old Ingredients of the mutation.
func withIngredients(node *Ingredients) ingredientsOption {
	return func(m *IngredientsMutation) {
		m.oldValue = func(context.Context) (*Ingredients, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IngredientsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IngredientsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Ingredients entities.
func (m *IngredientsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IngredientsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IngredientsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ingredients.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *IngredientsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IngredientsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Ingredients entity.
// If the Ingredients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IngredientsMutation) ResetName() {
	m.name = nil
}

// SetEffect sets the "effect" field.
func (m *IngredientsMutation) SetEffect(i ingredients.Effect) {
	m.effect = &i
}

// Effect returns the value of the "effect" field in the mutation.
func (m *IngredientsMutation) Effect() (r ingredients.Effect, exists bool) {
	v := m.effect
	if v == nil {
		return
	}
	return *v, true
}

// OldEffect returns the old "effect" field's value of the Ingredients entity.
// If the Ingredients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientsMutation) OldEffect(ctx context.Context) (v ingredients.Effect, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEffect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEffect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEffect: %w", err)
	}
	return oldValue.Effect, nil
}

// ResetEffect resets all changes to the "effect" field.
func (m *IngredientsMutation) ResetEffect() {
	m.effect = nil
}

// AddFoodIDs adds the "food" edge to the FoodIngredients entity by ids.
func (m *IngredientsMutation) AddFoodIDs(ids ...int) {
	if m.food == nil {
		m.food = make(map[int]struct{})
	}
	for i := range ids {
		m.food[ids[i]] = struct{}{}
	}
}

// ClearFood clears the "food" edge to the FoodIngredients entity.
func (m *IngredientsMutation) ClearFood() {
	m.clearedfood = true
}

// FoodCleared reports if the "food" edge to the FoodIngredients entity was cleared.
func (m *IngredientsMutation) FoodCleared() bool {
	return m.clearedfood
}

// RemoveFoodIDs removes the "food" edge to the FoodIngredients entity by IDs.
func (m *IngredientsMutation) RemoveFoodIDs(ids ...int) {
	if m.removedfood == nil {
		m.removedfood = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.food, ids[i])
		m.removedfood[ids[i]] = struct{}{}
	}
}

// RemovedFood returns the removed IDs of the "food" edge to the FoodIngredients entity.
func (m *IngredientsMutation) RemovedFoodIDs() (ids []int) {
	for id := range m.removedfood {
		ids = append(ids, id)
	}
	return
}

// FoodIDs returns the "food" edge IDs in the mutation.
func (m *IngredientsMutation) FoodIDs() (ids []int) {
	for id := range m.food {
		ids = append(ids, id)
	}
	return
}

// ResetFood resets all changes to the "food" edge.
func (m *IngredientsMutation) ResetFood() {
	m.food = nil
	m.clearedfood = false
	m.removedfood = nil
}

// Where appends a list predicates to the IngredientsMutation builder.
func (m *IngredientsMutation) Where(ps ...predicate.Ingredients) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IngredientsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IngredientsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Ingredients, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IngredientsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IngredientsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Ingredients).
func (m *IngredientsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IngredientsMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, ingredients.FieldName)
	}
	if m.effect != nil {
		fields = append(fields, ingredients.FieldEffect)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IngredientsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ingredients.FieldName:
		return m.Name()
	case ingredients.FieldEffect:
		return m.Effect()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IngredientsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ingredients.FieldName:
		return m.OldName(ctx)
	case ingredients.FieldEffect:
		return m.OldEffect(ctx)
	}
	return nil, fmt.Errorf("unknown Ingredients field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ingredients.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case ingredients.FieldEffect:
		v, ok := value.(ingredients.Effect)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEffect(v)
		return nil
	}
	return fmt.Errorf("unknown Ingredients field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IngredientsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IngredientsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ingredients numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IngredientsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IngredientsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IngredientsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Ingredients nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IngredientsMutation) ResetField(name string) error {
	switch name {
	case ingredients.FieldName:
		m.ResetName()
		return nil
	case ingredients.FieldEffect:
		m.ResetEffect()
		return nil
	}
	return fmt.Errorf("unknown Ingredients field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IngredientsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.food != nil {
		edges = append(edges, ingredients.EdgeFood)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IngredientsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ingredients.EdgeFood:
		ids := make([]ent.Value, 0, len(m.food))
		for id := range m.food {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IngredientsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfood != nil {
		edges = append(edges, ingredients.EdgeFood)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IngredientsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ingredients.EdgeFood:
		ids := make([]ent.Value, 0, len(m.removedfood))
		for id := range m.removedfood {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IngredientsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfood {
		edges = append(edges, ingredients.EdgeFood)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IngredientsMutation) EdgeCleared(name string) bool {
	switch name {
	case ingredients.EdgeFood:
		return m.clearedfood
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IngredientsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Ingredients unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IngredientsMutation) ResetEdge(name string) error {
	switch name {
	case ingredients.EdgeFood:
		m.ResetFood()
		return nil
	}
	return fmt.Errorf("unknown Ingredients edge %s", name)
}

// NutrientMutation represents an operation that mutates the Nutrient nodes in the graph.
type NutrientMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	effect        *nutrient.Effect
	clearedFields map[string]struct{}
	food          map[int]struct{}
	removedfood   map[int]struct{}
	clearedfood   bool
	done          bool
	oldValue      func(context.Context) (*Nutrient, error)
	predicates    []predicate.Nutrient
}

var _ ent.Mutation = (*NutrientMutation)(nil)

// nutrientOption allows management of the mutation configuration using functional options.
type nutrientOption func(*NutrientMutation)

// newNutrientMutation creates new mutation for the Nutrient entity.
func newNutrientMutation(c config, op Op, opts ...nutrientOption) *NutrientMutation {
	m := &NutrientMutation{
		config:        c,
		op:            op,
		typ:           TypeNutrient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNutrientID sets the ID field of the mutation.
func withNutrientID(id uuid.UUID) nutrientOption {
	return func(m *NutrientMutation) {
		var (
			err   error
			once  sync.Once
			value *Nutrient
		)
		m.oldValue = func(ctx context.Context) (*Nutrient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Nutrient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNutrient sets the old Nutrient of the mutation.
func withNutrient(node *Nutrient) nutrientOption {
	return func(m *NutrientMutation) {
		m.oldValue = func(context.Context) (*Nutrient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NutrientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NutrientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Nutrient entities.
func (m *NutrientMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NutrientMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NutrientMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Nutrient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *NutrientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NutrientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Nutrient entity.
// If the Nutrient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NutrientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *NutrientMutation) ResetName() {
	m.name = nil
}

// SetEffect sets the "effect" field.
func (m *NutrientMutation) SetEffect(n nutrient.Effect) {
	m.effect = &n
}

// Effect returns the value of the "effect" field in the mutation.
func (m *NutrientMutation) Effect() (r nutrient.Effect, exists bool) {
	v := m.effect
	if v == nil {
		return
	}
	return *v, true
}

// OldEffect returns the old "effect" field's value of the Nutrient entity.
// If the Nutrient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NutrientMutation) OldEffect(ctx context.Context) (v nutrient.Effect, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEffect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEffect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEffect: %w", err)
	}
	return oldValue.Effect, nil
}

// ResetEffect resets all changes to the "effect" field.
func (m *NutrientMutation) ResetEffect() {
	m.effect = nil
}

// AddFoodIDs adds the "food" edge to the FoodNutrientsRelationships entity by ids.
func (m *NutrientMutation) AddFoodIDs(ids ...int) {
	if m.food == nil {
		m.food = make(map[int]struct{})
	}
	for i := range ids {
		m.food[ids[i]] = struct{}{}
	}
}

// ClearFood clears the "food" edge to the FoodNutrientsRelationships entity.
func (m *NutrientMutation) ClearFood() {
	m.clearedfood = true
}

// FoodCleared reports if the "food" edge to the FoodNutrientsRelationships entity was cleared.
func (m *NutrientMutation) FoodCleared() bool {
	return m.clearedfood
}

// RemoveFoodIDs removes the "food" edge to the FoodNutrientsRelationships entity by IDs.
func (m *NutrientMutation) RemoveFoodIDs(ids ...int) {
	if m.removedfood == nil {
		m.removedfood = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.food, ids[i])
		m.removedfood[ids[i]] = struct{}{}
	}
}

// RemovedFood returns the removed IDs of the "food" edge to the FoodNutrientsRelationships entity.
func (m *NutrientMutation) RemovedFoodIDs() (ids []int) {
	for id := range m.removedfood {
		ids = append(ids, id)
	}
	return
}

// FoodIDs returns the "food" edge IDs in the mutation.
func (m *NutrientMutation) FoodIDs() (ids []int) {
	for id := range m.food {
		ids = append(ids, id)
	}
	return
}

// ResetFood resets all changes to the "food" edge.
func (m *NutrientMutation) ResetFood() {
	m.food = nil
	m.clearedfood = false
	m.removedfood = nil
}

// Where appends a list predicates to the NutrientMutation builder.
func (m *NutrientMutation) Where(ps ...predicate.Nutrient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NutrientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NutrientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Nutrient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NutrientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NutrientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Nutrient).
func (m *NutrientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NutrientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, nutrient.FieldName)
	}
	if m.effect != nil {
		fields = append(fields, nutrient.FieldEffect)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NutrientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nutrient.FieldName:
		return m.Name()
	case nutrient.FieldEffect:
		return m.Effect()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NutrientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nutrient.FieldName:
		return m.OldName(ctx)
	case nutrient.FieldEffect:
		return m.OldEffect(ctx)
	}
	return nil, fmt.Errorf("unknown Nutrient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NutrientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nutrient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case nutrient.FieldEffect:
		v, ok := value.(nutrient.Effect)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEffect(v)
		return nil
	}
	return fmt.Errorf("unknown Nutrient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NutrientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NutrientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NutrientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Nutrient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NutrientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NutrientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NutrientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Nutrient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NutrientMutation) ResetField(name string) error {
	switch name {
	case nutrient.FieldName:
		m.ResetName()
		return nil
	case nutrient.FieldEffect:
		m.ResetEffect()
		return nil
	}
	return fmt.Errorf("unknown Nutrient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NutrientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.food != nil {
		edges = append(edges, nutrient.EdgeFood)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NutrientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nutrient.EdgeFood:
		ids := make([]ent.Value, 0, len(m.food))
		for id := range m.food {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NutrientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfood != nil {
		edges = append(edges, nutrient.EdgeFood)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NutrientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nutrient.EdgeFood:
		ids := make([]ent.Value, 0, len(m.removedfood))
		for id := range m.removedfood {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NutrientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfood {
		edges = append(edges, nutrient.EdgeFood)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NutrientMutation) EdgeCleared(name string) bool {
	switch name {
	case nutrient.EdgeFood:
		return m.clearedfood
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NutrientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Nutrient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NutrientMutation) ResetEdge(name string) error {
	switch name {
	case nutrient.EdgeFood:
		m.ResetFood()
		return nil
	}
	return fmt.Errorf("unknown Nutrient edge %s", name)
}

// UserMealMutation represents an operation that mutates the UserMeal nodes in the graph.
type UserMealMutation struct {
	config
	op             Op
	typ            string
	id             *int
	user_id        *uuid.UUID
	record_date    *int
	addrecord_date *int
	meal_type      *usermeal.MealType
	description    *string
	clearedFields  map[string]struct{}
	food           map[int]struct{}
	removedfood    map[int]struct{}
	clearedfood    bool
	done           bool
	oldValue       func(context.Context) (*UserMeal, error)
	predicates     []predicate.UserMeal
}

var _ ent.Mutation = (*UserMealMutation)(nil)

// usermealOption allows management of the mutation configuration using functional options.
type usermealOption func(*UserMealMutation)

// newUserMealMutation creates new mutation for the UserMeal entity.
func newUserMealMutation(c config, op Op, opts ...usermealOption) *UserMealMutation {
	m := &UserMealMutation{
		config:        c,
		op:            op,
		typ:           TypeUserMeal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserMealID sets the ID field of the mutation.
func withUserMealID(id int) usermealOption {
	return func(m *UserMealMutation) {
		var (
			err   error
			once  sync.Once
			value *UserMeal
		)
		m.oldValue = func(ctx context.Context) (*UserMeal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserMeal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserMeal sets the old UserMeal of the mutation.
func withUserMeal(node *UserMeal) usermealOption {
	return func(m *UserMealMutation) {
		m.oldValue = func(context.Context) (*UserMeal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMealMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMealMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMealMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMealMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserMeal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserMealMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserMealMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserMeal entity.
// If the UserMeal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMealMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserMealMutation) ResetUserID() {
	m.user_id = nil
}

// SetRecordDate sets the "record_date" field.
func (m *UserMealMutation) SetRecordDate(i int) {
	m.record_date = &i
	m.addrecord_date = nil
}

// RecordDate returns the value of the "record_date" field in the mutation.
func (m *UserMealMutation) RecordDate() (r int, exists bool) {
	v := m.record_date
	if v == nil {
		return
	}
	return *v, true
}

// OldRecordDate returns the old "record_date" field's value of the UserMeal entity.
// If the UserMeal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMealMutation) OldRecordDate(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecordDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecordDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecordDate: %w", err)
	}
	return oldValue.RecordDate, nil
}

// AddRecordDate adds i to the "record_date" field.
func (m *UserMealMutation) AddRecordDate(i int) {
	if m.addrecord_date != nil {
		*m.addrecord_date += i
	} else {
		m.addrecord_date = &i
	}
}

// AddedRecordDate returns the value that was added to the "record_date" field in this mutation.
func (m *UserMealMutation) AddedRecordDate() (r int, exists bool) {
	v := m.addrecord_date
	if v == nil {
		return
	}
	return *v, true
}

// ResetRecordDate resets all changes to the "record_date" field.
func (m *UserMealMutation) ResetRecordDate() {
	m.record_date = nil
	m.addrecord_date = nil
}

// SetMealType sets the "meal_type" field.
func (m *UserMealMutation) SetMealType(ut usermeal.MealType) {
	m.meal_type = &ut
}

// MealType returns the value of the "meal_type" field in the mutation.
func (m *UserMealMutation) MealType() (r usermeal.MealType, exists bool) {
	v := m.meal_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMealType returns the old "meal_type" field's value of the UserMeal entity.
// If the UserMeal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMealMutation) OldMealType(ctx context.Context) (v usermeal.MealType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMealType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMealType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMealType: %w", err)
	}
	return oldValue.MealType, nil
}

// ResetMealType resets all changes to the "meal_type" field.
func (m *UserMealMutation) ResetMealType() {
	m.meal_type = nil
}

// SetDescription sets the "description" field.
func (m *UserMealMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *UserMealMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the UserMeal entity.
// If the UserMeal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMealMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *UserMealMutation) ResetDescription() {
	m.description = nil
}

// AddFoodIDs adds the "food" edge to the UserMealFood entity by ids.
func (m *UserMealMutation) AddFoodIDs(ids ...int) {
	if m.food == nil {
		m.food = make(map[int]struct{})
	}
	for i := range ids {
		m.food[ids[i]] = struct{}{}
	}
}

// ClearFood clears the "food" edge to the UserMealFood entity.
func (m *UserMealMutation) ClearFood() {
	m.clearedfood = true
}

// FoodCleared reports if the "food" edge to the UserMealFood entity was cleared.
func (m *UserMealMutation) FoodCleared() bool {
	return m.clearedfood
}

// RemoveFoodIDs removes the "food" edge to the UserMealFood entity by IDs.
func (m *UserMealMutation) RemoveFoodIDs(ids ...int) {
	if m.removedfood == nil {
		m.removedfood = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.food, ids[i])
		m.removedfood[ids[i]] = struct{}{}
	}
}

// RemovedFood returns the removed IDs of the "food" edge to the UserMealFood entity.
func (m *UserMealMutation) RemovedFoodIDs() (ids []int) {
	for id := range m.removedfood {
		ids = append(ids, id)
	}
	return
}

// FoodIDs returns the "food" edge IDs in the mutation.
func (m *UserMealMutation) FoodIDs() (ids []int) {
	for id := range m.food {
		ids = append(ids, id)
	}
	return
}

// ResetFood resets all changes to the "food" edge.
func (m *UserMealMutation) ResetFood() {
	m.food = nil
	m.clearedfood = false
	m.removedfood = nil
}

// Where appends a list predicates to the UserMealMutation builder.
func (m *UserMealMutation) Where(ps ...predicate.UserMeal) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMealMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMealMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserMeal, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMealMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMealMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserMeal).
func (m *UserMealMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMealMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user_id != nil {
		fields = append(fields, usermeal.FieldUserID)
	}
	if m.record_date != nil {
		fields = append(fields, usermeal.FieldRecordDate)
	}
	if m.meal_type != nil {
		fields = append(fields, usermeal.FieldMealType)
	}
	if m.description != nil {
		fields = append(fields, usermeal.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMealMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usermeal.FieldUserID:
		return m.UserID()
	case usermeal.FieldRecordDate:
		return m.RecordDate()
	case usermeal.FieldMealType:
		return m.MealType()
	case usermeal.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMealMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usermeal.FieldUserID:
		return m.OldUserID(ctx)
	case usermeal.FieldRecordDate:
		return m.OldRecordDate(ctx)
	case usermeal.FieldMealType:
		return m.OldMealType(ctx)
	case usermeal.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown UserMeal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMealMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usermeal.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usermeal.FieldRecordDate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecordDate(v)
		return nil
	case usermeal.FieldMealType:
		v, ok := value.(usermeal.MealType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMealType(v)
		return nil
	case usermeal.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown UserMeal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMealMutation) AddedFields() []string {
	var fields []string
	if m.addrecord_date != nil {
		fields = append(fields, usermeal.FieldRecordDate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMealMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usermeal.FieldRecordDate:
		return m.AddedRecordDate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMealMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usermeal.FieldRecordDate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecordDate(v)
		return nil
	}
	return fmt.Errorf("unknown UserMeal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMealMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMealMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMealMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserMeal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMealMutation) ResetField(name string) error {
	switch name {
	case usermeal.FieldUserID:
		m.ResetUserID()
		return nil
	case usermeal.FieldRecordDate:
		m.ResetRecordDate()
		return nil
	case usermeal.FieldMealType:
		m.ResetMealType()
		return nil
	case usermeal.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown UserMeal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMealMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.food != nil {
		edges = append(edges, usermeal.EdgeFood)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMealMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usermeal.EdgeFood:
		ids := make([]ent.Value, 0, len(m.food))
		for id := range m.food {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMealMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfood != nil {
		edges = append(edges, usermeal.EdgeFood)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMealMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case usermeal.EdgeFood:
		ids := make([]ent.Value, 0, len(m.removedfood))
		for id := range m.removedfood {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMealMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfood {
		edges = append(edges, usermeal.EdgeFood)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMealMutation) EdgeCleared(name string) bool {
	switch name {
	case usermeal.EdgeFood:
		return m.clearedfood
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMealMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown UserMeal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMealMutation) ResetEdge(name string) error {
	switch name {
	case usermeal.EdgeFood:
		m.ResetFood()
		return nil
	}
	return fmt.Errorf("unknown UserMeal edge %s", name)
}

// UserMealFoodMutation represents an operation that mutates the UserMealFood nodes in the graph.
type UserMealFoodMutation struct {
	config
	op               Op
	typ              string
	id               *int
	clearedFields    map[string]struct{}
	user_meal        *int
	cleareduser_meal bool
	food             *uuid.UUID
	clearedfood      bool
	done             bool
	oldValue         func(context.Context) (*UserMealFood, error)
	predicates       []predicate.UserMealFood
}

var _ ent.Mutation = (*UserMealFoodMutation)(nil)

// usermealfoodOption allows management of the mutation configuration using functional options.
type usermealfoodOption func(*UserMealFoodMutation)

// newUserMealFoodMutation creates new mutation for the UserMealFood entity.
func newUserMealFoodMutation(c config, op Op, opts ...usermealfoodOption) *UserMealFoodMutation {
	m := &UserMealFoodMutation{
		config:        c,
		op:            op,
		typ:           TypeUserMealFood,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserMealFoodID sets the ID field of the mutation.
func withUserMealFoodID(id int) usermealfoodOption {
	return func(m *UserMealFoodMutation) {
		var (
			err   error
			once  sync.Once
			value *UserMealFood
		)
		m.oldValue = func(ctx context.Context) (*UserMealFood, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserMealFood.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserMealFood sets the old UserMealFood of the mutation.
func withUserMealFood(node *UserMealFood) usermealfoodOption {
	return func(m *UserMealFoodMutation) {
		m.oldValue = func(context.Context) (*UserMealFood, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMealFoodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMealFoodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMealFoodMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMealFoodMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserMealFood.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserMealID sets the "user_meal" edge to the UserMeal entity by id.
func (m *UserMealFoodMutation) SetUserMealID(id int) {
	m.user_meal = &id
}

// ClearUserMeal clears the "user_meal" edge to the UserMeal entity.
func (m *UserMealFoodMutation) ClearUserMeal() {
	m.cleareduser_meal = true
}

// UserMealCleared reports if the "user_meal" edge to the UserMeal entity was cleared.
func (m *UserMealFoodMutation) UserMealCleared() bool {
	return m.cleareduser_meal
}

// UserMealID returns the "user_meal" edge ID in the mutation.
func (m *UserMealFoodMutation) UserMealID() (id int, exists bool) {
	if m.user_meal != nil {
		return *m.user_meal, true
	}
	return
}

// UserMealIDs returns the "user_meal" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserMealID instead. It exists only for internal usage by the builders.
func (m *UserMealFoodMutation) UserMealIDs() (ids []int) {
	if id := m.user_meal; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserMeal resets all changes to the "user_meal" edge.
func (m *UserMealFoodMutation) ResetUserMeal() {
	m.user_meal = nil
	m.cleareduser_meal = false
}

// SetFoodID sets the "food" edge to the Food entity by id.
func (m *UserMealFoodMutation) SetFoodID(id uuid.UUID) {
	m.food = &id
}

// ClearFood clears the "food" edge to the Food entity.
func (m *UserMealFoodMutation) ClearFood() {
	m.clearedfood = true
}

// FoodCleared reports if the "food" edge to the Food entity was cleared.
func (m *UserMealFoodMutation) FoodCleared() bool {
	return m.clearedfood
}

// FoodID returns the "food" edge ID in the mutation.
func (m *UserMealFoodMutation) FoodID() (id uuid.UUID, exists bool) {
	if m.food != nil {
		return *m.food, true
	}
	return
}

// FoodIDs returns the "food" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FoodID instead. It exists only for internal usage by the builders.
func (m *UserMealFoodMutation) FoodIDs() (ids []uuid.UUID) {
	if id := m.food; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFood resets all changes to the "food" edge.
func (m *UserMealFoodMutation) ResetFood() {
	m.food = nil
	m.clearedfood = false
}

// Where appends a list predicates to the UserMealFoodMutation builder.
func (m *UserMealFoodMutation) Where(ps ...predicate.UserMealFood) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMealFoodMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMealFoodMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserMealFood, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMealFoodMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMealFoodMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserMealFood).
func (m *UserMealFoodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMealFoodMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMealFoodMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMealFoodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown UserMealFood field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMealFoodMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserMealFood field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMealFoodMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMealFoodMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMealFoodMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown UserMealFood numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMealFoodMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMealFoodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMealFoodMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserMealFood nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMealFoodMutation) ResetField(name string) error {
	return fmt.Errorf("unknown UserMealFood field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMealFoodMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user_meal != nil {
		edges = append(edges, usermealfood.EdgeUserMeal)
	}
	if m.food != nil {
		edges = append(edges, usermealfood.EdgeFood)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMealFoodMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usermealfood.EdgeUserMeal:
		if id := m.user_meal; id != nil {
			return []ent.Value{*id}
		}
	case usermealfood.EdgeFood:
		if id := m.food; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMealFoodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMealFoodMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMealFoodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser_meal {
		edges = append(edges, usermealfood.EdgeUserMeal)
	}
	if m.clearedfood {
		edges = append(edges, usermealfood.EdgeFood)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMealFoodMutation) EdgeCleared(name string) bool {
	switch name {
	case usermealfood.EdgeUserMeal:
		return m.cleareduser_meal
	case usermealfood.EdgeFood:
		return m.clearedfood
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMealFoodMutation) ClearEdge(name string) error {
	switch name {
	case usermealfood.EdgeUserMeal:
		m.ClearUserMeal()
		return nil
	case usermealfood.EdgeFood:
		m.ClearFood()
		return nil
	}
	return fmt.Errorf("unknown UserMealFood unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMealFoodMutation) ResetEdge(name string) error {
	switch name {
	case usermealfood.EdgeUserMeal:
		m.ResetUserMeal()
		return nil
	case usermealfood.EdgeFood:
		m.ResetFood()
		return nil
	}
	return fmt.Errorf("unknown UserMealFood edge %s", name)
}
