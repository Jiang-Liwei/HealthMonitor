// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/food"
	"HealthMonitor/ent/foodnutrients"
	"HealthMonitor/ent/nutrient"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FoodNutrients is the model entity for the FoodNutrients schema.
type FoodNutrients struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FoodNutrientsQuery when eager-loading is set.
	Edges         FoodNutrientsEdges `json:"edges"`
	food_nutrient *uuid.UUID
	nutrient_food *uuid.UUID
	selectValues  sql.SelectValues
}

// FoodNutrientsEdges holds the relations/edges for other nodes in the graph.
type FoodNutrientsEdges struct {
	// 关联食物
	Food *Food `json:"food,omitempty"`
	// 关联营养
	Nutrient *Nutrient `json:"nutrient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FoodOrErr returns the Food value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FoodNutrientsEdges) FoodOrErr() (*Food, error) {
	if e.Food != nil {
		return e.Food, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: food.Label}
	}
	return nil, &NotLoadedError{edge: "food"}
}

// NutrientOrErr returns the Nutrient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FoodNutrientsEdges) NutrientOrErr() (*Nutrient, error) {
	if e.Nutrient != nil {
		return e.Nutrient, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: nutrient.Label}
	}
	return nil, &NotLoadedError{edge: "nutrient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FoodNutrients) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case foodnutrients.FieldID:
			values[i] = new(sql.NullInt64)
		case foodnutrients.ForeignKeys[0]: // food_nutrient
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case foodnutrients.ForeignKeys[1]: // nutrient_food
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FoodNutrients fields.
func (fn *FoodNutrients) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case foodnutrients.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fn.ID = int(value.Int64)
		case foodnutrients.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field food_nutrient", values[i])
			} else if value.Valid {
				fn.food_nutrient = new(uuid.UUID)
				*fn.food_nutrient = *value.S.(*uuid.UUID)
			}
		case foodnutrients.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field nutrient_food", values[i])
			} else if value.Valid {
				fn.nutrient_food = new(uuid.UUID)
				*fn.nutrient_food = *value.S.(*uuid.UUID)
			}
		default:
			fn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FoodNutrients.
// This includes values selected through modifiers, order, etc.
func (fn *FoodNutrients) Value(name string) (ent.Value, error) {
	return fn.selectValues.Get(name)
}

// QueryFood queries the "food" edge of the FoodNutrients entity.
func (fn *FoodNutrients) QueryFood() *FoodQuery {
	return NewFoodNutrientsClient(fn.config).QueryFood(fn)
}

// QueryNutrient queries the "nutrient" edge of the FoodNutrients entity.
func (fn *FoodNutrients) QueryNutrient() *NutrientQuery {
	return NewFoodNutrientsClient(fn.config).QueryNutrient(fn)
}

// Update returns a builder for updating this FoodNutrients.
// Note that you need to call FoodNutrients.Unwrap() before calling this method if this FoodNutrients
// was returned from a transaction, and the transaction was committed or rolled back.
func (fn *FoodNutrients) Update() *FoodNutrientsUpdateOne {
	return NewFoodNutrientsClient(fn.config).UpdateOne(fn)
}

// Unwrap unwraps the FoodNutrients entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fn *FoodNutrients) Unwrap() *FoodNutrients {
	_tx, ok := fn.config.driver.(*txDriver)
	if !ok {
		panic("ent: FoodNutrients is not a transactional entity")
	}
	fn.config.driver = _tx.drv
	return fn
}

// String implements the fmt.Stringer.
func (fn *FoodNutrients) String() string {
	var builder strings.Builder
	builder.WriteString("FoodNutrients(")
	builder.WriteString(fmt.Sprintf("id=%v", fn.ID))
	builder.WriteByte(')')
	return builder.String()
}

// FoodNutrientsSlice is a parsable slice of FoodNutrients.
type FoodNutrientsSlice []*FoodNutrients
