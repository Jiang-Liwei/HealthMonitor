// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/food"
	"healthmonitor/ent/foodnutrientsrelationships"
	"healthmonitor/ent/nutrient"
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FoodNutrientsRelationshipsUpdate is the builder for updating FoodNutrientsRelationships entities.
type FoodNutrientsRelationshipsUpdate struct {
	config
	hooks    []Hook
	mutation *FoodNutrientsRelationshipsMutation
}

// Where appends a list predicates to the FoodNutrientsRelationshipsUpdate builder.
func (fnru *FoodNutrientsRelationshipsUpdate) Where(ps ...predicate.FoodNutrientsRelationships) *FoodNutrientsRelationshipsUpdate {
	fnru.mutation.Where(ps...)
	return fnru
}

// SetFoodID sets the "food" edge to the Food entity by ID.
func (fnru *FoodNutrientsRelationshipsUpdate) SetFoodID(id uuid.UUID) *FoodNutrientsRelationshipsUpdate {
	fnru.mutation.SetFoodID(id)
	return fnru
}

// SetNillableFoodID sets the "food" edge to the Food entity by ID if the given value is not nil.
func (fnru *FoodNutrientsRelationshipsUpdate) SetNillableFoodID(id *uuid.UUID) *FoodNutrientsRelationshipsUpdate {
	if id != nil {
		fnru = fnru.SetFoodID(*id)
	}
	return fnru
}

// SetFood sets the "food" edge to the Food entity.
func (fnru *FoodNutrientsRelationshipsUpdate) SetFood(f *Food) *FoodNutrientsRelationshipsUpdate {
	return fnru.SetFoodID(f.ID)
}

// SetNutrientID sets the "nutrient" edge to the Nutrient entity by ID.
func (fnru *FoodNutrientsRelationshipsUpdate) SetNutrientID(id uuid.UUID) *FoodNutrientsRelationshipsUpdate {
	fnru.mutation.SetNutrientID(id)
	return fnru
}

// SetNillableNutrientID sets the "nutrient" edge to the Nutrient entity by ID if the given value is not nil.
func (fnru *FoodNutrientsRelationshipsUpdate) SetNillableNutrientID(id *uuid.UUID) *FoodNutrientsRelationshipsUpdate {
	if id != nil {
		fnru = fnru.SetNutrientID(*id)
	}
	return fnru
}

// SetNutrient sets the "nutrient" edge to the Nutrient entity.
func (fnru *FoodNutrientsRelationshipsUpdate) SetNutrient(n *Nutrient) *FoodNutrientsRelationshipsUpdate {
	return fnru.SetNutrientID(n.ID)
}

// Mutation returns the FoodNutrientsRelationshipsMutation object of the builder.
func (fnru *FoodNutrientsRelationshipsUpdate) Mutation() *FoodNutrientsRelationshipsMutation {
	return fnru.mutation
}

// ClearFood clears the "food" edge to the Food entity.
func (fnru *FoodNutrientsRelationshipsUpdate) ClearFood() *FoodNutrientsRelationshipsUpdate {
	fnru.mutation.ClearFood()
	return fnru
}

// ClearNutrient clears the "nutrient" edge to the Nutrient entity.
func (fnru *FoodNutrientsRelationshipsUpdate) ClearNutrient() *FoodNutrientsRelationshipsUpdate {
	fnru.mutation.ClearNutrient()
	return fnru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fnru *FoodNutrientsRelationshipsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fnru.sqlSave, fnru.mutation, fnru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fnru *FoodNutrientsRelationshipsUpdate) SaveX(ctx context.Context) int {
	affected, err := fnru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fnru *FoodNutrientsRelationshipsUpdate) Exec(ctx context.Context) error {
	_, err := fnru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnru *FoodNutrientsRelationshipsUpdate) ExecX(ctx context.Context) {
	if err := fnru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fnru *FoodNutrientsRelationshipsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(foodnutrientsrelationships.Table, foodnutrientsrelationships.Columns, sqlgraph.NewFieldSpec(foodnutrientsrelationships.FieldID, field.TypeInt))
	if ps := fnru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fnru.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.FoodTable,
			Columns: []string{foodnutrientsrelationships.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fnru.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.FoodTable,
			Columns: []string{foodnutrientsrelationships.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fnru.mutation.NutrientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.NutrientTable,
			Columns: []string{foodnutrientsrelationships.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fnru.mutation.NutrientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.NutrientTable,
			Columns: []string{foodnutrientsrelationships.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fnru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foodnutrientsrelationships.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fnru.mutation.done = true
	return n, nil
}

// FoodNutrientsRelationshipsUpdateOne is the builder for updating a single FoodNutrientsRelationships entity.
type FoodNutrientsRelationshipsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FoodNutrientsRelationshipsMutation
}

// SetFoodID sets the "food" edge to the Food entity by ID.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) SetFoodID(id uuid.UUID) *FoodNutrientsRelationshipsUpdateOne {
	fnruo.mutation.SetFoodID(id)
	return fnruo
}

// SetNillableFoodID sets the "food" edge to the Food entity by ID if the given value is not nil.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) SetNillableFoodID(id *uuid.UUID) *FoodNutrientsRelationshipsUpdateOne {
	if id != nil {
		fnruo = fnruo.SetFoodID(*id)
	}
	return fnruo
}

// SetFood sets the "food" edge to the Food entity.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) SetFood(f *Food) *FoodNutrientsRelationshipsUpdateOne {
	return fnruo.SetFoodID(f.ID)
}

// SetNutrientID sets the "nutrient" edge to the Nutrient entity by ID.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) SetNutrientID(id uuid.UUID) *FoodNutrientsRelationshipsUpdateOne {
	fnruo.mutation.SetNutrientID(id)
	return fnruo
}

// SetNillableNutrientID sets the "nutrient" edge to the Nutrient entity by ID if the given value is not nil.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) SetNillableNutrientID(id *uuid.UUID) *FoodNutrientsRelationshipsUpdateOne {
	if id != nil {
		fnruo = fnruo.SetNutrientID(*id)
	}
	return fnruo
}

// SetNutrient sets the "nutrient" edge to the Nutrient entity.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) SetNutrient(n *Nutrient) *FoodNutrientsRelationshipsUpdateOne {
	return fnruo.SetNutrientID(n.ID)
}

// Mutation returns the FoodNutrientsRelationshipsMutation object of the builder.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) Mutation() *FoodNutrientsRelationshipsMutation {
	return fnruo.mutation
}

// ClearFood clears the "food" edge to the Food entity.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) ClearFood() *FoodNutrientsRelationshipsUpdateOne {
	fnruo.mutation.ClearFood()
	return fnruo
}

// ClearNutrient clears the "nutrient" edge to the Nutrient entity.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) ClearNutrient() *FoodNutrientsRelationshipsUpdateOne {
	fnruo.mutation.ClearNutrient()
	return fnruo
}

// Where appends a list predicates to the FoodNutrientsRelationshipsUpdate builder.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) Where(ps ...predicate.FoodNutrientsRelationships) *FoodNutrientsRelationshipsUpdateOne {
	fnruo.mutation.Where(ps...)
	return fnruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) Select(field string, fields ...string) *FoodNutrientsRelationshipsUpdateOne {
	fnruo.fields = append([]string{field}, fields...)
	return fnruo
}

// Save executes the query and returns the updated FoodNutrientsRelationships entity.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) Save(ctx context.Context) (*FoodNutrientsRelationships, error) {
	return withHooks(ctx, fnruo.sqlSave, fnruo.mutation, fnruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) SaveX(ctx context.Context) *FoodNutrientsRelationships {
	node, err := fnruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) Exec(ctx context.Context) error {
	_, err := fnruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnruo *FoodNutrientsRelationshipsUpdateOne) ExecX(ctx context.Context) {
	if err := fnruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fnruo *FoodNutrientsRelationshipsUpdateOne) sqlSave(ctx context.Context) (_node *FoodNutrientsRelationships, err error) {
	_spec := sqlgraph.NewUpdateSpec(foodnutrientsrelationships.Table, foodnutrientsrelationships.Columns, sqlgraph.NewFieldSpec(foodnutrientsrelationships.FieldID, field.TypeInt))
	id, ok := fnruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FoodNutrientsRelationships.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fnruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, foodnutrientsrelationships.FieldID)
		for _, f := range fields {
			if !foodnutrientsrelationships.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != foodnutrientsrelationships.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fnruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fnruo.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.FoodTable,
			Columns: []string{foodnutrientsrelationships.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fnruo.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.FoodTable,
			Columns: []string{foodnutrientsrelationships.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fnruo.mutation.NutrientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.NutrientTable,
			Columns: []string{foodnutrientsrelationships.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fnruo.mutation.NutrientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.NutrientTable,
			Columns: []string{foodnutrientsrelationships.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FoodNutrientsRelationships{config: fnruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fnruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foodnutrientsrelationships.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fnruo.mutation.done = true
	return _node, nil
}
