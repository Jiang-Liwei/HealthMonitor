// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthmonitor/ent/adminmenu"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// AdminMenu is the model entity for the AdminMenu schema.
type AdminMenu struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminMenu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminmenu.FieldOrder:
			values[i] = new(sql.NullInt64)
		case adminmenu.FieldName, adminmenu.FieldIcon, adminmenu.FieldPath:
			values[i] = new(sql.NullString)
		case adminmenu.FieldCreatedAt, adminmenu.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case adminmenu.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminMenu fields.
func (am *AdminMenu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminmenu.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				am.ID = *value
			}
		case adminmenu.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				am.Name = value.String
			}
		case adminmenu.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				am.Icon = value.String
			}
		case adminmenu.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				am.Path = value.String
			}
		case adminmenu.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				am.Order = int(value.Int64)
			}
		case adminmenu.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				am.CreatedAt = value.Time
			}
		case adminmenu.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				am.UpdatedAt = value.Time
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminMenu.
// This includes values selected through modifiers, order, etc.
func (am *AdminMenu) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// Update returns a builder for updating this AdminMenu.
// Note that you need to call AdminMenu.Unwrap() before calling this method if this AdminMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AdminMenu) Update() *AdminMenuUpdateOne {
	return NewAdminMenuClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the AdminMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AdminMenu) Unwrap() *AdminMenu {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminMenu is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AdminMenu) String() string {
	var builder strings.Builder
	builder.WriteString("AdminMenu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("name=")
	builder.WriteString(am.Name)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(am.Icon)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(am.Path)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", am.Order))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(am.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(am.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AdminMenus is a parsable slice of AdminMenu.
type AdminMenus []*AdminMenu
