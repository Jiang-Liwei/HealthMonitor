// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/adminmenu"
	"healthmonitor/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminMenuUpdate is the builder for updating AdminMenu entities.
type AdminMenuUpdate struct {
	config
	hooks    []Hook
	mutation *AdminMenuMutation
}

// Where appends a list predicates to the AdminMenuUpdate builder.
func (amu *AdminMenuUpdate) Where(ps ...predicate.AdminMenu) *AdminMenuUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetName sets the "name" field.
func (amu *AdminMenuUpdate) SetName(s string) *AdminMenuUpdate {
	amu.mutation.SetName(s)
	return amu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amu *AdminMenuUpdate) SetNillableName(s *string) *AdminMenuUpdate {
	if s != nil {
		amu.SetName(*s)
	}
	return amu
}

// SetIcon sets the "icon" field.
func (amu *AdminMenuUpdate) SetIcon(s string) *AdminMenuUpdate {
	amu.mutation.SetIcon(s)
	return amu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amu *AdminMenuUpdate) SetNillableIcon(s *string) *AdminMenuUpdate {
	if s != nil {
		amu.SetIcon(*s)
	}
	return amu
}

// ClearIcon clears the value of the "icon" field.
func (amu *AdminMenuUpdate) ClearIcon() *AdminMenuUpdate {
	amu.mutation.ClearIcon()
	return amu
}

// SetPath sets the "path" field.
func (amu *AdminMenuUpdate) SetPath(s string) *AdminMenuUpdate {
	amu.mutation.SetPath(s)
	return amu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (amu *AdminMenuUpdate) SetNillablePath(s *string) *AdminMenuUpdate {
	if s != nil {
		amu.SetPath(*s)
	}
	return amu
}

// SetOrder sets the "order" field.
func (amu *AdminMenuUpdate) SetOrder(i int) *AdminMenuUpdate {
	amu.mutation.ResetOrder()
	amu.mutation.SetOrder(i)
	return amu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (amu *AdminMenuUpdate) SetNillableOrder(i *int) *AdminMenuUpdate {
	if i != nil {
		amu.SetOrder(*i)
	}
	return amu
}

// AddOrder adds i to the "order" field.
func (amu *AdminMenuUpdate) AddOrder(i int) *AdminMenuUpdate {
	amu.mutation.AddOrder(i)
	return amu
}

// SetCreatedAt sets the "created_at" field.
func (amu *AdminMenuUpdate) SetCreatedAt(t time.Time) *AdminMenuUpdate {
	amu.mutation.SetCreatedAt(t)
	return amu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amu *AdminMenuUpdate) SetNillableCreatedAt(t *time.Time) *AdminMenuUpdate {
	if t != nil {
		amu.SetCreatedAt(*t)
	}
	return amu
}

// SetUpdatedAt sets the "updated_at" field.
func (amu *AdminMenuUpdate) SetUpdatedAt(t time.Time) *AdminMenuUpdate {
	amu.mutation.SetUpdatedAt(t)
	return amu
}

// Mutation returns the AdminMenuMutation object of the builder.
func (amu *AdminMenuUpdate) Mutation() *AdminMenuMutation {
	return amu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AdminMenuUpdate) Save(ctx context.Context) (int, error) {
	amu.defaults()
	return withHooks(ctx, amu.sqlSave, amu.mutation, amu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AdminMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AdminMenuUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AdminMenuUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amu *AdminMenuUpdate) defaults() {
	if _, ok := amu.mutation.UpdatedAt(); !ok {
		v := adminmenu.UpdateDefaultUpdatedAt()
		amu.mutation.SetUpdatedAt(v)
	}
}

func (amu *AdminMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminmenu.Table, adminmenu.Columns, sqlgraph.NewFieldSpec(adminmenu.FieldID, field.TypeUUID))
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.Name(); ok {
		_spec.SetField(adminmenu.FieldName, field.TypeString, value)
	}
	if value, ok := amu.mutation.Icon(); ok {
		_spec.SetField(adminmenu.FieldIcon, field.TypeString, value)
	}
	if amu.mutation.IconCleared() {
		_spec.ClearField(adminmenu.FieldIcon, field.TypeString)
	}
	if value, ok := amu.mutation.Path(); ok {
		_spec.SetField(adminmenu.FieldPath, field.TypeString, value)
	}
	if value, ok := amu.mutation.Order(); ok {
		_spec.SetField(adminmenu.FieldOrder, field.TypeInt, value)
	}
	if value, ok := amu.mutation.AddedOrder(); ok {
		_spec.AddField(adminmenu.FieldOrder, field.TypeInt, value)
	}
	if value, ok := amu.mutation.CreatedAt(); ok {
		_spec.SetField(adminmenu.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := amu.mutation.UpdatedAt(); ok {
		_spec.SetField(adminmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amu.mutation.done = true
	return n, nil
}

// AdminMenuUpdateOne is the builder for updating a single AdminMenu entity.
type AdminMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminMenuMutation
}

// SetName sets the "name" field.
func (amuo *AdminMenuUpdateOne) SetName(s string) *AdminMenuUpdateOne {
	amuo.mutation.SetName(s)
	return amuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amuo *AdminMenuUpdateOne) SetNillableName(s *string) *AdminMenuUpdateOne {
	if s != nil {
		amuo.SetName(*s)
	}
	return amuo
}

// SetIcon sets the "icon" field.
func (amuo *AdminMenuUpdateOne) SetIcon(s string) *AdminMenuUpdateOne {
	amuo.mutation.SetIcon(s)
	return amuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amuo *AdminMenuUpdateOne) SetNillableIcon(s *string) *AdminMenuUpdateOne {
	if s != nil {
		amuo.SetIcon(*s)
	}
	return amuo
}

// ClearIcon clears the value of the "icon" field.
func (amuo *AdminMenuUpdateOne) ClearIcon() *AdminMenuUpdateOne {
	amuo.mutation.ClearIcon()
	return amuo
}

// SetPath sets the "path" field.
func (amuo *AdminMenuUpdateOne) SetPath(s string) *AdminMenuUpdateOne {
	amuo.mutation.SetPath(s)
	return amuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (amuo *AdminMenuUpdateOne) SetNillablePath(s *string) *AdminMenuUpdateOne {
	if s != nil {
		amuo.SetPath(*s)
	}
	return amuo
}

// SetOrder sets the "order" field.
func (amuo *AdminMenuUpdateOne) SetOrder(i int) *AdminMenuUpdateOne {
	amuo.mutation.ResetOrder()
	amuo.mutation.SetOrder(i)
	return amuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (amuo *AdminMenuUpdateOne) SetNillableOrder(i *int) *AdminMenuUpdateOne {
	if i != nil {
		amuo.SetOrder(*i)
	}
	return amuo
}

// AddOrder adds i to the "order" field.
func (amuo *AdminMenuUpdateOne) AddOrder(i int) *AdminMenuUpdateOne {
	amuo.mutation.AddOrder(i)
	return amuo
}

// SetCreatedAt sets the "created_at" field.
func (amuo *AdminMenuUpdateOne) SetCreatedAt(t time.Time) *AdminMenuUpdateOne {
	amuo.mutation.SetCreatedAt(t)
	return amuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amuo *AdminMenuUpdateOne) SetNillableCreatedAt(t *time.Time) *AdminMenuUpdateOne {
	if t != nil {
		amuo.SetCreatedAt(*t)
	}
	return amuo
}

// SetUpdatedAt sets the "updated_at" field.
func (amuo *AdminMenuUpdateOne) SetUpdatedAt(t time.Time) *AdminMenuUpdateOne {
	amuo.mutation.SetUpdatedAt(t)
	return amuo
}

// Mutation returns the AdminMenuMutation object of the builder.
func (amuo *AdminMenuUpdateOne) Mutation() *AdminMenuMutation {
	return amuo.mutation
}

// Where appends a list predicates to the AdminMenuUpdate builder.
func (amuo *AdminMenuUpdateOne) Where(ps ...predicate.AdminMenu) *AdminMenuUpdateOne {
	amuo.mutation.Where(ps...)
	return amuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AdminMenuUpdateOne) Select(field string, fields ...string) *AdminMenuUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AdminMenu entity.
func (amuo *AdminMenuUpdateOne) Save(ctx context.Context) (*AdminMenu, error) {
	amuo.defaults()
	return withHooks(ctx, amuo.sqlSave, amuo.mutation, amuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AdminMenuUpdateOne) SaveX(ctx context.Context) *AdminMenu {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AdminMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AdminMenuUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amuo *AdminMenuUpdateOne) defaults() {
	if _, ok := amuo.mutation.UpdatedAt(); !ok {
		v := adminmenu.UpdateDefaultUpdatedAt()
		amuo.mutation.SetUpdatedAt(v)
	}
}

func (amuo *AdminMenuUpdateOne) sqlSave(ctx context.Context) (_node *AdminMenu, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminmenu.Table, adminmenu.Columns, sqlgraph.NewFieldSpec(adminmenu.FieldID, field.TypeUUID))
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminmenu.FieldID)
		for _, f := range fields {
			if !adminmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.Name(); ok {
		_spec.SetField(adminmenu.FieldName, field.TypeString, value)
	}
	if value, ok := amuo.mutation.Icon(); ok {
		_spec.SetField(adminmenu.FieldIcon, field.TypeString, value)
	}
	if amuo.mutation.IconCleared() {
		_spec.ClearField(adminmenu.FieldIcon, field.TypeString)
	}
	if value, ok := amuo.mutation.Path(); ok {
		_spec.SetField(adminmenu.FieldPath, field.TypeString, value)
	}
	if value, ok := amuo.mutation.Order(); ok {
		_spec.SetField(adminmenu.FieldOrder, field.TypeInt, value)
	}
	if value, ok := amuo.mutation.AddedOrder(); ok {
		_spec.AddField(adminmenu.FieldOrder, field.TypeInt, value)
	}
	if value, ok := amuo.mutation.CreatedAt(); ok {
		_spec.SetField(adminmenu.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := amuo.mutation.UpdatedAt(); ok {
		_spec.SetField(adminmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &AdminMenu{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amuo.mutation.done = true
	return _node, nil
}
