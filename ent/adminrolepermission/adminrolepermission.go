// Code generated by ent, DO NOT EDIT.

package adminrolepermission

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the adminrolepermission type in the database.
	Label = "admin_role_permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgePermission holds the string denoting the permission edge name in mutations.
	EdgePermission = "permission"
	// Table holds the table name of the adminrolepermission in the database.
	Table = "admin_role_permissions"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "admin_role_permissions"
	// RoleInverseTable is the table name for the AdminRoles entity.
	// It exists in this package in order to avoid circular dependency with the "adminroles" package.
	RoleInverseTable = "admin_roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "admin_roles_permissions"
	// PermissionTable is the table that holds the permission relation/edge.
	PermissionTable = "admin_role_permissions"
	// PermissionInverseTable is the table name for the AdminPermission entity.
	// It exists in this package in order to avoid circular dependency with the "adminpermission" package.
	PermissionInverseTable = "admin_permissions"
	// PermissionColumn is the table column denoting the permission relation/edge.
	PermissionColumn = "admin_permission_roles"
)

// Columns holds all SQL columns for adminrolepermission fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "admin_role_permissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"admin_permission_roles",
	"admin_roles_permissions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AdminRolePermission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRoleField orders the results by role field.
func ByRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), sql.OrderByField(field, opts...))
	}
}

// ByPermissionField orders the results by permission field.
func ByPermissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionStep(), sql.OrderByField(field, opts...))
	}
}
func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
	)
}
func newPermissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PermissionTable, PermissionColumn),
	)
}
