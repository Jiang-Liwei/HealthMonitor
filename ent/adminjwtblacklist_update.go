// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/adminjwtblacklist"
	"HealthMonitor/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminJWTBlacklistUpdate is the builder for updating AdminJWTBlacklist entities.
type AdminJWTBlacklistUpdate struct {
	config
	hooks    []Hook
	mutation *AdminJWTBlacklistMutation
}

// Where appends a list predicates to the AdminJWTBlacklistUpdate builder.
func (ajbu *AdminJWTBlacklistUpdate) Where(ps ...predicate.AdminJWTBlacklist) *AdminJWTBlacklistUpdate {
	ajbu.mutation.Where(ps...)
	return ajbu
}

// SetJti sets the "jti" field.
func (ajbu *AdminJWTBlacklistUpdate) SetJti(s string) *AdminJWTBlacklistUpdate {
	ajbu.mutation.SetJti(s)
	return ajbu
}

// SetNillableJti sets the "jti" field if the given value is not nil.
func (ajbu *AdminJWTBlacklistUpdate) SetNillableJti(s *string) *AdminJWTBlacklistUpdate {
	if s != nil {
		ajbu.SetJti(*s)
	}
	return ajbu
}

// SetExpiresAt sets the "expires_at" field.
func (ajbu *AdminJWTBlacklistUpdate) SetExpiresAt(t time.Time) *AdminJWTBlacklistUpdate {
	ajbu.mutation.SetExpiresAt(t)
	return ajbu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ajbu *AdminJWTBlacklistUpdate) SetNillableExpiresAt(t *time.Time) *AdminJWTBlacklistUpdate {
	if t != nil {
		ajbu.SetExpiresAt(*t)
	}
	return ajbu
}

// SetRevokedAt sets the "revoked_at" field.
func (ajbu *AdminJWTBlacklistUpdate) SetRevokedAt(t time.Time) *AdminJWTBlacklistUpdate {
	ajbu.mutation.SetRevokedAt(t)
	return ajbu
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (ajbu *AdminJWTBlacklistUpdate) SetNillableRevokedAt(t *time.Time) *AdminJWTBlacklistUpdate {
	if t != nil {
		ajbu.SetRevokedAt(*t)
	}
	return ajbu
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (ajbu *AdminJWTBlacklistUpdate) ClearRevokedAt() *AdminJWTBlacklistUpdate {
	ajbu.mutation.ClearRevokedAt()
	return ajbu
}

// Mutation returns the AdminJWTBlacklistMutation object of the builder.
func (ajbu *AdminJWTBlacklistUpdate) Mutation() *AdminJWTBlacklistMutation {
	return ajbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ajbu *AdminJWTBlacklistUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ajbu.sqlSave, ajbu.mutation, ajbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ajbu *AdminJWTBlacklistUpdate) SaveX(ctx context.Context) int {
	affected, err := ajbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ajbu *AdminJWTBlacklistUpdate) Exec(ctx context.Context) error {
	_, err := ajbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ajbu *AdminJWTBlacklistUpdate) ExecX(ctx context.Context) {
	if err := ajbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ajbu *AdminJWTBlacklistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminjwtblacklist.Table, adminjwtblacklist.Columns, sqlgraph.NewFieldSpec(adminjwtblacklist.FieldID, field.TypeInt))
	if ps := ajbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ajbu.mutation.Jti(); ok {
		_spec.SetField(adminjwtblacklist.FieldJti, field.TypeString, value)
	}
	if value, ok := ajbu.mutation.ExpiresAt(); ok {
		_spec.SetField(adminjwtblacklist.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := ajbu.mutation.RevokedAt(); ok {
		_spec.SetField(adminjwtblacklist.FieldRevokedAt, field.TypeTime, value)
	}
	if ajbu.mutation.RevokedAtCleared() {
		_spec.ClearField(adminjwtblacklist.FieldRevokedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ajbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminjwtblacklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ajbu.mutation.done = true
	return n, nil
}

// AdminJWTBlacklistUpdateOne is the builder for updating a single AdminJWTBlacklist entity.
type AdminJWTBlacklistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminJWTBlacklistMutation
}

// SetJti sets the "jti" field.
func (ajbuo *AdminJWTBlacklistUpdateOne) SetJti(s string) *AdminJWTBlacklistUpdateOne {
	ajbuo.mutation.SetJti(s)
	return ajbuo
}

// SetNillableJti sets the "jti" field if the given value is not nil.
func (ajbuo *AdminJWTBlacklistUpdateOne) SetNillableJti(s *string) *AdminJWTBlacklistUpdateOne {
	if s != nil {
		ajbuo.SetJti(*s)
	}
	return ajbuo
}

// SetExpiresAt sets the "expires_at" field.
func (ajbuo *AdminJWTBlacklistUpdateOne) SetExpiresAt(t time.Time) *AdminJWTBlacklistUpdateOne {
	ajbuo.mutation.SetExpiresAt(t)
	return ajbuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ajbuo *AdminJWTBlacklistUpdateOne) SetNillableExpiresAt(t *time.Time) *AdminJWTBlacklistUpdateOne {
	if t != nil {
		ajbuo.SetExpiresAt(*t)
	}
	return ajbuo
}

// SetRevokedAt sets the "revoked_at" field.
func (ajbuo *AdminJWTBlacklistUpdateOne) SetRevokedAt(t time.Time) *AdminJWTBlacklistUpdateOne {
	ajbuo.mutation.SetRevokedAt(t)
	return ajbuo
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (ajbuo *AdminJWTBlacklistUpdateOne) SetNillableRevokedAt(t *time.Time) *AdminJWTBlacklistUpdateOne {
	if t != nil {
		ajbuo.SetRevokedAt(*t)
	}
	return ajbuo
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (ajbuo *AdminJWTBlacklistUpdateOne) ClearRevokedAt() *AdminJWTBlacklistUpdateOne {
	ajbuo.mutation.ClearRevokedAt()
	return ajbuo
}

// Mutation returns the AdminJWTBlacklistMutation object of the builder.
func (ajbuo *AdminJWTBlacklistUpdateOne) Mutation() *AdminJWTBlacklistMutation {
	return ajbuo.mutation
}

// Where appends a list predicates to the AdminJWTBlacklistUpdate builder.
func (ajbuo *AdminJWTBlacklistUpdateOne) Where(ps ...predicate.AdminJWTBlacklist) *AdminJWTBlacklistUpdateOne {
	ajbuo.mutation.Where(ps...)
	return ajbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ajbuo *AdminJWTBlacklistUpdateOne) Select(field string, fields ...string) *AdminJWTBlacklistUpdateOne {
	ajbuo.fields = append([]string{field}, fields...)
	return ajbuo
}

// Save executes the query and returns the updated AdminJWTBlacklist entity.
func (ajbuo *AdminJWTBlacklistUpdateOne) Save(ctx context.Context) (*AdminJWTBlacklist, error) {
	return withHooks(ctx, ajbuo.sqlSave, ajbuo.mutation, ajbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ajbuo *AdminJWTBlacklistUpdateOne) SaveX(ctx context.Context) *AdminJWTBlacklist {
	node, err := ajbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ajbuo *AdminJWTBlacklistUpdateOne) Exec(ctx context.Context) error {
	_, err := ajbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ajbuo *AdminJWTBlacklistUpdateOne) ExecX(ctx context.Context) {
	if err := ajbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ajbuo *AdminJWTBlacklistUpdateOne) sqlSave(ctx context.Context) (_node *AdminJWTBlacklist, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminjwtblacklist.Table, adminjwtblacklist.Columns, sqlgraph.NewFieldSpec(adminjwtblacklist.FieldID, field.TypeInt))
	id, ok := ajbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminJWTBlacklist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ajbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminjwtblacklist.FieldID)
		for _, f := range fields {
			if !adminjwtblacklist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminjwtblacklist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ajbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ajbuo.mutation.Jti(); ok {
		_spec.SetField(adminjwtblacklist.FieldJti, field.TypeString, value)
	}
	if value, ok := ajbuo.mutation.ExpiresAt(); ok {
		_spec.SetField(adminjwtblacklist.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := ajbuo.mutation.RevokedAt(); ok {
		_spec.SetField(adminjwtblacklist.FieldRevokedAt, field.TypeTime, value)
	}
	if ajbuo.mutation.RevokedAtCleared() {
		_spec.ClearField(adminjwtblacklist.FieldRevokedAt, field.TypeTime)
	}
	_node = &AdminJWTBlacklist{config: ajbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ajbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminjwtblacklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ajbuo.mutation.done = true
	return _node, nil
}
