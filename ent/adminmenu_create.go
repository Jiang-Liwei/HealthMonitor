// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/adminmenu"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AdminMenuCreate is the builder for creating a AdminMenu entity.
type AdminMenuCreate struct {
	config
	mutation *AdminMenuMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (amc *AdminMenuCreate) SetName(s string) *AdminMenuCreate {
	amc.mutation.SetName(s)
	return amc
}

// SetIcon sets the "icon" field.
func (amc *AdminMenuCreate) SetIcon(s string) *AdminMenuCreate {
	amc.mutation.SetIcon(s)
	return amc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amc *AdminMenuCreate) SetNillableIcon(s *string) *AdminMenuCreate {
	if s != nil {
		amc.SetIcon(*s)
	}
	return amc
}

// SetPath sets the "path" field.
func (amc *AdminMenuCreate) SetPath(s string) *AdminMenuCreate {
	amc.mutation.SetPath(s)
	return amc
}

// SetOrder sets the "order" field.
func (amc *AdminMenuCreate) SetOrder(i int) *AdminMenuCreate {
	amc.mutation.SetOrder(i)
	return amc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (amc *AdminMenuCreate) SetNillableOrder(i *int) *AdminMenuCreate {
	if i != nil {
		amc.SetOrder(*i)
	}
	return amc
}

// SetCreatedAt sets the "created_at" field.
func (amc *AdminMenuCreate) SetCreatedAt(t time.Time) *AdminMenuCreate {
	amc.mutation.SetCreatedAt(t)
	return amc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amc *AdminMenuCreate) SetNillableCreatedAt(t *time.Time) *AdminMenuCreate {
	if t != nil {
		amc.SetCreatedAt(*t)
	}
	return amc
}

// SetUpdatedAt sets the "updated_at" field.
func (amc *AdminMenuCreate) SetUpdatedAt(t time.Time) *AdminMenuCreate {
	amc.mutation.SetUpdatedAt(t)
	return amc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (amc *AdminMenuCreate) SetNillableUpdatedAt(t *time.Time) *AdminMenuCreate {
	if t != nil {
		amc.SetUpdatedAt(*t)
	}
	return amc
}

// SetID sets the "id" field.
func (amc *AdminMenuCreate) SetID(u uuid.UUID) *AdminMenuCreate {
	amc.mutation.SetID(u)
	return amc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (amc *AdminMenuCreate) SetNillableID(u *uuid.UUID) *AdminMenuCreate {
	if u != nil {
		amc.SetID(*u)
	}
	return amc
}

// Mutation returns the AdminMenuMutation object of the builder.
func (amc *AdminMenuCreate) Mutation() *AdminMenuMutation {
	return amc.mutation
}

// Save creates the AdminMenu in the database.
func (amc *AdminMenuCreate) Save(ctx context.Context) (*AdminMenu, error) {
	amc.defaults()
	return withHooks(ctx, amc.sqlSave, amc.mutation, amc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AdminMenuCreate) SaveX(ctx context.Context) *AdminMenu {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amc *AdminMenuCreate) Exec(ctx context.Context) error {
	_, err := amc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amc *AdminMenuCreate) ExecX(ctx context.Context) {
	if err := amc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amc *AdminMenuCreate) defaults() {
	if _, ok := amc.mutation.Order(); !ok {
		v := adminmenu.DefaultOrder
		amc.mutation.SetOrder(v)
	}
	if _, ok := amc.mutation.CreatedAt(); !ok {
		v := adminmenu.DefaultCreatedAt()
		amc.mutation.SetCreatedAt(v)
	}
	if _, ok := amc.mutation.UpdatedAt(); !ok {
		v := adminmenu.DefaultUpdatedAt()
		amc.mutation.SetUpdatedAt(v)
	}
	if _, ok := amc.mutation.ID(); !ok {
		v := adminmenu.DefaultID()
		amc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amc *AdminMenuCreate) check() error {
	if _, ok := amc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AdminMenu.name"`)}
	}
	if _, ok := amc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "AdminMenu.path"`)}
	}
	if _, ok := amc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "AdminMenu.order"`)}
	}
	if _, ok := amc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AdminMenu.created_at"`)}
	}
	if _, ok := amc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AdminMenu.updated_at"`)}
	}
	return nil
}

func (amc *AdminMenuCreate) sqlSave(ctx context.Context) (*AdminMenu, error) {
	if err := amc.check(); err != nil {
		return nil, err
	}
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	amc.mutation.id = &_node.ID
	amc.mutation.done = true
	return _node, nil
}

func (amc *AdminMenuCreate) createSpec() (*AdminMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminMenu{config: amc.config}
		_spec = sqlgraph.NewCreateSpec(adminmenu.Table, sqlgraph.NewFieldSpec(adminmenu.FieldID, field.TypeUUID))
	)
	if id, ok := amc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := amc.mutation.Name(); ok {
		_spec.SetField(adminmenu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := amc.mutation.Icon(); ok {
		_spec.SetField(adminmenu.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := amc.mutation.Path(); ok {
		_spec.SetField(adminmenu.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := amc.mutation.Order(); ok {
		_spec.SetField(adminmenu.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := amc.mutation.CreatedAt(); ok {
		_spec.SetField(adminmenu.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := amc.mutation.UpdatedAt(); ok {
		_spec.SetField(adminmenu.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AdminMenuCreateBulk is the builder for creating many AdminMenu entities in bulk.
type AdminMenuCreateBulk struct {
	config
	err      error
	builders []*AdminMenuCreate
}

// Save creates the AdminMenu entities in the database.
func (amcb *AdminMenuCreateBulk) Save(ctx context.Context) ([]*AdminMenu, error) {
	if amcb.err != nil {
		return nil, amcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AdminMenu, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AdminMenuCreateBulk) SaveX(ctx context.Context) []*AdminMenu {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcb *AdminMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := amcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcb *AdminMenuCreateBulk) ExecX(ctx context.Context) {
	if err := amcb.Exec(ctx); err != nil {
		panic(err)
	}
}
