// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthmonitor/ent/adminlog"
	"healthmonitor/ent/adminuser"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// AdminLog is the model entity for the AdminLog schema.
type AdminLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminLogQuery when eager-loading is set.
	Edges           AdminLogEdges `json:"edges"`
	admin_user_logs *uuid.UUID
	selectValues    sql.SelectValues
}

// AdminLogEdges holds the relations/edges for other nodes in the graph.
type AdminLogEdges struct {
	// User holds the value of the user edge.
	User *AdminUser `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminLogEdges) UserOrErr() (*AdminUser, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: adminuser.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminlog.FieldCreatedAt:
			values[i] = new(sql.NullInt64)
		case adminlog.FieldAction, adminlog.FieldIPAddress:
			values[i] = new(sql.NullString)
		case adminlog.FieldID:
			values[i] = new(uuid.UUID)
		case adminlog.ForeignKeys[0]: // admin_user_logs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminLog fields.
func (al *AdminLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminlog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				al.ID = *value
			}
		case adminlog.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				al.Action = value.String
			}
		case adminlog.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				al.IPAddress = value.String
			}
		case adminlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = int(value.Int64)
			}
		case adminlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field admin_user_logs", values[i])
			} else if value.Valid {
				al.admin_user_logs = new(uuid.UUID)
				*al.admin_user_logs = *value.S.(*uuid.UUID)
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminLog.
// This includes values selected through modifiers, order, etc.
func (al *AdminLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the AdminLog entity.
func (al *AdminLog) QueryUser() *AdminUserQuery {
	return NewAdminLogClient(al.config).QueryUser(al)
}

// Update returns a builder for updating this AdminLog.
// Note that you need to call AdminLog.Unwrap() before calling this method if this AdminLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AdminLog) Update() *AdminLogUpdateOne {
	return NewAdminLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AdminLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AdminLog) Unwrap() *AdminLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AdminLog) String() string {
	var builder strings.Builder
	builder.WriteString("AdminLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("action=")
	builder.WriteString(al.Action)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(al.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", al.CreatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// AdminLogs is a parsable slice of AdminLog.
type AdminLogs []*AdminLog
