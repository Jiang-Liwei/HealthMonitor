// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/nutrient"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Nutrient is the model entity for the Nutrient schema.
type Nutrient struct {
	config `json:"-"`
	// ID of the ent.
	// 营养ID
	ID uuid.UUID `json:"id,omitempty"`
	// 营养名称
	Name string `json:"name,omitempty"`
	// 对血压等的影响，益处、中性、害处
	Effect nutrient.Effect `json:"effect,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NutrientQuery when eager-loading is set.
	Edges        NutrientEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NutrientEdges holds the relations/edges for other nodes in the graph.
type NutrientEdges struct {
	// Food holds the value of the food edge.
	Food []*FoodNutrients `json:"food,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FoodOrErr returns the Food value or an error if the edge
// was not loaded in eager-loading.
func (e NutrientEdges) FoodOrErr() ([]*FoodNutrients, error) {
	if e.loadedTypes[0] {
		return e.Food, nil
	}
	return nil, &NotLoadedError{edge: "food"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nutrient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nutrient.FieldName, nutrient.FieldEffect:
			values[i] = new(sql.NullString)
		case nutrient.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nutrient fields.
func (n *Nutrient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nutrient.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				n.ID = *value
			}
		case nutrient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case nutrient.FieldEffect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field effect", values[i])
			} else if value.Valid {
				n.Effect = nutrient.Effect(value.String)
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Nutrient.
// This includes values selected through modifiers, order, etc.
func (n *Nutrient) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryFood queries the "food" edge of the Nutrient entity.
func (n *Nutrient) QueryFood() *FoodNutrientsQuery {
	return NewNutrientClient(n.config).QueryFood(n)
}

// Update returns a builder for updating this Nutrient.
// Note that you need to call Nutrient.Unwrap() before calling this method if this Nutrient
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Nutrient) Update() *NutrientUpdateOne {
	return NewNutrientClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Nutrient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Nutrient) Unwrap() *Nutrient {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Nutrient is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Nutrient) String() string {
	var builder strings.Builder
	builder.WriteString("Nutrient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("name=")
	builder.WriteString(n.Name)
	builder.WriteString(", ")
	builder.WriteString("effect=")
	builder.WriteString(fmt.Sprintf("%v", n.Effect))
	builder.WriteByte(')')
	return builder.String()
}

// Nutrients is a parsable slice of Nutrient.
type Nutrients []*Nutrient
