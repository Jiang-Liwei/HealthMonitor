// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"healthmonitor/ent/bloodstatusrecord"
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BloodStatusRecordDelete is the builder for deleting a BloodStatusRecord entity.
type BloodStatusRecordDelete struct {
	config
	hooks    []Hook
	mutation *BloodStatusRecordMutation
}

// Where appends a list predicates to the BloodStatusRecordDelete builder.
func (bsrd *BloodStatusRecordDelete) Where(ps ...predicate.BloodStatusRecord) *BloodStatusRecordDelete {
	bsrd.mutation.Where(ps...)
	return bsrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bsrd *BloodStatusRecordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bsrd.sqlExec, bsrd.mutation, bsrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bsrd *BloodStatusRecordDelete) ExecX(ctx context.Context) int {
	n, err := bsrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bsrd *BloodStatusRecordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(bloodstatusrecord.Table, sqlgraph.NewFieldSpec(bloodstatusrecord.FieldID, field.TypeUUID))
	if ps := bsrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bsrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bsrd.mutation.done = true
	return affected, err
}

// BloodStatusRecordDeleteOne is the builder for deleting a single BloodStatusRecord entity.
type BloodStatusRecordDeleteOne struct {
	bsrd *BloodStatusRecordDelete
}

// Where appends a list predicates to the BloodStatusRecordDelete builder.
func (bsrdo *BloodStatusRecordDeleteOne) Where(ps ...predicate.BloodStatusRecord) *BloodStatusRecordDeleteOne {
	bsrdo.bsrd.mutation.Where(ps...)
	return bsrdo
}

// Exec executes the deletion query.
func (bsrdo *BloodStatusRecordDeleteOne) Exec(ctx context.Context) error {
	n, err := bsrdo.bsrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{bloodstatusrecord.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bsrdo *BloodStatusRecordDeleteOne) ExecX(ctx context.Context) {
	if err := bsrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
