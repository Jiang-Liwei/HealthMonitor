// Code generated by ent, DO NOT EDIT.

package foodnutrients

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the foodnutrients type in the database.
	Label = "food_nutrients"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeFood holds the string denoting the food edge name in mutations.
	EdgeFood = "food"
	// EdgeNutrient holds the string denoting the nutrient edge name in mutations.
	EdgeNutrient = "nutrient"
	// Table holds the table name of the foodnutrients in the database.
	Table = "food_nutrients"
	// FoodTable is the table that holds the food relation/edge.
	FoodTable = "food_nutrients"
	// FoodInverseTable is the table name for the Food entity.
	// It exists in this package in order to avoid circular dependency with the "food" package.
	FoodInverseTable = "foods"
	// FoodColumn is the table column denoting the food relation/edge.
	FoodColumn = "food_nutrient"
	// NutrientTable is the table that holds the nutrient relation/edge.
	NutrientTable = "food_nutrients"
	// NutrientInverseTable is the table name for the Nutrient entity.
	// It exists in this package in order to avoid circular dependency with the "nutrient" package.
	NutrientInverseTable = "nutrients"
	// NutrientColumn is the table column denoting the nutrient relation/edge.
	NutrientColumn = "nutrient_food"
)

// Columns holds all SQL columns for foodnutrients fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "food_nutrients"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"food_nutrient",
	"nutrient_food",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the FoodNutrients queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFoodField orders the results by food field.
func ByFoodField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFoodStep(), sql.OrderByField(field, opts...))
	}
}

// ByNutrientField orders the results by nutrient field.
func ByNutrientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNutrientStep(), sql.OrderByField(field, opts...))
	}
}
func newFoodStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FoodInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FoodTable, FoodColumn),
	)
}
func newNutrientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NutrientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NutrientTable, NutrientColumn),
	)
}
