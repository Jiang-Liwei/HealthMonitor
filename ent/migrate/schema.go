// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AdminJwtBlacklistsColumns holds the columns for the "admin_jwt_blacklists" table.
	AdminJwtBlacklistsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "jti", Type: field.TypeString, Unique: true},
		{Name: "expires_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0)"}},
		{Name: "revoked_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP"}},
	}
	// AdminJwtBlacklistsTable holds the schema information for the "admin_jwt_blacklists" table.
	AdminJwtBlacklistsTable = &schema.Table{
		Name:       "admin_jwt_blacklists",
		Columns:    AdminJwtBlacklistsColumns,
		PrimaryKey: []*schema.Column{AdminJwtBlacklistsColumns[0]},
	}
	// AdminLogsColumns holds the columns for the "admin_logs" table.
	AdminLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "action", Type: field.TypeString},
		{Name: "ip_address", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP"}},
		{Name: "admin_user_logs", Type: field.TypeUUID, Nullable: true},
	}
	// AdminLogsTable holds the schema information for the "admin_logs" table.
	AdminLogsTable = &schema.Table{
		Name:       "admin_logs",
		Columns:    AdminLogsColumns,
		PrimaryKey: []*schema.Column{AdminLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "admin_logs_admin_users_logs",
				Columns:    []*schema.Column{AdminLogsColumns[4]},
				RefColumns: []*schema.Column{AdminUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AdminMenusColumns holds the columns for the "admin_menus" table.
	AdminMenusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "icon", Type: field.TypeString, Nullable: true},
		{Name: "path", Type: field.TypeString},
		{Name: "order", Type: field.TypeInt, Default: 0},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"}},
	}
	// AdminMenusTable holds the schema information for the "admin_menus" table.
	AdminMenusTable = &schema.Table{
		Name:       "admin_menus",
		Columns:    AdminMenusColumns,
		PrimaryKey: []*schema.Column{AdminMenusColumns[0]},
	}
	// AdminPermissionsColumns holds the columns for the "admin_permissions" table.
	AdminPermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "path", Type: field.TypeString},
		{Name: "method", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"}},
	}
	// AdminPermissionsTable holds the schema information for the "admin_permissions" table.
	AdminPermissionsTable = &schema.Table{
		Name:       "admin_permissions",
		Columns:    AdminPermissionsColumns,
		PrimaryKey: []*schema.Column{AdminPermissionsColumns[0]},
	}
	// AdminRolePermissionsColumns holds the columns for the "admin_role_permissions" table.
	AdminRolePermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "admin_permission_roles", Type: field.TypeUUID, Nullable: true},
		{Name: "admin_roles_permissions", Type: field.TypeUUID, Nullable: true},
	}
	// AdminRolePermissionsTable holds the schema information for the "admin_role_permissions" table.
	AdminRolePermissionsTable = &schema.Table{
		Name:       "admin_role_permissions",
		Columns:    AdminRolePermissionsColumns,
		PrimaryKey: []*schema.Column{AdminRolePermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "admin_role_permissions_admin_permissions_roles",
				Columns:    []*schema.Column{AdminRolePermissionsColumns[1]},
				RefColumns: []*schema.Column{AdminPermissionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "admin_role_permissions_admin_roles_permissions",
				Columns:    []*schema.Column{AdminRolePermissionsColumns[2]},
				RefColumns: []*schema.Column{AdminRolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AdminRolesColumns holds the columns for the "admin_roles" table.
	AdminRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"}},
	}
	// AdminRolesTable holds the schema information for the "admin_roles" table.
	AdminRolesTable = &schema.Table{
		Name:       "admin_roles",
		Columns:    AdminRolesColumns,
		PrimaryKey: []*schema.Column{AdminRolesColumns[0]},
	}
	// AdminUsersColumns holds the columns for the "admin_users" table.
	AdminUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "last_login_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "TIMESTAMP"}},
		{Name: "jwt_issued_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "TIMESTAMP"}},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"}},
	}
	// AdminUsersTable holds the schema information for the "admin_users" table.
	AdminUsersTable = &schema.Table{
		Name:       "admin_users",
		Columns:    AdminUsersColumns,
		PrimaryKey: []*schema.Column{AdminUsersColumns[0]},
	}
	// AdminUserRolesColumns holds the columns for the "admin_user_roles" table.
	AdminUserRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "admin_roles_users", Type: field.TypeUUID, Nullable: true},
		{Name: "admin_user_roles", Type: field.TypeUUID, Nullable: true},
	}
	// AdminUserRolesTable holds the schema information for the "admin_user_roles" table.
	AdminUserRolesTable = &schema.Table{
		Name:       "admin_user_roles",
		Columns:    AdminUserRolesColumns,
		PrimaryKey: []*schema.Column{AdminUserRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "admin_user_roles_admin_roles_users",
				Columns:    []*schema.Column{AdminUserRolesColumns[1]},
				RefColumns: []*schema.Column{AdminRolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "admin_user_roles_admin_users_roles",
				Columns:    []*schema.Column{AdminUserRolesColumns[2]},
				RefColumns: []*schema.Column{AdminUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AdminJwtBlacklistsTable,
		AdminLogsTable,
		AdminMenusTable,
		AdminPermissionsTable,
		AdminRolePermissionsTable,
		AdminRolesTable,
		AdminUsersTable,
		AdminUserRolesTable,
	}
)

func init() {
	AdminLogsTable.ForeignKeys[0].RefTable = AdminUsersTable
	AdminRolePermissionsTable.ForeignKeys[0].RefTable = AdminPermissionsTable
	AdminRolePermissionsTable.ForeignKeys[1].RefTable = AdminRolesTable
	AdminUserRolesTable.ForeignKeys[0].RefTable = AdminRolesTable
	AdminUserRolesTable.ForeignKeys[1].RefTable = AdminUsersTable
}
