// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/foodingredients"
	"HealthMonitor/ent/ingredients"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IngredientsCreate is the builder for creating a Ingredients entity.
type IngredientsCreate struct {
	config
	mutation *IngredientsMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ic *IngredientsCreate) SetName(s string) *IngredientsCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetEffect sets the "effect" field.
func (ic *IngredientsCreate) SetEffect(i ingredients.Effect) *IngredientsCreate {
	ic.mutation.SetEffect(i)
	return ic
}

// SetID sets the "id" field.
func (ic *IngredientsCreate) SetID(u uuid.UUID) *IngredientsCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IngredientsCreate) SetNillableID(u *uuid.UUID) *IngredientsCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// AddFoodIDs adds the "food" edge to the FoodIngredients entity by IDs.
func (ic *IngredientsCreate) AddFoodIDs(ids ...int) *IngredientsCreate {
	ic.mutation.AddFoodIDs(ids...)
	return ic
}

// AddFood adds the "food" edges to the FoodIngredients entity.
func (ic *IngredientsCreate) AddFood(f ...*FoodIngredients) *IngredientsCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ic.AddFoodIDs(ids...)
}

// Mutation returns the IngredientsMutation object of the builder.
func (ic *IngredientsCreate) Mutation() *IngredientsMutation {
	return ic.mutation
}

// Save creates the Ingredients in the database.
func (ic *IngredientsCreate) Save(ctx context.Context) (*Ingredients, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IngredientsCreate) SaveX(ctx context.Context) *Ingredients {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IngredientsCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IngredientsCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IngredientsCreate) defaults() {
	if _, ok := ic.mutation.ID(); !ok {
		v := ingredients.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IngredientsCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Ingredients.name"`)}
	}
	if _, ok := ic.mutation.Effect(); !ok {
		return &ValidationError{Name: "effect", err: errors.New(`ent: missing required field "Ingredients.effect"`)}
	}
	if v, ok := ic.mutation.Effect(); ok {
		if err := ingredients.EffectValidator(v); err != nil {
			return &ValidationError{Name: "effect", err: fmt.Errorf(`ent: validator failed for field "Ingredients.effect": %w`, err)}
		}
	}
	return nil
}

func (ic *IngredientsCreate) sqlSave(ctx context.Context) (*Ingredients, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IngredientsCreate) createSpec() (*Ingredients, *sqlgraph.CreateSpec) {
	var (
		_node = &Ingredients{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(ingredients.Table, sqlgraph.NewFieldSpec(ingredients.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(ingredients.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Effect(); ok {
		_spec.SetField(ingredients.FieldEffect, field.TypeEnum, value)
		_node.Effect = value
	}
	if nodes := ic.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ingredients.FoodTable,
			Columns: []string{ingredients.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodingredients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IngredientsCreateBulk is the builder for creating many Ingredients entities in bulk.
type IngredientsCreateBulk struct {
	config
	err      error
	builders []*IngredientsCreate
}

// Save creates the Ingredients entities in the database.
func (icb *IngredientsCreateBulk) Save(ctx context.Context) ([]*Ingredients, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Ingredients, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IngredientsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IngredientsCreateBulk) SaveX(ctx context.Context) []*Ingredients {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IngredientsCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IngredientsCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
