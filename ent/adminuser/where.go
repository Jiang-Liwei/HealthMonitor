// Code generated by ent, DO NOT EDIT.

package adminuser

import (
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldUsername, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldEmail, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldPasswordHash, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldIsActive, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldLastLoginAt, v))
}

// JwtIssuedAt applies equality check predicate on the "jwt_issued_at" field. It's identical to JwtIssuedAtEQ.
func JwtIssuedAt(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldJwtIssuedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldDeletedAt, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContainsFold(FieldUsername, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContainsFold(FieldPasswordHash, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldIsActive, v))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldLastLoginAt, v))
}

// LastLoginAtIsNil applies the IsNil predicate on the "last_login_at" field.
func LastLoginAtIsNil() predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIsNull(FieldLastLoginAt))
}

// LastLoginAtNotNil applies the NotNil predicate on the "last_login_at" field.
func LastLoginAtNotNil() predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotNull(FieldLastLoginAt))
}

// JwtIssuedAtEQ applies the EQ predicate on the "jwt_issued_at" field.
func JwtIssuedAtEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldJwtIssuedAt, v))
}

// JwtIssuedAtNEQ applies the NEQ predicate on the "jwt_issued_at" field.
func JwtIssuedAtNEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldJwtIssuedAt, v))
}

// JwtIssuedAtIn applies the In predicate on the "jwt_issued_at" field.
func JwtIssuedAtIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldJwtIssuedAt, vs...))
}

// JwtIssuedAtNotIn applies the NotIn predicate on the "jwt_issued_at" field.
func JwtIssuedAtNotIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldJwtIssuedAt, vs...))
}

// JwtIssuedAtGT applies the GT predicate on the "jwt_issued_at" field.
func JwtIssuedAtGT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldJwtIssuedAt, v))
}

// JwtIssuedAtGTE applies the GTE predicate on the "jwt_issued_at" field.
func JwtIssuedAtGTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldJwtIssuedAt, v))
}

// JwtIssuedAtLT applies the LT predicate on the "jwt_issued_at" field.
func JwtIssuedAtLT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldJwtIssuedAt, v))
}

// JwtIssuedAtLTE applies the LTE predicate on the "jwt_issued_at" field.
func JwtIssuedAtLTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldJwtIssuedAt, v))
}

// JwtIssuedAtIsNil applies the IsNil predicate on the "jwt_issued_at" field.
func JwtIssuedAtIsNil() predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIsNull(FieldJwtIssuedAt))
}

// JwtIssuedAtNotNil applies the NotNil predicate on the "jwt_issued_at" field.
func JwtIssuedAtNotNil() predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotNull(FieldJwtIssuedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotNull(FieldDeletedAt))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.AdminUser {
	return predicate.AdminUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.AdminUserRole) predicate.AdminUser {
	return predicate.AdminUser(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogs applies the HasEdge predicate on the "logs" edge.
func HasLogs() predicate.AdminUser {
	return predicate.AdminUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogsWith applies the HasEdge predicate on the "logs" edge with a given conditions (other predicates).
func HasLogsWith(preds ...predicate.AdminLog) predicate.AdminUser {
	return predicate.AdminUser(func(s *sql.Selector) {
		step := newLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdminUser) predicate.AdminUser {
	return predicate.AdminUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdminUser) predicate.AdminUser {
	return predicate.AdminUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdminUser) predicate.AdminUser {
	return predicate.AdminUser(sql.NotPredicates(p))
}
