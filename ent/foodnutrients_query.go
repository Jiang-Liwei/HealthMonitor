// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/food"
	"HealthMonitor/ent/foodnutrients"
	"HealthMonitor/ent/nutrient"
	"HealthMonitor/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FoodNutrientsQuery is the builder for querying FoodNutrients entities.
type FoodNutrientsQuery struct {
	config
	ctx          *QueryContext
	order        []foodnutrients.OrderOption
	inters       []Interceptor
	predicates   []predicate.FoodNutrients
	withFood     *FoodQuery
	withNutrient *NutrientQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FoodNutrientsQuery builder.
func (fnq *FoodNutrientsQuery) Where(ps ...predicate.FoodNutrients) *FoodNutrientsQuery {
	fnq.predicates = append(fnq.predicates, ps...)
	return fnq
}

// Limit the number of records to be returned by this query.
func (fnq *FoodNutrientsQuery) Limit(limit int) *FoodNutrientsQuery {
	fnq.ctx.Limit = &limit
	return fnq
}

// Offset to start from.
func (fnq *FoodNutrientsQuery) Offset(offset int) *FoodNutrientsQuery {
	fnq.ctx.Offset = &offset
	return fnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fnq *FoodNutrientsQuery) Unique(unique bool) *FoodNutrientsQuery {
	fnq.ctx.Unique = &unique
	return fnq
}

// Order specifies how the records should be ordered.
func (fnq *FoodNutrientsQuery) Order(o ...foodnutrients.OrderOption) *FoodNutrientsQuery {
	fnq.order = append(fnq.order, o...)
	return fnq
}

// QueryFood chains the current query on the "food" edge.
func (fnq *FoodNutrientsQuery) QueryFood() *FoodQuery {
	query := (&FoodClient{config: fnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(foodnutrients.Table, foodnutrients.FieldID, selector),
			sqlgraph.To(food.Table, food.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodnutrients.FoodTable, foodnutrients.FoodColumn),
		)
		fromU = sqlgraph.SetNeighbors(fnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNutrient chains the current query on the "nutrient" edge.
func (fnq *FoodNutrientsQuery) QueryNutrient() *NutrientQuery {
	query := (&NutrientClient{config: fnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(foodnutrients.Table, foodnutrients.FieldID, selector),
			sqlgraph.To(nutrient.Table, nutrient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodnutrients.NutrientTable, foodnutrients.NutrientColumn),
		)
		fromU = sqlgraph.SetNeighbors(fnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FoodNutrients entity from the query.
// Returns a *NotFoundError when no FoodNutrients was found.
func (fnq *FoodNutrientsQuery) First(ctx context.Context) (*FoodNutrients, error) {
	nodes, err := fnq.Limit(1).All(setContextOp(ctx, fnq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{foodnutrients.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fnq *FoodNutrientsQuery) FirstX(ctx context.Context) *FoodNutrients {
	node, err := fnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FoodNutrients ID from the query.
// Returns a *NotFoundError when no FoodNutrients ID was found.
func (fnq *FoodNutrientsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fnq.Limit(1).IDs(setContextOp(ctx, fnq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{foodnutrients.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fnq *FoodNutrientsQuery) FirstIDX(ctx context.Context) int {
	id, err := fnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FoodNutrients entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FoodNutrients entity is found.
// Returns a *NotFoundError when no FoodNutrients entities are found.
func (fnq *FoodNutrientsQuery) Only(ctx context.Context) (*FoodNutrients, error) {
	nodes, err := fnq.Limit(2).All(setContextOp(ctx, fnq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{foodnutrients.Label}
	default:
		return nil, &NotSingularError{foodnutrients.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fnq *FoodNutrientsQuery) OnlyX(ctx context.Context) *FoodNutrients {
	node, err := fnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FoodNutrients ID in the query.
// Returns a *NotSingularError when more than one FoodNutrients ID is found.
// Returns a *NotFoundError when no entities are found.
func (fnq *FoodNutrientsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fnq.Limit(2).IDs(setContextOp(ctx, fnq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{foodnutrients.Label}
	default:
		err = &NotSingularError{foodnutrients.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fnq *FoodNutrientsQuery) OnlyIDX(ctx context.Context) int {
	id, err := fnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FoodNutrientsSlice.
func (fnq *FoodNutrientsQuery) All(ctx context.Context) ([]*FoodNutrients, error) {
	ctx = setContextOp(ctx, fnq.ctx, ent.OpQueryAll)
	if err := fnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FoodNutrients, *FoodNutrientsQuery]()
	return withInterceptors[[]*FoodNutrients](ctx, fnq, qr, fnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fnq *FoodNutrientsQuery) AllX(ctx context.Context) []*FoodNutrients {
	nodes, err := fnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FoodNutrients IDs.
func (fnq *FoodNutrientsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fnq.ctx.Unique == nil && fnq.path != nil {
		fnq.Unique(true)
	}
	ctx = setContextOp(ctx, fnq.ctx, ent.OpQueryIDs)
	if err = fnq.Select(foodnutrients.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fnq *FoodNutrientsQuery) IDsX(ctx context.Context) []int {
	ids, err := fnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fnq *FoodNutrientsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fnq.ctx, ent.OpQueryCount)
	if err := fnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fnq, querierCount[*FoodNutrientsQuery](), fnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fnq *FoodNutrientsQuery) CountX(ctx context.Context) int {
	count, err := fnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fnq *FoodNutrientsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fnq.ctx, ent.OpQueryExist)
	switch _, err := fnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fnq *FoodNutrientsQuery) ExistX(ctx context.Context) bool {
	exist, err := fnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FoodNutrientsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fnq *FoodNutrientsQuery) Clone() *FoodNutrientsQuery {
	if fnq == nil {
		return nil
	}
	return &FoodNutrientsQuery{
		config:       fnq.config,
		ctx:          fnq.ctx.Clone(),
		order:        append([]foodnutrients.OrderOption{}, fnq.order...),
		inters:       append([]Interceptor{}, fnq.inters...),
		predicates:   append([]predicate.FoodNutrients{}, fnq.predicates...),
		withFood:     fnq.withFood.Clone(),
		withNutrient: fnq.withNutrient.Clone(),
		// clone intermediate query.
		sql:  fnq.sql.Clone(),
		path: fnq.path,
	}
}

// WithFood tells the query-builder to eager-load the nodes that are connected to
// the "food" edge. The optional arguments are used to configure the query builder of the edge.
func (fnq *FoodNutrientsQuery) WithFood(opts ...func(*FoodQuery)) *FoodNutrientsQuery {
	query := (&FoodClient{config: fnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fnq.withFood = query
	return fnq
}

// WithNutrient tells the query-builder to eager-load the nodes that are connected to
// the "nutrient" edge. The optional arguments are used to configure the query builder of the edge.
func (fnq *FoodNutrientsQuery) WithNutrient(opts ...func(*NutrientQuery)) *FoodNutrientsQuery {
	query := (&NutrientClient{config: fnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fnq.withNutrient = query
	return fnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (fnq *FoodNutrientsQuery) GroupBy(field string, fields ...string) *FoodNutrientsGroupBy {
	fnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FoodNutrientsGroupBy{build: fnq}
	grbuild.flds = &fnq.ctx.Fields
	grbuild.label = foodnutrients.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (fnq *FoodNutrientsQuery) Select(fields ...string) *FoodNutrientsSelect {
	fnq.ctx.Fields = append(fnq.ctx.Fields, fields...)
	sbuild := &FoodNutrientsSelect{FoodNutrientsQuery: fnq}
	sbuild.label = foodnutrients.Label
	sbuild.flds, sbuild.scan = &fnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FoodNutrientsSelect configured with the given aggregations.
func (fnq *FoodNutrientsQuery) Aggregate(fns ...AggregateFunc) *FoodNutrientsSelect {
	return fnq.Select().Aggregate(fns...)
}

func (fnq *FoodNutrientsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fnq); err != nil {
				return err
			}
		}
	}
	for _, f := range fnq.ctx.Fields {
		if !foodnutrients.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fnq.path != nil {
		prev, err := fnq.path(ctx)
		if err != nil {
			return err
		}
		fnq.sql = prev
	}
	return nil
}

func (fnq *FoodNutrientsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FoodNutrients, error) {
	var (
		nodes       = []*FoodNutrients{}
		withFKs     = fnq.withFKs
		_spec       = fnq.querySpec()
		loadedTypes = [2]bool{
			fnq.withFood != nil,
			fnq.withNutrient != nil,
		}
	)
	if fnq.withFood != nil || fnq.withNutrient != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, foodnutrients.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FoodNutrients).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FoodNutrients{config: fnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fnq.withFood; query != nil {
		if err := fnq.loadFood(ctx, query, nodes, nil,
			func(n *FoodNutrients, e *Food) { n.Edges.Food = e }); err != nil {
			return nil, err
		}
	}
	if query := fnq.withNutrient; query != nil {
		if err := fnq.loadNutrient(ctx, query, nodes, nil,
			func(n *FoodNutrients, e *Nutrient) { n.Edges.Nutrient = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fnq *FoodNutrientsQuery) loadFood(ctx context.Context, query *FoodQuery, nodes []*FoodNutrients, init func(*FoodNutrients), assign func(*FoodNutrients, *Food)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FoodNutrients)
	for i := range nodes {
		if nodes[i].food_nutrient == nil {
			continue
		}
		fk := *nodes[i].food_nutrient
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(food.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "food_nutrient" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fnq *FoodNutrientsQuery) loadNutrient(ctx context.Context, query *NutrientQuery, nodes []*FoodNutrients, init func(*FoodNutrients), assign func(*FoodNutrients, *Nutrient)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FoodNutrients)
	for i := range nodes {
		if nodes[i].nutrient_food == nil {
			continue
		}
		fk := *nodes[i].nutrient_food
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(nutrient.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "nutrient_food" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fnq *FoodNutrientsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fnq.querySpec()
	_spec.Node.Columns = fnq.ctx.Fields
	if len(fnq.ctx.Fields) > 0 {
		_spec.Unique = fnq.ctx.Unique != nil && *fnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fnq.driver, _spec)
}

func (fnq *FoodNutrientsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(foodnutrients.Table, foodnutrients.Columns, sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt))
	_spec.From = fnq.sql
	if unique := fnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fnq.path != nil {
		_spec.Unique = true
	}
	if fields := fnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, foodnutrients.FieldID)
		for i := range fields {
			if fields[i] != foodnutrients.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fnq *FoodNutrientsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fnq.driver.Dialect())
	t1 := builder.Table(foodnutrients.Table)
	columns := fnq.ctx.Fields
	if len(columns) == 0 {
		columns = foodnutrients.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fnq.sql != nil {
		selector = fnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fnq.ctx.Unique != nil && *fnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fnq.predicates {
		p(selector)
	}
	for _, p := range fnq.order {
		p(selector)
	}
	if offset := fnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FoodNutrientsGroupBy is the group-by builder for FoodNutrients entities.
type FoodNutrientsGroupBy struct {
	selector
	build *FoodNutrientsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fngb *FoodNutrientsGroupBy) Aggregate(fns ...AggregateFunc) *FoodNutrientsGroupBy {
	fngb.fns = append(fngb.fns, fns...)
	return fngb
}

// Scan applies the selector query and scans the result into the given value.
func (fngb *FoodNutrientsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fngb.build.ctx, ent.OpQueryGroupBy)
	if err := fngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FoodNutrientsQuery, *FoodNutrientsGroupBy](ctx, fngb.build, fngb, fngb.build.inters, v)
}

func (fngb *FoodNutrientsGroupBy) sqlScan(ctx context.Context, root *FoodNutrientsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fngb.fns))
	for _, fn := range fngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fngb.flds)+len(fngb.fns))
		for _, f := range *fngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FoodNutrientsSelect is the builder for selecting fields of FoodNutrients entities.
type FoodNutrientsSelect struct {
	*FoodNutrientsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fns *FoodNutrientsSelect) Aggregate(fns ...AggregateFunc) *FoodNutrientsSelect {
	fns.fns = append(fns.fns, fns...)
	return fns
}

// Scan applies the selector query and scans the result into the given value.
func (fns *FoodNutrientsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fns.ctx, ent.OpQuerySelect)
	if err := fns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FoodNutrientsQuery, *FoodNutrientsSelect](ctx, fns.FoodNutrientsQuery, fns, fns.inters, v)
}

func (fns *FoodNutrientsSelect) sqlScan(ctx context.Context, root *FoodNutrientsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fns.fns))
	for _, fn := range fns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
