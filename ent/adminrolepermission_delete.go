// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/adminrolepermission"
	"HealthMonitor/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminRolePermissionDelete is the builder for deleting a AdminRolePermission entity.
type AdminRolePermissionDelete struct {
	config
	hooks    []Hook
	mutation *AdminRolePermissionMutation
}

// Where appends a list predicates to the AdminRolePermissionDelete builder.
func (arpd *AdminRolePermissionDelete) Where(ps ...predicate.AdminRolePermission) *AdminRolePermissionDelete {
	arpd.mutation.Where(ps...)
	return arpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (arpd *AdminRolePermissionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, arpd.sqlExec, arpd.mutation, arpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (arpd *AdminRolePermissionDelete) ExecX(ctx context.Context) int {
	n, err := arpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (arpd *AdminRolePermissionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(adminrolepermission.Table, sqlgraph.NewFieldSpec(adminrolepermission.FieldID, field.TypeInt))
	if ps := arpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, arpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	arpd.mutation.done = true
	return affected, err
}

// AdminRolePermissionDeleteOne is the builder for deleting a single AdminRolePermission entity.
type AdminRolePermissionDeleteOne struct {
	arpd *AdminRolePermissionDelete
}

// Where appends a list predicates to the AdminRolePermissionDelete builder.
func (arpdo *AdminRolePermissionDeleteOne) Where(ps ...predicate.AdminRolePermission) *AdminRolePermissionDeleteOne {
	arpdo.arpd.mutation.Where(ps...)
	return arpdo
}

// Exec executes the deletion query.
func (arpdo *AdminRolePermissionDeleteOne) Exec(ctx context.Context) error {
	n, err := arpdo.arpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{adminrolepermission.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (arpdo *AdminRolePermissionDeleteOne) ExecX(ctx context.Context) {
	if err := arpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
