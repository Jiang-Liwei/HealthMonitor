// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/usermeal"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserMeal is the model entity for the UserMeal schema.
type UserMeal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 记录日期
	RecordDate time.Time `json:"record_date,omitempty"`
	// 餐点类型，早餐、午餐、晚餐
	MealType usermeal.MealType `json:"meal_type,omitempty"`
	// 餐点描述
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserMealQuery when eager-loading is set.
	Edges        UserMealEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserMealEdges holds the relations/edges for other nodes in the graph.
type UserMealEdges struct {
	// Food holds the value of the food edge.
	Food []*UserMealFood `json:"food,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FoodOrErr returns the Food value or an error if the edge
// was not loaded in eager-loading.
func (e UserMealEdges) FoodOrErr() ([]*UserMealFood, error) {
	if e.loadedTypes[0] {
		return e.Food, nil
	}
	return nil, &NotLoadedError{edge: "food"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserMeal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usermeal.FieldID, usermeal.FieldUserID:
			values[i] = new(sql.NullInt64)
		case usermeal.FieldMealType, usermeal.FieldDescription:
			values[i] = new(sql.NullString)
		case usermeal.FieldRecordDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserMeal fields.
func (um *UserMeal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usermeal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			um.ID = int(value.Int64)
		case usermeal.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				um.UserID = int(value.Int64)
			}
		case usermeal.FieldRecordDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field record_date", values[i])
			} else if value.Valid {
				um.RecordDate = value.Time
			}
		case usermeal.FieldMealType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meal_type", values[i])
			} else if value.Valid {
				um.MealType = usermeal.MealType(value.String)
			}
		case usermeal.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				um.Description = value.String
			}
		default:
			um.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserMeal.
// This includes values selected through modifiers, order, etc.
func (um *UserMeal) Value(name string) (ent.Value, error) {
	return um.selectValues.Get(name)
}

// QueryFood queries the "food" edge of the UserMeal entity.
func (um *UserMeal) QueryFood() *UserMealFoodQuery {
	return NewUserMealClient(um.config).QueryFood(um)
}

// Update returns a builder for updating this UserMeal.
// Note that you need to call UserMeal.Unwrap() before calling this method if this UserMeal
// was returned from a transaction, and the transaction was committed or rolled back.
func (um *UserMeal) Update() *UserMealUpdateOne {
	return NewUserMealClient(um.config).UpdateOne(um)
}

// Unwrap unwraps the UserMeal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (um *UserMeal) Unwrap() *UserMeal {
	_tx, ok := um.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserMeal is not a transactional entity")
	}
	um.config.driver = _tx.drv
	return um
}

// String implements the fmt.Stringer.
func (um *UserMeal) String() string {
	var builder strings.Builder
	builder.WriteString("UserMeal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", um.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", um.UserID))
	builder.WriteString(", ")
	builder.WriteString("record_date=")
	builder.WriteString(um.RecordDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("meal_type=")
	builder.WriteString(fmt.Sprintf("%v", um.MealType))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(um.Description)
	builder.WriteByte(')')
	return builder.String()
}

// UserMeals is a parsable slice of UserMeal.
type UserMeals []*UserMeal
