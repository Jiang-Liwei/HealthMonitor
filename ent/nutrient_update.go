// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/foodnutrients"
	"HealthMonitor/ent/nutrient"
	"HealthMonitor/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NutrientUpdate is the builder for updating Nutrient entities.
type NutrientUpdate struct {
	config
	hooks    []Hook
	mutation *NutrientMutation
}

// Where appends a list predicates to the NutrientUpdate builder.
func (nu *NutrientUpdate) Where(ps ...predicate.Nutrient) *NutrientUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetName sets the "name" field.
func (nu *NutrientUpdate) SetName(s string) *NutrientUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NutrientUpdate) SetNillableName(s *string) *NutrientUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetEffect sets the "effect" field.
func (nu *NutrientUpdate) SetEffect(n nutrient.Effect) *NutrientUpdate {
	nu.mutation.SetEffect(n)
	return nu
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (nu *NutrientUpdate) SetNillableEffect(n *nutrient.Effect) *NutrientUpdate {
	if n != nil {
		nu.SetEffect(*n)
	}
	return nu
}

// AddFoodIDs adds the "food" edge to the FoodNutrients entity by IDs.
func (nu *NutrientUpdate) AddFoodIDs(ids ...int) *NutrientUpdate {
	nu.mutation.AddFoodIDs(ids...)
	return nu
}

// AddFood adds the "food" edges to the FoodNutrients entity.
func (nu *NutrientUpdate) AddFood(f ...*FoodNutrients) *NutrientUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return nu.AddFoodIDs(ids...)
}

// Mutation returns the NutrientMutation object of the builder.
func (nu *NutrientUpdate) Mutation() *NutrientMutation {
	return nu.mutation
}

// ClearFood clears all "food" edges to the FoodNutrients entity.
func (nu *NutrientUpdate) ClearFood() *NutrientUpdate {
	nu.mutation.ClearFood()
	return nu
}

// RemoveFoodIDs removes the "food" edge to FoodNutrients entities by IDs.
func (nu *NutrientUpdate) RemoveFoodIDs(ids ...int) *NutrientUpdate {
	nu.mutation.RemoveFoodIDs(ids...)
	return nu
}

// RemoveFood removes "food" edges to FoodNutrients entities.
func (nu *NutrientUpdate) RemoveFood(f ...*FoodNutrients) *NutrientUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return nu.RemoveFoodIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NutrientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NutrientUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NutrientUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NutrientUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NutrientUpdate) check() error {
	if v, ok := nu.mutation.Effect(); ok {
		if err := nutrient.EffectValidator(v); err != nil {
			return &ValidationError{Name: "effect", err: fmt.Errorf(`ent: validator failed for field "Nutrient.effect": %w`, err)}
		}
	}
	return nil
}

func (nu *NutrientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(nutrient.Table, nutrient.Columns, sqlgraph.NewFieldSpec(nutrient.FieldID, field.TypeUUID))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(nutrient.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Effect(); ok {
		_spec.SetField(nutrient.FieldEffect, field.TypeEnum, value)
	}
	if nu.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nutrient.FoodTable,
			Columns: []string{nutrient.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedFoodIDs(); len(nodes) > 0 && !nu.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nutrient.FoodTable,
			Columns: []string{nutrient.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nutrient.FoodTable,
			Columns: []string{nutrient.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nutrient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NutrientUpdateOne is the builder for updating a single Nutrient entity.
type NutrientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NutrientMutation
}

// SetName sets the "name" field.
func (nuo *NutrientUpdateOne) SetName(s string) *NutrientUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NutrientUpdateOne) SetNillableName(s *string) *NutrientUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetEffect sets the "effect" field.
func (nuo *NutrientUpdateOne) SetEffect(n nutrient.Effect) *NutrientUpdateOne {
	nuo.mutation.SetEffect(n)
	return nuo
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (nuo *NutrientUpdateOne) SetNillableEffect(n *nutrient.Effect) *NutrientUpdateOne {
	if n != nil {
		nuo.SetEffect(*n)
	}
	return nuo
}

// AddFoodIDs adds the "food" edge to the FoodNutrients entity by IDs.
func (nuo *NutrientUpdateOne) AddFoodIDs(ids ...int) *NutrientUpdateOne {
	nuo.mutation.AddFoodIDs(ids...)
	return nuo
}

// AddFood adds the "food" edges to the FoodNutrients entity.
func (nuo *NutrientUpdateOne) AddFood(f ...*FoodNutrients) *NutrientUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return nuo.AddFoodIDs(ids...)
}

// Mutation returns the NutrientMutation object of the builder.
func (nuo *NutrientUpdateOne) Mutation() *NutrientMutation {
	return nuo.mutation
}

// ClearFood clears all "food" edges to the FoodNutrients entity.
func (nuo *NutrientUpdateOne) ClearFood() *NutrientUpdateOne {
	nuo.mutation.ClearFood()
	return nuo
}

// RemoveFoodIDs removes the "food" edge to FoodNutrients entities by IDs.
func (nuo *NutrientUpdateOne) RemoveFoodIDs(ids ...int) *NutrientUpdateOne {
	nuo.mutation.RemoveFoodIDs(ids...)
	return nuo
}

// RemoveFood removes "food" edges to FoodNutrients entities.
func (nuo *NutrientUpdateOne) RemoveFood(f ...*FoodNutrients) *NutrientUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return nuo.RemoveFoodIDs(ids...)
}

// Where appends a list predicates to the NutrientUpdate builder.
func (nuo *NutrientUpdateOne) Where(ps ...predicate.Nutrient) *NutrientUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NutrientUpdateOne) Select(field string, fields ...string) *NutrientUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Nutrient entity.
func (nuo *NutrientUpdateOne) Save(ctx context.Context) (*Nutrient, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NutrientUpdateOne) SaveX(ctx context.Context) *Nutrient {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NutrientUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NutrientUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NutrientUpdateOne) check() error {
	if v, ok := nuo.mutation.Effect(); ok {
		if err := nutrient.EffectValidator(v); err != nil {
			return &ValidationError{Name: "effect", err: fmt.Errorf(`ent: validator failed for field "Nutrient.effect": %w`, err)}
		}
	}
	return nil
}

func (nuo *NutrientUpdateOne) sqlSave(ctx context.Context) (_node *Nutrient, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(nutrient.Table, nutrient.Columns, sqlgraph.NewFieldSpec(nutrient.FieldID, field.TypeUUID))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Nutrient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nutrient.FieldID)
		for _, f := range fields {
			if !nutrient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nutrient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(nutrient.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Effect(); ok {
		_spec.SetField(nutrient.FieldEffect, field.TypeEnum, value)
	}
	if nuo.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nutrient.FoodTable,
			Columns: []string{nutrient.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedFoodIDs(); len(nodes) > 0 && !nuo.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nutrient.FoodTable,
			Columns: []string{nutrient.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nutrient.FoodTable,
			Columns: []string{nutrient.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Nutrient{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nutrient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
