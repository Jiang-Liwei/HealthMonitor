// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"healthmonitor/ent/adminpermission"
	"healthmonitor/ent/adminrolepermission"
	"healthmonitor/ent/adminroles"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AdminRolePermissionCreate is the builder for creating a AdminRolePermission entity.
type AdminRolePermissionCreate struct {
	config
	mutation *AdminRolePermissionMutation
	hooks    []Hook
}

// SetRoleID sets the "role" edge to the AdminRoles entity by ID.
func (arpc *AdminRolePermissionCreate) SetRoleID(id uuid.UUID) *AdminRolePermissionCreate {
	arpc.mutation.SetRoleID(id)
	return arpc
}

// SetNillableRoleID sets the "role" edge to the AdminRoles entity by ID if the given value is not nil.
func (arpc *AdminRolePermissionCreate) SetNillableRoleID(id *uuid.UUID) *AdminRolePermissionCreate {
	if id != nil {
		arpc = arpc.SetRoleID(*id)
	}
	return arpc
}

// SetRole sets the "role" edge to the AdminRoles entity.
func (arpc *AdminRolePermissionCreate) SetRole(a *AdminRoles) *AdminRolePermissionCreate {
	return arpc.SetRoleID(a.ID)
}

// SetPermissionID sets the "permission" edge to the AdminPermission entity by ID.
func (arpc *AdminRolePermissionCreate) SetPermissionID(id uuid.UUID) *AdminRolePermissionCreate {
	arpc.mutation.SetPermissionID(id)
	return arpc
}

// SetNillablePermissionID sets the "permission" edge to the AdminPermission entity by ID if the given value is not nil.
func (arpc *AdminRolePermissionCreate) SetNillablePermissionID(id *uuid.UUID) *AdminRolePermissionCreate {
	if id != nil {
		arpc = arpc.SetPermissionID(*id)
	}
	return arpc
}

// SetPermission sets the "permission" edge to the AdminPermission entity.
func (arpc *AdminRolePermissionCreate) SetPermission(a *AdminPermission) *AdminRolePermissionCreate {
	return arpc.SetPermissionID(a.ID)
}

// Mutation returns the AdminRolePermissionMutation object of the builder.
func (arpc *AdminRolePermissionCreate) Mutation() *AdminRolePermissionMutation {
	return arpc.mutation
}

// Save creates the AdminRolePermission in the database.
func (arpc *AdminRolePermissionCreate) Save(ctx context.Context) (*AdminRolePermission, error) {
	return withHooks(ctx, arpc.sqlSave, arpc.mutation, arpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arpc *AdminRolePermissionCreate) SaveX(ctx context.Context) *AdminRolePermission {
	v, err := arpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arpc *AdminRolePermissionCreate) Exec(ctx context.Context) error {
	_, err := arpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpc *AdminRolePermissionCreate) ExecX(ctx context.Context) {
	if err := arpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arpc *AdminRolePermissionCreate) check() error {
	return nil
}

func (arpc *AdminRolePermissionCreate) sqlSave(ctx context.Context) (*AdminRolePermission, error) {
	if err := arpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	arpc.mutation.id = &_node.ID
	arpc.mutation.done = true
	return _node, nil
}

func (arpc *AdminRolePermissionCreate) createSpec() (*AdminRolePermission, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminRolePermission{config: arpc.config}
		_spec = sqlgraph.NewCreateSpec(adminrolepermission.Table, sqlgraph.NewFieldSpec(adminrolepermission.FieldID, field.TypeInt))
	)
	if nodes := arpc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.RoleTable,
			Columns: []string{adminrolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminroles.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.admin_roles_permissions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arpc.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminrolepermission.PermissionTable,
			Columns: []string{adminrolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminpermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.admin_permission_roles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminRolePermissionCreateBulk is the builder for creating many AdminRolePermission entities in bulk.
type AdminRolePermissionCreateBulk struct {
	config
	err      error
	builders []*AdminRolePermissionCreate
}

// Save creates the AdminRolePermission entities in the database.
func (arpcb *AdminRolePermissionCreateBulk) Save(ctx context.Context) ([]*AdminRolePermission, error) {
	if arpcb.err != nil {
		return nil, arpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arpcb.builders))
	nodes := make([]*AdminRolePermission, len(arpcb.builders))
	mutators := make([]Mutator, len(arpcb.builders))
	for i := range arpcb.builders {
		func(i int, root context.Context) {
			builder := arpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminRolePermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arpcb *AdminRolePermissionCreateBulk) SaveX(ctx context.Context) []*AdminRolePermission {
	v, err := arpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arpcb *AdminRolePermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := arpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpcb *AdminRolePermissionCreateBulk) ExecX(ctx context.Context) {
	if err := arpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
