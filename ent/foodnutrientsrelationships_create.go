// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"healthmonitor/ent/food"
	"healthmonitor/ent/foodnutrientsrelationships"
	"healthmonitor/ent/nutrient"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FoodNutrientsRelationshipsCreate is the builder for creating a FoodNutrientsRelationships entity.
type FoodNutrientsRelationshipsCreate struct {
	config
	mutation *FoodNutrientsRelationshipsMutation
	hooks    []Hook
}

// SetFoodID sets the "food" edge to the Food entity by ID.
func (fnrc *FoodNutrientsRelationshipsCreate) SetFoodID(id uuid.UUID) *FoodNutrientsRelationshipsCreate {
	fnrc.mutation.SetFoodID(id)
	return fnrc
}

// SetNillableFoodID sets the "food" edge to the Food entity by ID if the given value is not nil.
func (fnrc *FoodNutrientsRelationshipsCreate) SetNillableFoodID(id *uuid.UUID) *FoodNutrientsRelationshipsCreate {
	if id != nil {
		fnrc = fnrc.SetFoodID(*id)
	}
	return fnrc
}

// SetFood sets the "food" edge to the Food entity.
func (fnrc *FoodNutrientsRelationshipsCreate) SetFood(f *Food) *FoodNutrientsRelationshipsCreate {
	return fnrc.SetFoodID(f.ID)
}

// SetNutrientID sets the "nutrient" edge to the Nutrient entity by ID.
func (fnrc *FoodNutrientsRelationshipsCreate) SetNutrientID(id uuid.UUID) *FoodNutrientsRelationshipsCreate {
	fnrc.mutation.SetNutrientID(id)
	return fnrc
}

// SetNillableNutrientID sets the "nutrient" edge to the Nutrient entity by ID if the given value is not nil.
func (fnrc *FoodNutrientsRelationshipsCreate) SetNillableNutrientID(id *uuid.UUID) *FoodNutrientsRelationshipsCreate {
	if id != nil {
		fnrc = fnrc.SetNutrientID(*id)
	}
	return fnrc
}

// SetNutrient sets the "nutrient" edge to the Nutrient entity.
func (fnrc *FoodNutrientsRelationshipsCreate) SetNutrient(n *Nutrient) *FoodNutrientsRelationshipsCreate {
	return fnrc.SetNutrientID(n.ID)
}

// Mutation returns the FoodNutrientsRelationshipsMutation object of the builder.
func (fnrc *FoodNutrientsRelationshipsCreate) Mutation() *FoodNutrientsRelationshipsMutation {
	return fnrc.mutation
}

// Save creates the FoodNutrientsRelationships in the database.
func (fnrc *FoodNutrientsRelationshipsCreate) Save(ctx context.Context) (*FoodNutrientsRelationships, error) {
	return withHooks(ctx, fnrc.sqlSave, fnrc.mutation, fnrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fnrc *FoodNutrientsRelationshipsCreate) SaveX(ctx context.Context) *FoodNutrientsRelationships {
	v, err := fnrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fnrc *FoodNutrientsRelationshipsCreate) Exec(ctx context.Context) error {
	_, err := fnrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnrc *FoodNutrientsRelationshipsCreate) ExecX(ctx context.Context) {
	if err := fnrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fnrc *FoodNutrientsRelationshipsCreate) check() error {
	return nil
}

func (fnrc *FoodNutrientsRelationshipsCreate) sqlSave(ctx context.Context) (*FoodNutrientsRelationships, error) {
	if err := fnrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fnrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fnrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fnrc.mutation.id = &_node.ID
	fnrc.mutation.done = true
	return _node, nil
}

func (fnrc *FoodNutrientsRelationshipsCreate) createSpec() (*FoodNutrientsRelationships, *sqlgraph.CreateSpec) {
	var (
		_node = &FoodNutrientsRelationships{config: fnrc.config}
		_spec = sqlgraph.NewCreateSpec(foodnutrientsrelationships.Table, sqlgraph.NewFieldSpec(foodnutrientsrelationships.FieldID, field.TypeInt))
	)
	if nodes := fnrc.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.FoodTable,
			Columns: []string{foodnutrientsrelationships.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.food_nutrient = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fnrc.mutation.NutrientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrientsrelationships.NutrientTable,
			Columns: []string{foodnutrientsrelationships.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.nutrient_food = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FoodNutrientsRelationshipsCreateBulk is the builder for creating many FoodNutrientsRelationships entities in bulk.
type FoodNutrientsRelationshipsCreateBulk struct {
	config
	err      error
	builders []*FoodNutrientsRelationshipsCreate
}

// Save creates the FoodNutrientsRelationships entities in the database.
func (fnrcb *FoodNutrientsRelationshipsCreateBulk) Save(ctx context.Context) ([]*FoodNutrientsRelationships, error) {
	if fnrcb.err != nil {
		return nil, fnrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fnrcb.builders))
	nodes := make([]*FoodNutrientsRelationships, len(fnrcb.builders))
	mutators := make([]Mutator, len(fnrcb.builders))
	for i := range fnrcb.builders {
		func(i int, root context.Context) {
			builder := fnrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FoodNutrientsRelationshipsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fnrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fnrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fnrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fnrcb *FoodNutrientsRelationshipsCreateBulk) SaveX(ctx context.Context) []*FoodNutrientsRelationships {
	v, err := fnrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fnrcb *FoodNutrientsRelationshipsCreateBulk) Exec(ctx context.Context) error {
	_, err := fnrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnrcb *FoodNutrientsRelationshipsCreateBulk) ExecX(ctx context.Context) {
	if err := fnrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
