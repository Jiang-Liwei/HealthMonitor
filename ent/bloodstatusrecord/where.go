// Code generated by ent, DO NOT EDIT.

package bloodstatusrecord

import (
	"HealthMonitor/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLTE(FieldID, id))
}

// RecordDate applies equality check predicate on the "record_date" field. It's identical to RecordDateEQ.
func RecordDate(v time.Time) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldRecordDate, v))
}

// SystolicPressure applies equality check predicate on the "systolic_pressure" field. It's identical to SystolicPressureEQ.
func SystolicPressure(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldSystolicPressure, v))
}

// DiastolicPressure applies equality check predicate on the "diastolic_pressure" field. It's identical to DiastolicPressureEQ.
func DiastolicPressure(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldDiastolicPressure, v))
}

// Pulse applies equality check predicate on the "pulse" field. It's identical to PulseEQ.
func Pulse(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldPulse, v))
}

// RecordDateEQ applies the EQ predicate on the "record_date" field.
func RecordDateEQ(v time.Time) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldRecordDate, v))
}

// RecordDateNEQ applies the NEQ predicate on the "record_date" field.
func RecordDateNEQ(v time.Time) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNEQ(FieldRecordDate, v))
}

// RecordDateIn applies the In predicate on the "record_date" field.
func RecordDateIn(vs ...time.Time) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldIn(FieldRecordDate, vs...))
}

// RecordDateNotIn applies the NotIn predicate on the "record_date" field.
func RecordDateNotIn(vs ...time.Time) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNotIn(FieldRecordDate, vs...))
}

// RecordDateGT applies the GT predicate on the "record_date" field.
func RecordDateGT(v time.Time) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGT(FieldRecordDate, v))
}

// RecordDateGTE applies the GTE predicate on the "record_date" field.
func RecordDateGTE(v time.Time) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGTE(FieldRecordDate, v))
}

// RecordDateLT applies the LT predicate on the "record_date" field.
func RecordDateLT(v time.Time) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLT(FieldRecordDate, v))
}

// RecordDateLTE applies the LTE predicate on the "record_date" field.
func RecordDateLTE(v time.Time) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLTE(FieldRecordDate, v))
}

// TimeOfDayEQ applies the EQ predicate on the "time_of_day" field.
func TimeOfDayEQ(v TimeOfDay) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldTimeOfDay, v))
}

// TimeOfDayNEQ applies the NEQ predicate on the "time_of_day" field.
func TimeOfDayNEQ(v TimeOfDay) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNEQ(FieldTimeOfDay, v))
}

// TimeOfDayIn applies the In predicate on the "time_of_day" field.
func TimeOfDayIn(vs ...TimeOfDay) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldIn(FieldTimeOfDay, vs...))
}

// TimeOfDayNotIn applies the NotIn predicate on the "time_of_day" field.
func TimeOfDayNotIn(vs ...TimeOfDay) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNotIn(FieldTimeOfDay, vs...))
}

// BeforeAfterMealsEQ applies the EQ predicate on the "before_after_meals" field.
func BeforeAfterMealsEQ(v BeforeAfterMeals) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldBeforeAfterMeals, v))
}

// BeforeAfterMealsNEQ applies the NEQ predicate on the "before_after_meals" field.
func BeforeAfterMealsNEQ(v BeforeAfterMeals) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNEQ(FieldBeforeAfterMeals, v))
}

// BeforeAfterMealsIn applies the In predicate on the "before_after_meals" field.
func BeforeAfterMealsIn(vs ...BeforeAfterMeals) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldIn(FieldBeforeAfterMeals, vs...))
}

// BeforeAfterMealsNotIn applies the NotIn predicate on the "before_after_meals" field.
func BeforeAfterMealsNotIn(vs ...BeforeAfterMeals) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNotIn(FieldBeforeAfterMeals, vs...))
}

// SystolicPressureEQ applies the EQ predicate on the "systolic_pressure" field.
func SystolicPressureEQ(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldSystolicPressure, v))
}

// SystolicPressureNEQ applies the NEQ predicate on the "systolic_pressure" field.
func SystolicPressureNEQ(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNEQ(FieldSystolicPressure, v))
}

// SystolicPressureIn applies the In predicate on the "systolic_pressure" field.
func SystolicPressureIn(vs ...float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldIn(FieldSystolicPressure, vs...))
}

// SystolicPressureNotIn applies the NotIn predicate on the "systolic_pressure" field.
func SystolicPressureNotIn(vs ...float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNotIn(FieldSystolicPressure, vs...))
}

// SystolicPressureGT applies the GT predicate on the "systolic_pressure" field.
func SystolicPressureGT(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGT(FieldSystolicPressure, v))
}

// SystolicPressureGTE applies the GTE predicate on the "systolic_pressure" field.
func SystolicPressureGTE(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGTE(FieldSystolicPressure, v))
}

// SystolicPressureLT applies the LT predicate on the "systolic_pressure" field.
func SystolicPressureLT(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLT(FieldSystolicPressure, v))
}

// SystolicPressureLTE applies the LTE predicate on the "systolic_pressure" field.
func SystolicPressureLTE(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLTE(FieldSystolicPressure, v))
}

// DiastolicPressureEQ applies the EQ predicate on the "diastolic_pressure" field.
func DiastolicPressureEQ(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldDiastolicPressure, v))
}

// DiastolicPressureNEQ applies the NEQ predicate on the "diastolic_pressure" field.
func DiastolicPressureNEQ(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNEQ(FieldDiastolicPressure, v))
}

// DiastolicPressureIn applies the In predicate on the "diastolic_pressure" field.
func DiastolicPressureIn(vs ...float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldIn(FieldDiastolicPressure, vs...))
}

// DiastolicPressureNotIn applies the NotIn predicate on the "diastolic_pressure" field.
func DiastolicPressureNotIn(vs ...float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNotIn(FieldDiastolicPressure, vs...))
}

// DiastolicPressureGT applies the GT predicate on the "diastolic_pressure" field.
func DiastolicPressureGT(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGT(FieldDiastolicPressure, v))
}

// DiastolicPressureGTE applies the GTE predicate on the "diastolic_pressure" field.
func DiastolicPressureGTE(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGTE(FieldDiastolicPressure, v))
}

// DiastolicPressureLT applies the LT predicate on the "diastolic_pressure" field.
func DiastolicPressureLT(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLT(FieldDiastolicPressure, v))
}

// DiastolicPressureLTE applies the LTE predicate on the "diastolic_pressure" field.
func DiastolicPressureLTE(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLTE(FieldDiastolicPressure, v))
}

// PulseEQ applies the EQ predicate on the "pulse" field.
func PulseEQ(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldEQ(FieldPulse, v))
}

// PulseNEQ applies the NEQ predicate on the "pulse" field.
func PulseNEQ(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNEQ(FieldPulse, v))
}

// PulseIn applies the In predicate on the "pulse" field.
func PulseIn(vs ...float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldIn(FieldPulse, vs...))
}

// PulseNotIn applies the NotIn predicate on the "pulse" field.
func PulseNotIn(vs ...float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldNotIn(FieldPulse, vs...))
}

// PulseGT applies the GT predicate on the "pulse" field.
func PulseGT(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGT(FieldPulse, v))
}

// PulseGTE applies the GTE predicate on the "pulse" field.
func PulseGTE(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldGTE(FieldPulse, v))
}

// PulseLT applies the LT predicate on the "pulse" field.
func PulseLT(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLT(FieldPulse, v))
}

// PulseLTE applies the LTE predicate on the "pulse" field.
func PulseLTE(v float64) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.FieldLTE(FieldPulse, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BloodStatusRecord) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BloodStatusRecord) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BloodStatusRecord) predicate.BloodStatusRecord {
	return predicate.BloodStatusRecord(sql.NotPredicates(p))
}
