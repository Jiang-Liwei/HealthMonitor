// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/usermeal"
	"healthmonitor/ent/usermealfood"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserMealCreate is the builder for creating a UserMeal entity.
type UserMealCreate struct {
	config
	mutation *UserMealMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (umc *UserMealCreate) SetUserID(i int) *UserMealCreate {
	umc.mutation.SetUserID(i)
	return umc
}

// SetRecordDate sets the "record_date" field.
func (umc *UserMealCreate) SetRecordDate(t time.Time) *UserMealCreate {
	umc.mutation.SetRecordDate(t)
	return umc
}

// SetMealType sets the "meal_type" field.
func (umc *UserMealCreate) SetMealType(ut usermeal.MealType) *UserMealCreate {
	umc.mutation.SetMealType(ut)
	return umc
}

// SetDescription sets the "description" field.
func (umc *UserMealCreate) SetDescription(s string) *UserMealCreate {
	umc.mutation.SetDescription(s)
	return umc
}

// AddFoodIDs adds the "food" edge to the UserMealFood entity by IDs.
func (umc *UserMealCreate) AddFoodIDs(ids ...int) *UserMealCreate {
	umc.mutation.AddFoodIDs(ids...)
	return umc
}

// AddFood adds the "food" edges to the UserMealFood entity.
func (umc *UserMealCreate) AddFood(u ...*UserMealFood) *UserMealCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return umc.AddFoodIDs(ids...)
}

// Mutation returns the UserMealMutation object of the builder.
func (umc *UserMealCreate) Mutation() *UserMealMutation {
	return umc.mutation
}

// Save creates the UserMeal in the database.
func (umc *UserMealCreate) Save(ctx context.Context) (*UserMeal, error) {
	return withHooks(ctx, umc.sqlSave, umc.mutation, umc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UserMealCreate) SaveX(ctx context.Context) *UserMeal {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umc *UserMealCreate) Exec(ctx context.Context) error {
	_, err := umc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umc *UserMealCreate) ExecX(ctx context.Context) {
	if err := umc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umc *UserMealCreate) check() error {
	if _, ok := umc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserMeal.user_id"`)}
	}
	if _, ok := umc.mutation.RecordDate(); !ok {
		return &ValidationError{Name: "record_date", err: errors.New(`ent: missing required field "UserMeal.record_date"`)}
	}
	if _, ok := umc.mutation.MealType(); !ok {
		return &ValidationError{Name: "meal_type", err: errors.New(`ent: missing required field "UserMeal.meal_type"`)}
	}
	if v, ok := umc.mutation.MealType(); ok {
		if err := usermeal.MealTypeValidator(v); err != nil {
			return &ValidationError{Name: "meal_type", err: fmt.Errorf(`ent: validator failed for field "UserMeal.meal_type": %w`, err)}
		}
	}
	if _, ok := umc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "UserMeal.description"`)}
	}
	return nil
}

func (umc *UserMealCreate) sqlSave(ctx context.Context) (*UserMeal, error) {
	if err := umc.check(); err != nil {
		return nil, err
	}
	_node, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	umc.mutation.id = &_node.ID
	umc.mutation.done = true
	return _node, nil
}

func (umc *UserMealCreate) createSpec() (*UserMeal, *sqlgraph.CreateSpec) {
	var (
		_node = &UserMeal{config: umc.config}
		_spec = sqlgraph.NewCreateSpec(usermeal.Table, sqlgraph.NewFieldSpec(usermeal.FieldID, field.TypeInt))
	)
	if value, ok := umc.mutation.UserID(); ok {
		_spec.SetField(usermeal.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := umc.mutation.RecordDate(); ok {
		_spec.SetField(usermeal.FieldRecordDate, field.TypeTime, value)
		_node.RecordDate = value
	}
	if value, ok := umc.mutation.MealType(); ok {
		_spec.SetField(usermeal.FieldMealType, field.TypeEnum, value)
		_node.MealType = value
	}
	if value, ok := umc.mutation.Description(); ok {
		_spec.SetField(usermeal.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := umc.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermeal.FoodTable,
			Columns: []string{usermeal.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserMealCreateBulk is the builder for creating many UserMeal entities in bulk.
type UserMealCreateBulk struct {
	config
	err      error
	builders []*UserMealCreate
}

// Save creates the UserMeal entities in the database.
func (umcb *UserMealCreateBulk) Save(ctx context.Context) ([]*UserMeal, error) {
	if umcb.err != nil {
		return nil, umcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(umcb.builders))
	nodes := make([]*UserMeal, len(umcb.builders))
	mutators := make([]Mutator, len(umcb.builders))
	for i := range umcb.builders {
		func(i int, root context.Context) {
			builder := umcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMealMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, umcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, umcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, umcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (umcb *UserMealCreateBulk) SaveX(ctx context.Context) []*UserMeal {
	v, err := umcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umcb *UserMealCreateBulk) Exec(ctx context.Context) error {
	_, err := umcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umcb *UserMealCreateBulk) ExecX(ctx context.Context) {
	if err := umcb.Exec(ctx); err != nil {
		panic(err)
	}
}
