// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"healthmonitor/ent/food"
	"healthmonitor/ent/foodingredients"
	"healthmonitor/ent/ingredients"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FoodIngredientsCreate is the builder for creating a FoodIngredients entity.
type FoodIngredientsCreate struct {
	config
	mutation *FoodIngredientsMutation
	hooks    []Hook
}

// SetFoodID sets the "food" edge to the Food entity by ID.
func (fic *FoodIngredientsCreate) SetFoodID(id uuid.UUID) *FoodIngredientsCreate {
	fic.mutation.SetFoodID(id)
	return fic
}

// SetNillableFoodID sets the "food" edge to the Food entity by ID if the given value is not nil.
func (fic *FoodIngredientsCreate) SetNillableFoodID(id *uuid.UUID) *FoodIngredientsCreate {
	if id != nil {
		fic = fic.SetFoodID(*id)
	}
	return fic
}

// SetFood sets the "food" edge to the Food entity.
func (fic *FoodIngredientsCreate) SetFood(f *Food) *FoodIngredientsCreate {
	return fic.SetFoodID(f.ID)
}

// SetIngredientID sets the "ingredient" edge to the Ingredients entity by ID.
func (fic *FoodIngredientsCreate) SetIngredientID(id uuid.UUID) *FoodIngredientsCreate {
	fic.mutation.SetIngredientID(id)
	return fic
}

// SetNillableIngredientID sets the "ingredient" edge to the Ingredients entity by ID if the given value is not nil.
func (fic *FoodIngredientsCreate) SetNillableIngredientID(id *uuid.UUID) *FoodIngredientsCreate {
	if id != nil {
		fic = fic.SetIngredientID(*id)
	}
	return fic
}

// SetIngredient sets the "ingredient" edge to the Ingredients entity.
func (fic *FoodIngredientsCreate) SetIngredient(i *Ingredients) *FoodIngredientsCreate {
	return fic.SetIngredientID(i.ID)
}

// Mutation returns the FoodIngredientsMutation object of the builder.
func (fic *FoodIngredientsCreate) Mutation() *FoodIngredientsMutation {
	return fic.mutation
}

// Save creates the FoodIngredients in the database.
func (fic *FoodIngredientsCreate) Save(ctx context.Context) (*FoodIngredients, error) {
	return withHooks(ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FoodIngredientsCreate) SaveX(ctx context.Context) *FoodIngredients {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FoodIngredientsCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FoodIngredientsCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FoodIngredientsCreate) check() error {
	return nil
}

func (fic *FoodIngredientsCreate) sqlSave(ctx context.Context) (*FoodIngredients, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FoodIngredientsCreate) createSpec() (*FoodIngredients, *sqlgraph.CreateSpec) {
	var (
		_node = &FoodIngredients{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(foodingredients.Table, sqlgraph.NewFieldSpec(foodingredients.FieldID, field.TypeInt))
	)
	if nodes := fic.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodingredients.FoodTable,
			Columns: []string{foodingredients.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.food_ingredients = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.IngredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodingredients.IngredientTable,
			Columns: []string{foodingredients.IngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredients.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ingredients_food = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FoodIngredientsCreateBulk is the builder for creating many FoodIngredients entities in bulk.
type FoodIngredientsCreateBulk struct {
	config
	err      error
	builders []*FoodIngredientsCreate
}

// Save creates the FoodIngredients entities in the database.
func (ficb *FoodIngredientsCreateBulk) Save(ctx context.Context) ([]*FoodIngredients, error) {
	if ficb.err != nil {
		return nil, ficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FoodIngredients, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FoodIngredientsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FoodIngredientsCreateBulk) SaveX(ctx context.Context) []*FoodIngredients {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FoodIngredientsCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FoodIngredientsCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}
