// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"healthmonitor/ent/foodnutrientsrelationships"
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FoodNutrientsRelationshipsDelete is the builder for deleting a FoodNutrientsRelationships entity.
type FoodNutrientsRelationshipsDelete struct {
	config
	hooks    []Hook
	mutation *FoodNutrientsRelationshipsMutation
}

// Where appends a list predicates to the FoodNutrientsRelationshipsDelete builder.
func (fnrd *FoodNutrientsRelationshipsDelete) Where(ps ...predicate.FoodNutrientsRelationships) *FoodNutrientsRelationshipsDelete {
	fnrd.mutation.Where(ps...)
	return fnrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fnrd *FoodNutrientsRelationshipsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fnrd.sqlExec, fnrd.mutation, fnrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fnrd *FoodNutrientsRelationshipsDelete) ExecX(ctx context.Context) int {
	n, err := fnrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fnrd *FoodNutrientsRelationshipsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(foodnutrientsrelationships.Table, sqlgraph.NewFieldSpec(foodnutrientsrelationships.FieldID, field.TypeInt))
	if ps := fnrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fnrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fnrd.mutation.done = true
	return affected, err
}

// FoodNutrientsRelationshipsDeleteOne is the builder for deleting a single FoodNutrientsRelationships entity.
type FoodNutrientsRelationshipsDeleteOne struct {
	fnrd *FoodNutrientsRelationshipsDelete
}

// Where appends a list predicates to the FoodNutrientsRelationshipsDelete builder.
func (fnrdo *FoodNutrientsRelationshipsDeleteOne) Where(ps ...predicate.FoodNutrientsRelationships) *FoodNutrientsRelationshipsDeleteOne {
	fnrdo.fnrd.mutation.Where(ps...)
	return fnrdo
}

// Exec executes the deletion query.
func (fnrdo *FoodNutrientsRelationshipsDeleteOne) Exec(ctx context.Context) error {
	n, err := fnrdo.fnrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{foodnutrientsrelationships.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fnrdo *FoodNutrientsRelationshipsDeleteOne) ExecX(ctx context.Context) {
	if err := fnrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
