// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/adminlog"
	"healthmonitor/ent/adminuser"
	"healthmonitor/ent/adminuserrole"
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AdminUserUpdate is the builder for updating AdminUser entities.
type AdminUserUpdate struct {
	config
	hooks    []Hook
	mutation *AdminUserMutation
}

// Where appends a list predicates to the AdminUserUpdate builder.
func (auu *AdminUserUpdate) Where(ps ...predicate.AdminUser) *AdminUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetUsername sets the "username" field.
func (auu *AdminUserUpdate) SetUsername(s string) *AdminUserUpdate {
	auu.mutation.SetUsername(s)
	return auu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auu *AdminUserUpdate) SetNillableUsername(s *string) *AdminUserUpdate {
	if s != nil {
		auu.SetUsername(*s)
	}
	return auu
}

// SetEmail sets the "email" field.
func (auu *AdminUserUpdate) SetEmail(s string) *AdminUserUpdate {
	auu.mutation.SetEmail(s)
	return auu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auu *AdminUserUpdate) SetNillableEmail(s *string) *AdminUserUpdate {
	if s != nil {
		auu.SetEmail(*s)
	}
	return auu
}

// SetPasswordHash sets the "password_hash" field.
func (auu *AdminUserUpdate) SetPasswordHash(s string) *AdminUserUpdate {
	auu.mutation.SetPasswordHash(s)
	return auu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (auu *AdminUserUpdate) SetNillablePasswordHash(s *string) *AdminUserUpdate {
	if s != nil {
		auu.SetPasswordHash(*s)
	}
	return auu
}

// SetIsActive sets the "is_active" field.
func (auu *AdminUserUpdate) SetIsActive(b bool) *AdminUserUpdate {
	auu.mutation.SetIsActive(b)
	return auu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (auu *AdminUserUpdate) SetNillableIsActive(b *bool) *AdminUserUpdate {
	if b != nil {
		auu.SetIsActive(*b)
	}
	return auu
}

// SetLastLoginAt sets the "last_login_at" field.
func (auu *AdminUserUpdate) SetLastLoginAt(i int) *AdminUserUpdate {
	auu.mutation.ResetLastLoginAt()
	auu.mutation.SetLastLoginAt(i)
	return auu
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (auu *AdminUserUpdate) SetNillableLastLoginAt(i *int) *AdminUserUpdate {
	if i != nil {
		auu.SetLastLoginAt(*i)
	}
	return auu
}

// AddLastLoginAt adds i to the "last_login_at" field.
func (auu *AdminUserUpdate) AddLastLoginAt(i int) *AdminUserUpdate {
	auu.mutation.AddLastLoginAt(i)
	return auu
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (auu *AdminUserUpdate) ClearLastLoginAt() *AdminUserUpdate {
	auu.mutation.ClearLastLoginAt()
	return auu
}

// SetJwtIssuedAt sets the "jwt_issued_at" field.
func (auu *AdminUserUpdate) SetJwtIssuedAt(i int) *AdminUserUpdate {
	auu.mutation.ResetJwtIssuedAt()
	auu.mutation.SetJwtIssuedAt(i)
	return auu
}

// SetNillableJwtIssuedAt sets the "jwt_issued_at" field if the given value is not nil.
func (auu *AdminUserUpdate) SetNillableJwtIssuedAt(i *int) *AdminUserUpdate {
	if i != nil {
		auu.SetJwtIssuedAt(*i)
	}
	return auu
}

// AddJwtIssuedAt adds i to the "jwt_issued_at" field.
func (auu *AdminUserUpdate) AddJwtIssuedAt(i int) *AdminUserUpdate {
	auu.mutation.AddJwtIssuedAt(i)
	return auu
}

// ClearJwtIssuedAt clears the value of the "jwt_issued_at" field.
func (auu *AdminUserUpdate) ClearJwtIssuedAt() *AdminUserUpdate {
	auu.mutation.ClearJwtIssuedAt()
	return auu
}

// SetCreatedAt sets the "created_at" field.
func (auu *AdminUserUpdate) SetCreatedAt(i int) *AdminUserUpdate {
	auu.mutation.ResetCreatedAt()
	auu.mutation.SetCreatedAt(i)
	return auu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auu *AdminUserUpdate) SetNillableCreatedAt(i *int) *AdminUserUpdate {
	if i != nil {
		auu.SetCreatedAt(*i)
	}
	return auu
}

// AddCreatedAt adds i to the "created_at" field.
func (auu *AdminUserUpdate) AddCreatedAt(i int) *AdminUserUpdate {
	auu.mutation.AddCreatedAt(i)
	return auu
}

// SetUpdatedAt sets the "updated_at" field.
func (auu *AdminUserUpdate) SetUpdatedAt(i int) *AdminUserUpdate {
	auu.mutation.ResetUpdatedAt()
	auu.mutation.SetUpdatedAt(i)
	return auu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auu *AdminUserUpdate) SetNillableUpdatedAt(i *int) *AdminUserUpdate {
	if i != nil {
		auu.SetUpdatedAt(*i)
	}
	return auu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (auu *AdminUserUpdate) AddUpdatedAt(i int) *AdminUserUpdate {
	auu.mutation.AddUpdatedAt(i)
	return auu
}

// SetDeletedAt sets the "deleted_at" field.
func (auu *AdminUserUpdate) SetDeletedAt(i int) *AdminUserUpdate {
	auu.mutation.ResetDeletedAt()
	auu.mutation.SetDeletedAt(i)
	return auu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auu *AdminUserUpdate) SetNillableDeletedAt(i *int) *AdminUserUpdate {
	if i != nil {
		auu.SetDeletedAt(*i)
	}
	return auu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (auu *AdminUserUpdate) AddDeletedAt(i int) *AdminUserUpdate {
	auu.mutation.AddDeletedAt(i)
	return auu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auu *AdminUserUpdate) ClearDeletedAt() *AdminUserUpdate {
	auu.mutation.ClearDeletedAt()
	return auu
}

// AddRoleIDs adds the "roles" edge to the AdminUserRole entity by IDs.
func (auu *AdminUserUpdate) AddRoleIDs(ids ...int) *AdminUserUpdate {
	auu.mutation.AddRoleIDs(ids...)
	return auu
}

// AddRoles adds the "roles" edges to the AdminUserRole entity.
func (auu *AdminUserUpdate) AddRoles(a ...*AdminUserRole) *AdminUserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddRoleIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the AdminLog entity by IDs.
func (auu *AdminUserUpdate) AddLogIDs(ids ...uuid.UUID) *AdminUserUpdate {
	auu.mutation.AddLogIDs(ids...)
	return auu
}

// AddLogs adds the "logs" edges to the AdminLog entity.
func (auu *AdminUserUpdate) AddLogs(a ...*AdminLog) *AdminUserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddLogIDs(ids...)
}

// Mutation returns the AdminUserMutation object of the builder.
func (auu *AdminUserUpdate) Mutation() *AdminUserMutation {
	return auu.mutation
}

// ClearRoles clears all "roles" edges to the AdminUserRole entity.
func (auu *AdminUserUpdate) ClearRoles() *AdminUserUpdate {
	auu.mutation.ClearRoles()
	return auu
}

// RemoveRoleIDs removes the "roles" edge to AdminUserRole entities by IDs.
func (auu *AdminUserUpdate) RemoveRoleIDs(ids ...int) *AdminUserUpdate {
	auu.mutation.RemoveRoleIDs(ids...)
	return auu
}

// RemoveRoles removes "roles" edges to AdminUserRole entities.
func (auu *AdminUserUpdate) RemoveRoles(a ...*AdminUserRole) *AdminUserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveRoleIDs(ids...)
}

// ClearLogs clears all "logs" edges to the AdminLog entity.
func (auu *AdminUserUpdate) ClearLogs() *AdminUserUpdate {
	auu.mutation.ClearLogs()
	return auu
}

// RemoveLogIDs removes the "logs" edge to AdminLog entities by IDs.
func (auu *AdminUserUpdate) RemoveLogIDs(ids ...uuid.UUID) *AdminUserUpdate {
	auu.mutation.RemoveLogIDs(ids...)
	return auu
}

// RemoveLogs removes "logs" edges to AdminLog entities.
func (auu *AdminUserUpdate) RemoveLogs(a ...*AdminLog) *AdminUserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AdminUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, auu.sqlSave, auu.mutation, auu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AdminUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AdminUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AdminUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auu *AdminUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminuser.Table, adminuser.Columns, sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeUUID))
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.Username(); ok {
		_spec.SetField(adminuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := auu.mutation.Email(); ok {
		_spec.SetField(adminuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := auu.mutation.PasswordHash(); ok {
		_spec.SetField(adminuser.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := auu.mutation.IsActive(); ok {
		_spec.SetField(adminuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := auu.mutation.LastLoginAt(); ok {
		_spec.SetField(adminuser.FieldLastLoginAt, field.TypeInt, value)
	}
	if value, ok := auu.mutation.AddedLastLoginAt(); ok {
		_spec.AddField(adminuser.FieldLastLoginAt, field.TypeInt, value)
	}
	if auu.mutation.LastLoginAtCleared() {
		_spec.ClearField(adminuser.FieldLastLoginAt, field.TypeInt)
	}
	if value, ok := auu.mutation.JwtIssuedAt(); ok {
		_spec.SetField(adminuser.FieldJwtIssuedAt, field.TypeInt, value)
	}
	if value, ok := auu.mutation.AddedJwtIssuedAt(); ok {
		_spec.AddField(adminuser.FieldJwtIssuedAt, field.TypeInt, value)
	}
	if auu.mutation.JwtIssuedAtCleared() {
		_spec.ClearField(adminuser.FieldJwtIssuedAt, field.TypeInt)
	}
	if value, ok := auu.mutation.CreatedAt(); ok {
		_spec.SetField(adminuser.FieldCreatedAt, field.TypeInt, value)
	}
	if value, ok := auu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(adminuser.FieldCreatedAt, field.TypeInt, value)
	}
	if value, ok := auu.mutation.UpdatedAt(); ok {
		_spec.SetField(adminuser.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := auu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(adminuser.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := auu.mutation.DeletedAt(); ok {
		_spec.SetField(adminuser.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := auu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(adminuser.FieldDeletedAt, field.TypeInt, value)
	}
	if auu.mutation.DeletedAtCleared() {
		_spec.ClearField(adminuser.FieldDeletedAt, field.TypeInt)
	}
	if auu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.RolesTable,
			Columns: []string{adminuser.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuserrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !auu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.RolesTable,
			Columns: []string{adminuser.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuserrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.RolesTable,
			Columns: []string{adminuser.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuserrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.LogsTable,
			Columns: []string{adminuser.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedLogsIDs(); len(nodes) > 0 && !auu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.LogsTable,
			Columns: []string{adminuser.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.LogsTable,
			Columns: []string{adminuser.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	auu.mutation.done = true
	return n, nil
}

// AdminUserUpdateOne is the builder for updating a single AdminUser entity.
type AdminUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminUserMutation
}

// SetUsername sets the "username" field.
func (auuo *AdminUserUpdateOne) SetUsername(s string) *AdminUserUpdateOne {
	auuo.mutation.SetUsername(s)
	return auuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (auuo *AdminUserUpdateOne) SetNillableUsername(s *string) *AdminUserUpdateOne {
	if s != nil {
		auuo.SetUsername(*s)
	}
	return auuo
}

// SetEmail sets the "email" field.
func (auuo *AdminUserUpdateOne) SetEmail(s string) *AdminUserUpdateOne {
	auuo.mutation.SetEmail(s)
	return auuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auuo *AdminUserUpdateOne) SetNillableEmail(s *string) *AdminUserUpdateOne {
	if s != nil {
		auuo.SetEmail(*s)
	}
	return auuo
}

// SetPasswordHash sets the "password_hash" field.
func (auuo *AdminUserUpdateOne) SetPasswordHash(s string) *AdminUserUpdateOne {
	auuo.mutation.SetPasswordHash(s)
	return auuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (auuo *AdminUserUpdateOne) SetNillablePasswordHash(s *string) *AdminUserUpdateOne {
	if s != nil {
		auuo.SetPasswordHash(*s)
	}
	return auuo
}

// SetIsActive sets the "is_active" field.
func (auuo *AdminUserUpdateOne) SetIsActive(b bool) *AdminUserUpdateOne {
	auuo.mutation.SetIsActive(b)
	return auuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (auuo *AdminUserUpdateOne) SetNillableIsActive(b *bool) *AdminUserUpdateOne {
	if b != nil {
		auuo.SetIsActive(*b)
	}
	return auuo
}

// SetLastLoginAt sets the "last_login_at" field.
func (auuo *AdminUserUpdateOne) SetLastLoginAt(i int) *AdminUserUpdateOne {
	auuo.mutation.ResetLastLoginAt()
	auuo.mutation.SetLastLoginAt(i)
	return auuo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (auuo *AdminUserUpdateOne) SetNillableLastLoginAt(i *int) *AdminUserUpdateOne {
	if i != nil {
		auuo.SetLastLoginAt(*i)
	}
	return auuo
}

// AddLastLoginAt adds i to the "last_login_at" field.
func (auuo *AdminUserUpdateOne) AddLastLoginAt(i int) *AdminUserUpdateOne {
	auuo.mutation.AddLastLoginAt(i)
	return auuo
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (auuo *AdminUserUpdateOne) ClearLastLoginAt() *AdminUserUpdateOne {
	auuo.mutation.ClearLastLoginAt()
	return auuo
}

// SetJwtIssuedAt sets the "jwt_issued_at" field.
func (auuo *AdminUserUpdateOne) SetJwtIssuedAt(i int) *AdminUserUpdateOne {
	auuo.mutation.ResetJwtIssuedAt()
	auuo.mutation.SetJwtIssuedAt(i)
	return auuo
}

// SetNillableJwtIssuedAt sets the "jwt_issued_at" field if the given value is not nil.
func (auuo *AdminUserUpdateOne) SetNillableJwtIssuedAt(i *int) *AdminUserUpdateOne {
	if i != nil {
		auuo.SetJwtIssuedAt(*i)
	}
	return auuo
}

// AddJwtIssuedAt adds i to the "jwt_issued_at" field.
func (auuo *AdminUserUpdateOne) AddJwtIssuedAt(i int) *AdminUserUpdateOne {
	auuo.mutation.AddJwtIssuedAt(i)
	return auuo
}

// ClearJwtIssuedAt clears the value of the "jwt_issued_at" field.
func (auuo *AdminUserUpdateOne) ClearJwtIssuedAt() *AdminUserUpdateOne {
	auuo.mutation.ClearJwtIssuedAt()
	return auuo
}

// SetCreatedAt sets the "created_at" field.
func (auuo *AdminUserUpdateOne) SetCreatedAt(i int) *AdminUserUpdateOne {
	auuo.mutation.ResetCreatedAt()
	auuo.mutation.SetCreatedAt(i)
	return auuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auuo *AdminUserUpdateOne) SetNillableCreatedAt(i *int) *AdminUserUpdateOne {
	if i != nil {
		auuo.SetCreatedAt(*i)
	}
	return auuo
}

// AddCreatedAt adds i to the "created_at" field.
func (auuo *AdminUserUpdateOne) AddCreatedAt(i int) *AdminUserUpdateOne {
	auuo.mutation.AddCreatedAt(i)
	return auuo
}

// SetUpdatedAt sets the "updated_at" field.
func (auuo *AdminUserUpdateOne) SetUpdatedAt(i int) *AdminUserUpdateOne {
	auuo.mutation.ResetUpdatedAt()
	auuo.mutation.SetUpdatedAt(i)
	return auuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auuo *AdminUserUpdateOne) SetNillableUpdatedAt(i *int) *AdminUserUpdateOne {
	if i != nil {
		auuo.SetUpdatedAt(*i)
	}
	return auuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (auuo *AdminUserUpdateOne) AddUpdatedAt(i int) *AdminUserUpdateOne {
	auuo.mutation.AddUpdatedAt(i)
	return auuo
}

// SetDeletedAt sets the "deleted_at" field.
func (auuo *AdminUserUpdateOne) SetDeletedAt(i int) *AdminUserUpdateOne {
	auuo.mutation.ResetDeletedAt()
	auuo.mutation.SetDeletedAt(i)
	return auuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auuo *AdminUserUpdateOne) SetNillableDeletedAt(i *int) *AdminUserUpdateOne {
	if i != nil {
		auuo.SetDeletedAt(*i)
	}
	return auuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (auuo *AdminUserUpdateOne) AddDeletedAt(i int) *AdminUserUpdateOne {
	auuo.mutation.AddDeletedAt(i)
	return auuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auuo *AdminUserUpdateOne) ClearDeletedAt() *AdminUserUpdateOne {
	auuo.mutation.ClearDeletedAt()
	return auuo
}

// AddRoleIDs adds the "roles" edge to the AdminUserRole entity by IDs.
func (auuo *AdminUserUpdateOne) AddRoleIDs(ids ...int) *AdminUserUpdateOne {
	auuo.mutation.AddRoleIDs(ids...)
	return auuo
}

// AddRoles adds the "roles" edges to the AdminUserRole entity.
func (auuo *AdminUserUpdateOne) AddRoles(a ...*AdminUserRole) *AdminUserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddRoleIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the AdminLog entity by IDs.
func (auuo *AdminUserUpdateOne) AddLogIDs(ids ...uuid.UUID) *AdminUserUpdateOne {
	auuo.mutation.AddLogIDs(ids...)
	return auuo
}

// AddLogs adds the "logs" edges to the AdminLog entity.
func (auuo *AdminUserUpdateOne) AddLogs(a ...*AdminLog) *AdminUserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddLogIDs(ids...)
}

// Mutation returns the AdminUserMutation object of the builder.
func (auuo *AdminUserUpdateOne) Mutation() *AdminUserMutation {
	return auuo.mutation
}

// ClearRoles clears all "roles" edges to the AdminUserRole entity.
func (auuo *AdminUserUpdateOne) ClearRoles() *AdminUserUpdateOne {
	auuo.mutation.ClearRoles()
	return auuo
}

// RemoveRoleIDs removes the "roles" edge to AdminUserRole entities by IDs.
func (auuo *AdminUserUpdateOne) RemoveRoleIDs(ids ...int) *AdminUserUpdateOne {
	auuo.mutation.RemoveRoleIDs(ids...)
	return auuo
}

// RemoveRoles removes "roles" edges to AdminUserRole entities.
func (auuo *AdminUserUpdateOne) RemoveRoles(a ...*AdminUserRole) *AdminUserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveRoleIDs(ids...)
}

// ClearLogs clears all "logs" edges to the AdminLog entity.
func (auuo *AdminUserUpdateOne) ClearLogs() *AdminUserUpdateOne {
	auuo.mutation.ClearLogs()
	return auuo
}

// RemoveLogIDs removes the "logs" edge to AdminLog entities by IDs.
func (auuo *AdminUserUpdateOne) RemoveLogIDs(ids ...uuid.UUID) *AdminUserUpdateOne {
	auuo.mutation.RemoveLogIDs(ids...)
	return auuo
}

// RemoveLogs removes "logs" edges to AdminLog entities.
func (auuo *AdminUserUpdateOne) RemoveLogs(a ...*AdminLog) *AdminUserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveLogIDs(ids...)
}

// Where appends a list predicates to the AdminUserUpdate builder.
func (auuo *AdminUserUpdateOne) Where(ps ...predicate.AdminUser) *AdminUserUpdateOne {
	auuo.mutation.Where(ps...)
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AdminUserUpdateOne) Select(field string, fields ...string) *AdminUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AdminUser entity.
func (auuo *AdminUserUpdateOne) Save(ctx context.Context) (*AdminUser, error) {
	return withHooks(ctx, auuo.sqlSave, auuo.mutation, auuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AdminUserUpdateOne) SaveX(ctx context.Context) *AdminUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AdminUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AdminUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auuo *AdminUserUpdateOne) sqlSave(ctx context.Context) (_node *AdminUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminuser.Table, adminuser.Columns, sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeUUID))
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminuser.FieldID)
		for _, f := range fields {
			if !adminuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.Username(); ok {
		_spec.SetField(adminuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := auuo.mutation.Email(); ok {
		_spec.SetField(adminuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := auuo.mutation.PasswordHash(); ok {
		_spec.SetField(adminuser.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := auuo.mutation.IsActive(); ok {
		_spec.SetField(adminuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := auuo.mutation.LastLoginAt(); ok {
		_spec.SetField(adminuser.FieldLastLoginAt, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.AddedLastLoginAt(); ok {
		_spec.AddField(adminuser.FieldLastLoginAt, field.TypeInt, value)
	}
	if auuo.mutation.LastLoginAtCleared() {
		_spec.ClearField(adminuser.FieldLastLoginAt, field.TypeInt)
	}
	if value, ok := auuo.mutation.JwtIssuedAt(); ok {
		_spec.SetField(adminuser.FieldJwtIssuedAt, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.AddedJwtIssuedAt(); ok {
		_spec.AddField(adminuser.FieldJwtIssuedAt, field.TypeInt, value)
	}
	if auuo.mutation.JwtIssuedAtCleared() {
		_spec.ClearField(adminuser.FieldJwtIssuedAt, field.TypeInt)
	}
	if value, ok := auuo.mutation.CreatedAt(); ok {
		_spec.SetField(adminuser.FieldCreatedAt, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(adminuser.FieldCreatedAt, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.UpdatedAt(); ok {
		_spec.SetField(adminuser.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(adminuser.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.DeletedAt(); ok {
		_spec.SetField(adminuser.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := auuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(adminuser.FieldDeletedAt, field.TypeInt, value)
	}
	if auuo.mutation.DeletedAtCleared() {
		_spec.ClearField(adminuser.FieldDeletedAt, field.TypeInt)
	}
	if auuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.RolesTable,
			Columns: []string{adminuser.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuserrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !auuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.RolesTable,
			Columns: []string{adminuser.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuserrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.RolesTable,
			Columns: []string{adminuser.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuserrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.LogsTable,
			Columns: []string{adminuser.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedLogsIDs(); len(nodes) > 0 && !auuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.LogsTable,
			Columns: []string{adminuser.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminuser.LogsTable,
			Columns: []string{adminuser.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auuo.mutation.done = true
	return _node, nil
}
