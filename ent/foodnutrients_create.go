// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/food"
	"HealthMonitor/ent/foodnutrients"
	"HealthMonitor/ent/nutrient"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FoodNutrientsCreate is the builder for creating a FoodNutrients entity.
type FoodNutrientsCreate struct {
	config
	mutation *FoodNutrientsMutation
	hooks    []Hook
}

// SetFoodID sets the "food" edge to the Food entity by ID.
func (fnc *FoodNutrientsCreate) SetFoodID(id uuid.UUID) *FoodNutrientsCreate {
	fnc.mutation.SetFoodID(id)
	return fnc
}

// SetNillableFoodID sets the "food" edge to the Food entity by ID if the given value is not nil.
func (fnc *FoodNutrientsCreate) SetNillableFoodID(id *uuid.UUID) *FoodNutrientsCreate {
	if id != nil {
		fnc = fnc.SetFoodID(*id)
	}
	return fnc
}

// SetFood sets the "food" edge to the Food entity.
func (fnc *FoodNutrientsCreate) SetFood(f *Food) *FoodNutrientsCreate {
	return fnc.SetFoodID(f.ID)
}

// SetNutrientID sets the "nutrient" edge to the Nutrient entity by ID.
func (fnc *FoodNutrientsCreate) SetNutrientID(id uuid.UUID) *FoodNutrientsCreate {
	fnc.mutation.SetNutrientID(id)
	return fnc
}

// SetNillableNutrientID sets the "nutrient" edge to the Nutrient entity by ID if the given value is not nil.
func (fnc *FoodNutrientsCreate) SetNillableNutrientID(id *uuid.UUID) *FoodNutrientsCreate {
	if id != nil {
		fnc = fnc.SetNutrientID(*id)
	}
	return fnc
}

// SetNutrient sets the "nutrient" edge to the Nutrient entity.
func (fnc *FoodNutrientsCreate) SetNutrient(n *Nutrient) *FoodNutrientsCreate {
	return fnc.SetNutrientID(n.ID)
}

// Mutation returns the FoodNutrientsMutation object of the builder.
func (fnc *FoodNutrientsCreate) Mutation() *FoodNutrientsMutation {
	return fnc.mutation
}

// Save creates the FoodNutrients in the database.
func (fnc *FoodNutrientsCreate) Save(ctx context.Context) (*FoodNutrients, error) {
	return withHooks(ctx, fnc.sqlSave, fnc.mutation, fnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fnc *FoodNutrientsCreate) SaveX(ctx context.Context) *FoodNutrients {
	v, err := fnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fnc *FoodNutrientsCreate) Exec(ctx context.Context) error {
	_, err := fnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnc *FoodNutrientsCreate) ExecX(ctx context.Context) {
	if err := fnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fnc *FoodNutrientsCreate) check() error {
	return nil
}

func (fnc *FoodNutrientsCreate) sqlSave(ctx context.Context) (*FoodNutrients, error) {
	if err := fnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fnc.mutation.id = &_node.ID
	fnc.mutation.done = true
	return _node, nil
}

func (fnc *FoodNutrientsCreate) createSpec() (*FoodNutrients, *sqlgraph.CreateSpec) {
	var (
		_node = &FoodNutrients{config: fnc.config}
		_spec = sqlgraph.NewCreateSpec(foodnutrients.Table, sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt))
	)
	if nodes := fnc.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrients.FoodTable,
			Columns: []string{foodnutrients.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.food_nutrient = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fnc.mutation.NutrientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodnutrients.NutrientTable,
			Columns: []string{foodnutrients.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.nutrient_food = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FoodNutrientsCreateBulk is the builder for creating many FoodNutrients entities in bulk.
type FoodNutrientsCreateBulk struct {
	config
	err      error
	builders []*FoodNutrientsCreate
}

// Save creates the FoodNutrients entities in the database.
func (fncb *FoodNutrientsCreateBulk) Save(ctx context.Context) ([]*FoodNutrients, error) {
	if fncb.err != nil {
		return nil, fncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fncb.builders))
	nodes := make([]*FoodNutrients, len(fncb.builders))
	mutators := make([]Mutator, len(fncb.builders))
	for i := range fncb.builders {
		func(i int, root context.Context) {
			builder := fncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FoodNutrientsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fncb *FoodNutrientsCreateBulk) SaveX(ctx context.Context) []*FoodNutrients {
	v, err := fncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fncb *FoodNutrientsCreateBulk) Exec(ctx context.Context) error {
	_, err := fncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fncb *FoodNutrientsCreateBulk) ExecX(ctx context.Context) {
	if err := fncb.Exec(ctx); err != nil {
		panic(err)
	}
}
