// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/adminrolepermission"
	"HealthMonitor/ent/adminroles"
	"HealthMonitor/ent/adminuserrole"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AdminRolesCreate is the builder for creating a AdminRoles entity.
type AdminRolesCreate struct {
	config
	mutation *AdminRolesMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (arc *AdminRolesCreate) SetName(s string) *AdminRolesCreate {
	arc.mutation.SetName(s)
	return arc
}

// SetDescription sets the "description" field.
func (arc *AdminRolesCreate) SetDescription(s string) *AdminRolesCreate {
	arc.mutation.SetDescription(s)
	return arc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (arc *AdminRolesCreate) SetNillableDescription(s *string) *AdminRolesCreate {
	if s != nil {
		arc.SetDescription(*s)
	}
	return arc
}

// SetCreatedAt sets the "created_at" field.
func (arc *AdminRolesCreate) SetCreatedAt(t time.Time) *AdminRolesCreate {
	arc.mutation.SetCreatedAt(t)
	return arc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arc *AdminRolesCreate) SetNillableCreatedAt(t *time.Time) *AdminRolesCreate {
	if t != nil {
		arc.SetCreatedAt(*t)
	}
	return arc
}

// SetUpdatedAt sets the "updated_at" field.
func (arc *AdminRolesCreate) SetUpdatedAt(t time.Time) *AdminRolesCreate {
	arc.mutation.SetUpdatedAt(t)
	return arc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (arc *AdminRolesCreate) SetNillableUpdatedAt(t *time.Time) *AdminRolesCreate {
	if t != nil {
		arc.SetUpdatedAt(*t)
	}
	return arc
}

// SetID sets the "id" field.
func (arc *AdminRolesCreate) SetID(u uuid.UUID) *AdminRolesCreate {
	arc.mutation.SetID(u)
	return arc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (arc *AdminRolesCreate) SetNillableID(u *uuid.UUID) *AdminRolesCreate {
	if u != nil {
		arc.SetID(*u)
	}
	return arc
}

// AddPermissionIDs adds the "permissions" edge to the AdminRolePermission entity by IDs.
func (arc *AdminRolesCreate) AddPermissionIDs(ids ...int) *AdminRolesCreate {
	arc.mutation.AddPermissionIDs(ids...)
	return arc
}

// AddPermissions adds the "permissions" edges to the AdminRolePermission entity.
func (arc *AdminRolesCreate) AddPermissions(a ...*AdminRolePermission) *AdminRolesCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arc.AddPermissionIDs(ids...)
}

// AddUserIDs adds the "users" edge to the AdminUserRole entity by IDs.
func (arc *AdminRolesCreate) AddUserIDs(ids ...int) *AdminRolesCreate {
	arc.mutation.AddUserIDs(ids...)
	return arc
}

// AddUsers adds the "users" edges to the AdminUserRole entity.
func (arc *AdminRolesCreate) AddUsers(a ...*AdminUserRole) *AdminRolesCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arc.AddUserIDs(ids...)
}

// Mutation returns the AdminRolesMutation object of the builder.
func (arc *AdminRolesCreate) Mutation() *AdminRolesMutation {
	return arc.mutation
}

// Save creates the AdminRoles in the database.
func (arc *AdminRolesCreate) Save(ctx context.Context) (*AdminRoles, error) {
	arc.defaults()
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AdminRolesCreate) SaveX(ctx context.Context) *AdminRoles {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AdminRolesCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AdminRolesCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *AdminRolesCreate) defaults() {
	if _, ok := arc.mutation.CreatedAt(); !ok {
		v := adminroles.DefaultCreatedAt()
		arc.mutation.SetCreatedAt(v)
	}
	if _, ok := arc.mutation.UpdatedAt(); !ok {
		v := adminroles.DefaultUpdatedAt()
		arc.mutation.SetUpdatedAt(v)
	}
	if _, ok := arc.mutation.ID(); !ok {
		v := adminroles.DefaultID()
		arc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AdminRolesCreate) check() error {
	if _, ok := arc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AdminRoles.name"`)}
	}
	if _, ok := arc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AdminRoles.created_at"`)}
	}
	if _, ok := arc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AdminRoles.updated_at"`)}
	}
	return nil
}

func (arc *AdminRolesCreate) sqlSave(ctx context.Context) (*AdminRoles, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AdminRolesCreate) createSpec() (*AdminRoles, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminRoles{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(adminroles.Table, sqlgraph.NewFieldSpec(adminroles.FieldID, field.TypeUUID))
	)
	if id, ok := arc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := arc.mutation.Name(); ok {
		_spec.SetField(adminroles.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := arc.mutation.Description(); ok {
		_spec.SetField(adminroles.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := arc.mutation.CreatedAt(); ok {
		_spec.SetField(adminroles.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := arc.mutation.UpdatedAt(); ok {
		_spec.SetField(adminroles.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := arc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminroles.PermissionsTable,
			Columns: []string{adminroles.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminrolepermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminroles.UsersTable,
			Columns: []string{adminroles.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuserrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminRolesCreateBulk is the builder for creating many AdminRoles entities in bulk.
type AdminRolesCreateBulk struct {
	config
	err      error
	builders []*AdminRolesCreate
}

// Save creates the AdminRoles entities in the database.
func (arcb *AdminRolesCreateBulk) Save(ctx context.Context) ([]*AdminRoles, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AdminRoles, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminRolesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AdminRolesCreateBulk) SaveX(ctx context.Context) []*AdminRoles {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AdminRolesCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AdminRolesCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
