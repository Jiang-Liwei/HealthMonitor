// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/adminjwtexpiredtokens"
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminJWTExpiredTokensUpdate is the builder for updating AdminJWTExpiredTokens entities.
type AdminJWTExpiredTokensUpdate struct {
	config
	hooks    []Hook
	mutation *AdminJWTExpiredTokensMutation
}

// Where appends a list predicates to the AdminJWTExpiredTokensUpdate builder.
func (ajetu *AdminJWTExpiredTokensUpdate) Where(ps ...predicate.AdminJWTExpiredTokens) *AdminJWTExpiredTokensUpdate {
	ajetu.mutation.Where(ps...)
	return ajetu
}

// SetJti sets the "jti" field.
func (ajetu *AdminJWTExpiredTokensUpdate) SetJti(s string) *AdminJWTExpiredTokensUpdate {
	ajetu.mutation.SetJti(s)
	return ajetu
}

// SetNillableJti sets the "jti" field if the given value is not nil.
func (ajetu *AdminJWTExpiredTokensUpdate) SetNillableJti(s *string) *AdminJWTExpiredTokensUpdate {
	if s != nil {
		ajetu.SetJti(*s)
	}
	return ajetu
}

// SetExpiresAt sets the "expires_at" field.
func (ajetu *AdminJWTExpiredTokensUpdate) SetExpiresAt(i int) *AdminJWTExpiredTokensUpdate {
	ajetu.mutation.ResetExpiresAt()
	ajetu.mutation.SetExpiresAt(i)
	return ajetu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ajetu *AdminJWTExpiredTokensUpdate) SetNillableExpiresAt(i *int) *AdminJWTExpiredTokensUpdate {
	if i != nil {
		ajetu.SetExpiresAt(*i)
	}
	return ajetu
}

// AddExpiresAt adds i to the "expires_at" field.
func (ajetu *AdminJWTExpiredTokensUpdate) AddExpiresAt(i int) *AdminJWTExpiredTokensUpdate {
	ajetu.mutation.AddExpiresAt(i)
	return ajetu
}

// SetRevokedAt sets the "revoked_at" field.
func (ajetu *AdminJWTExpiredTokensUpdate) SetRevokedAt(i int) *AdminJWTExpiredTokensUpdate {
	ajetu.mutation.ResetRevokedAt()
	ajetu.mutation.SetRevokedAt(i)
	return ajetu
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (ajetu *AdminJWTExpiredTokensUpdate) SetNillableRevokedAt(i *int) *AdminJWTExpiredTokensUpdate {
	if i != nil {
		ajetu.SetRevokedAt(*i)
	}
	return ajetu
}

// AddRevokedAt adds i to the "revoked_at" field.
func (ajetu *AdminJWTExpiredTokensUpdate) AddRevokedAt(i int) *AdminJWTExpiredTokensUpdate {
	ajetu.mutation.AddRevokedAt(i)
	return ajetu
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (ajetu *AdminJWTExpiredTokensUpdate) ClearRevokedAt() *AdminJWTExpiredTokensUpdate {
	ajetu.mutation.ClearRevokedAt()
	return ajetu
}

// Mutation returns the AdminJWTExpiredTokensMutation object of the builder.
func (ajetu *AdminJWTExpiredTokensUpdate) Mutation() *AdminJWTExpiredTokensMutation {
	return ajetu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ajetu *AdminJWTExpiredTokensUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ajetu.sqlSave, ajetu.mutation, ajetu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ajetu *AdminJWTExpiredTokensUpdate) SaveX(ctx context.Context) int {
	affected, err := ajetu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ajetu *AdminJWTExpiredTokensUpdate) Exec(ctx context.Context) error {
	_, err := ajetu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ajetu *AdminJWTExpiredTokensUpdate) ExecX(ctx context.Context) {
	if err := ajetu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ajetu *AdminJWTExpiredTokensUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminjwtexpiredtokens.Table, adminjwtexpiredtokens.Columns, sqlgraph.NewFieldSpec(adminjwtexpiredtokens.FieldID, field.TypeInt))
	if ps := ajetu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ajetu.mutation.Jti(); ok {
		_spec.SetField(adminjwtexpiredtokens.FieldJti, field.TypeString, value)
	}
	if value, ok := ajetu.mutation.ExpiresAt(); ok {
		_spec.SetField(adminjwtexpiredtokens.FieldExpiresAt, field.TypeInt, value)
	}
	if value, ok := ajetu.mutation.AddedExpiresAt(); ok {
		_spec.AddField(adminjwtexpiredtokens.FieldExpiresAt, field.TypeInt, value)
	}
	if value, ok := ajetu.mutation.RevokedAt(); ok {
		_spec.SetField(adminjwtexpiredtokens.FieldRevokedAt, field.TypeInt, value)
	}
	if value, ok := ajetu.mutation.AddedRevokedAt(); ok {
		_spec.AddField(adminjwtexpiredtokens.FieldRevokedAt, field.TypeInt, value)
	}
	if ajetu.mutation.RevokedAtCleared() {
		_spec.ClearField(adminjwtexpiredtokens.FieldRevokedAt, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ajetu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminjwtexpiredtokens.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ajetu.mutation.done = true
	return n, nil
}

// AdminJWTExpiredTokensUpdateOne is the builder for updating a single AdminJWTExpiredTokens entity.
type AdminJWTExpiredTokensUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminJWTExpiredTokensMutation
}

// SetJti sets the "jti" field.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) SetJti(s string) *AdminJWTExpiredTokensUpdateOne {
	ajetuo.mutation.SetJti(s)
	return ajetuo
}

// SetNillableJti sets the "jti" field if the given value is not nil.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) SetNillableJti(s *string) *AdminJWTExpiredTokensUpdateOne {
	if s != nil {
		ajetuo.SetJti(*s)
	}
	return ajetuo
}

// SetExpiresAt sets the "expires_at" field.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) SetExpiresAt(i int) *AdminJWTExpiredTokensUpdateOne {
	ajetuo.mutation.ResetExpiresAt()
	ajetuo.mutation.SetExpiresAt(i)
	return ajetuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) SetNillableExpiresAt(i *int) *AdminJWTExpiredTokensUpdateOne {
	if i != nil {
		ajetuo.SetExpiresAt(*i)
	}
	return ajetuo
}

// AddExpiresAt adds i to the "expires_at" field.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) AddExpiresAt(i int) *AdminJWTExpiredTokensUpdateOne {
	ajetuo.mutation.AddExpiresAt(i)
	return ajetuo
}

// SetRevokedAt sets the "revoked_at" field.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) SetRevokedAt(i int) *AdminJWTExpiredTokensUpdateOne {
	ajetuo.mutation.ResetRevokedAt()
	ajetuo.mutation.SetRevokedAt(i)
	return ajetuo
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) SetNillableRevokedAt(i *int) *AdminJWTExpiredTokensUpdateOne {
	if i != nil {
		ajetuo.SetRevokedAt(*i)
	}
	return ajetuo
}

// AddRevokedAt adds i to the "revoked_at" field.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) AddRevokedAt(i int) *AdminJWTExpiredTokensUpdateOne {
	ajetuo.mutation.AddRevokedAt(i)
	return ajetuo
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) ClearRevokedAt() *AdminJWTExpiredTokensUpdateOne {
	ajetuo.mutation.ClearRevokedAt()
	return ajetuo
}

// Mutation returns the AdminJWTExpiredTokensMutation object of the builder.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) Mutation() *AdminJWTExpiredTokensMutation {
	return ajetuo.mutation
}

// Where appends a list predicates to the AdminJWTExpiredTokensUpdate builder.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) Where(ps ...predicate.AdminJWTExpiredTokens) *AdminJWTExpiredTokensUpdateOne {
	ajetuo.mutation.Where(ps...)
	return ajetuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) Select(field string, fields ...string) *AdminJWTExpiredTokensUpdateOne {
	ajetuo.fields = append([]string{field}, fields...)
	return ajetuo
}

// Save executes the query and returns the updated AdminJWTExpiredTokens entity.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) Save(ctx context.Context) (*AdminJWTExpiredTokens, error) {
	return withHooks(ctx, ajetuo.sqlSave, ajetuo.mutation, ajetuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) SaveX(ctx context.Context) *AdminJWTExpiredTokens {
	node, err := ajetuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) Exec(ctx context.Context) error {
	_, err := ajetuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ajetuo *AdminJWTExpiredTokensUpdateOne) ExecX(ctx context.Context) {
	if err := ajetuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ajetuo *AdminJWTExpiredTokensUpdateOne) sqlSave(ctx context.Context) (_node *AdminJWTExpiredTokens, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminjwtexpiredtokens.Table, adminjwtexpiredtokens.Columns, sqlgraph.NewFieldSpec(adminjwtexpiredtokens.FieldID, field.TypeInt))
	id, ok := ajetuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminJWTExpiredTokens.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ajetuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminjwtexpiredtokens.FieldID)
		for _, f := range fields {
			if !adminjwtexpiredtokens.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminjwtexpiredtokens.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ajetuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ajetuo.mutation.Jti(); ok {
		_spec.SetField(adminjwtexpiredtokens.FieldJti, field.TypeString, value)
	}
	if value, ok := ajetuo.mutation.ExpiresAt(); ok {
		_spec.SetField(adminjwtexpiredtokens.FieldExpiresAt, field.TypeInt, value)
	}
	if value, ok := ajetuo.mutation.AddedExpiresAt(); ok {
		_spec.AddField(adminjwtexpiredtokens.FieldExpiresAt, field.TypeInt, value)
	}
	if value, ok := ajetuo.mutation.RevokedAt(); ok {
		_spec.SetField(adminjwtexpiredtokens.FieldRevokedAt, field.TypeInt, value)
	}
	if value, ok := ajetuo.mutation.AddedRevokedAt(); ok {
		_spec.AddField(adminjwtexpiredtokens.FieldRevokedAt, field.TypeInt, value)
	}
	if ajetuo.mutation.RevokedAtCleared() {
		_spec.ClearField(adminjwtexpiredtokens.FieldRevokedAt, field.TypeInt)
	}
	_node = &AdminJWTExpiredTokens{config: ajetuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ajetuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminjwtexpiredtokens.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ajetuo.mutation.done = true
	return _node, nil
}
