// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"healthmonitor/ent/adminuserrole"
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminUserRoleDelete is the builder for deleting a AdminUserRole entity.
type AdminUserRoleDelete struct {
	config
	hooks    []Hook
	mutation *AdminUserRoleMutation
}

// Where appends a list predicates to the AdminUserRoleDelete builder.
func (aurd *AdminUserRoleDelete) Where(ps ...predicate.AdminUserRole) *AdminUserRoleDelete {
	aurd.mutation.Where(ps...)
	return aurd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aurd *AdminUserRoleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aurd.sqlExec, aurd.mutation, aurd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aurd *AdminUserRoleDelete) ExecX(ctx context.Context) int {
	n, err := aurd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aurd *AdminUserRoleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(adminuserrole.Table, sqlgraph.NewFieldSpec(adminuserrole.FieldID, field.TypeInt))
	if ps := aurd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aurd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aurd.mutation.done = true
	return affected, err
}

// AdminUserRoleDeleteOne is the builder for deleting a single AdminUserRole entity.
type AdminUserRoleDeleteOne struct {
	aurd *AdminUserRoleDelete
}

// Where appends a list predicates to the AdminUserRoleDelete builder.
func (aurdo *AdminUserRoleDeleteOne) Where(ps ...predicate.AdminUserRole) *AdminUserRoleDeleteOne {
	aurdo.aurd.mutation.Where(ps...)
	return aurdo
}

// Exec executes the deletion query.
func (aurdo *AdminUserRoleDeleteOne) Exec(ctx context.Context) error {
	n, err := aurdo.aurd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{adminuserrole.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aurdo *AdminUserRoleDeleteOne) ExecX(ctx context.Context) {
	if err := aurdo.Exec(ctx); err != nil {
		panic(err)
	}
}
