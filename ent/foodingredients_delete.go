// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"healthmonitor/ent/foodingredients"
	"healthmonitor/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FoodIngredientsDelete is the builder for deleting a FoodIngredients entity.
type FoodIngredientsDelete struct {
	config
	hooks    []Hook
	mutation *FoodIngredientsMutation
}

// Where appends a list predicates to the FoodIngredientsDelete builder.
func (fid *FoodIngredientsDelete) Where(ps ...predicate.FoodIngredients) *FoodIngredientsDelete {
	fid.mutation.Where(ps...)
	return fid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fid *FoodIngredientsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fid.sqlExec, fid.mutation, fid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fid *FoodIngredientsDelete) ExecX(ctx context.Context) int {
	n, err := fid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fid *FoodIngredientsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(foodingredients.Table, sqlgraph.NewFieldSpec(foodingredients.FieldID, field.TypeInt))
	if ps := fid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fid.mutation.done = true
	return affected, err
}

// FoodIngredientsDeleteOne is the builder for deleting a single FoodIngredients entity.
type FoodIngredientsDeleteOne struct {
	fid *FoodIngredientsDelete
}

// Where appends a list predicates to the FoodIngredientsDelete builder.
func (fido *FoodIngredientsDeleteOne) Where(ps ...predicate.FoodIngredients) *FoodIngredientsDeleteOne {
	fido.fid.mutation.Where(ps...)
	return fido
}

// Exec executes the deletion query.
func (fido *FoodIngredientsDeleteOne) Exec(ctx context.Context) error {
	n, err := fido.fid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{foodingredients.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fido *FoodIngredientsDeleteOne) ExecX(ctx context.Context) {
	if err := fido.Exec(ctx); err != nil {
		panic(err)
	}
}
