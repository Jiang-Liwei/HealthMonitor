// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthmonitor/ent/adminroles"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// AdminRoles is the model entity for the AdminRoles schema.
type AdminRoles struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminRolesQuery when eager-loading is set.
	Edges        AdminRolesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AdminRolesEdges holds the relations/edges for other nodes in the graph.
type AdminRolesEdges struct {
	// Permissions holds the value of the permissions edge.
	Permissions []*AdminRolePermission `json:"permissions,omitempty"`
	// Users holds the value of the users edge.
	Users []*AdminUserRole `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e AdminRolesEdges) PermissionsOrErr() ([]*AdminRolePermission, error) {
	if e.loadedTypes[0] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AdminRolesEdges) UsersOrErr() ([]*AdminUserRole, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminRoles) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminroles.FieldName, adminroles.FieldDescription:
			values[i] = new(sql.NullString)
		case adminroles.FieldCreatedAt, adminroles.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case adminroles.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminRoles fields.
func (ar *AdminRoles) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminroles.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ar.ID = *value
			}
		case adminroles.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ar.Name = value.String
			}
		case adminroles.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ar.Description = value.String
			}
		case adminroles.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ar.CreatedAt = value.Time
			}
		case adminroles.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ar.UpdatedAt = value.Time
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminRoles.
// This includes values selected through modifiers, order, etc.
func (ar *AdminRoles) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryPermissions queries the "permissions" edge of the AdminRoles entity.
func (ar *AdminRoles) QueryPermissions() *AdminRolePermissionQuery {
	return NewAdminRolesClient(ar.config).QueryPermissions(ar)
}

// QueryUsers queries the "users" edge of the AdminRoles entity.
func (ar *AdminRoles) QueryUsers() *AdminUserRoleQuery {
	return NewAdminRolesClient(ar.config).QueryUsers(ar)
}

// Update returns a builder for updating this AdminRoles.
// Note that you need to call AdminRoles.Unwrap() before calling this method if this AdminRoles
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AdminRoles) Update() *AdminRolesUpdateOne {
	return NewAdminRolesClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the AdminRoles entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AdminRoles) Unwrap() *AdminRoles {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminRoles is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AdminRoles) String() string {
	var builder strings.Builder
	builder.WriteString("AdminRoles(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("name=")
	builder.WriteString(ar.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ar.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ar.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ar.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AdminRolesSlice is a parsable slice of AdminRoles.
type AdminRolesSlice []*AdminRoles
