// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/food"
	"HealthMonitor/ent/foodingredients"
	"HealthMonitor/ent/foodnutrients"
	"HealthMonitor/ent/predicate"
	"HealthMonitor/ent/usermealfood"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FoodUpdate is the builder for updating Food entities.
type FoodUpdate struct {
	config
	hooks    []Hook
	mutation *FoodMutation
}

// Where appends a list predicates to the FoodUpdate builder.
func (fu *FoodUpdate) Where(ps ...predicate.Food) *FoodUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FoodUpdate) SetName(s string) *FoodUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableName(s *string) *FoodUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetEffect sets the "effect" field.
func (fu *FoodUpdate) SetEffect(f food.Effect) *FoodUpdate {
	fu.mutation.SetEffect(f)
	return fu
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (fu *FoodUpdate) SetNillableEffect(f *food.Effect) *FoodUpdate {
	if f != nil {
		fu.SetEffect(*f)
	}
	return fu
}

// AddIngredientIDs adds the "ingredients" edge to the FoodIngredients entity by IDs.
func (fu *FoodUpdate) AddIngredientIDs(ids ...int) *FoodUpdate {
	fu.mutation.AddIngredientIDs(ids...)
	return fu
}

// AddIngredients adds the "ingredients" edges to the FoodIngredients entity.
func (fu *FoodUpdate) AddIngredients(f ...*FoodIngredients) *FoodUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddIngredientIDs(ids...)
}

// AddNutrientIDs adds the "nutrient" edge to the FoodNutrients entity by IDs.
func (fu *FoodUpdate) AddNutrientIDs(ids ...int) *FoodUpdate {
	fu.mutation.AddNutrientIDs(ids...)
	return fu
}

// AddNutrient adds the "nutrient" edges to the FoodNutrients entity.
func (fu *FoodUpdate) AddNutrient(f ...*FoodNutrients) *FoodUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddNutrientIDs(ids...)
}

// AddUserMealIDs adds the "user_meal" edge to the UserMealFood entity by IDs.
func (fu *FoodUpdate) AddUserMealIDs(ids ...int) *FoodUpdate {
	fu.mutation.AddUserMealIDs(ids...)
	return fu
}

// AddUserMeal adds the "user_meal" edges to the UserMealFood entity.
func (fu *FoodUpdate) AddUserMeal(u ...*UserMealFood) *FoodUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddUserMealIDs(ids...)
}

// Mutation returns the FoodMutation object of the builder.
func (fu *FoodUpdate) Mutation() *FoodMutation {
	return fu.mutation
}

// ClearIngredients clears all "ingredients" edges to the FoodIngredients entity.
func (fu *FoodUpdate) ClearIngredients() *FoodUpdate {
	fu.mutation.ClearIngredients()
	return fu
}

// RemoveIngredientIDs removes the "ingredients" edge to FoodIngredients entities by IDs.
func (fu *FoodUpdate) RemoveIngredientIDs(ids ...int) *FoodUpdate {
	fu.mutation.RemoveIngredientIDs(ids...)
	return fu
}

// RemoveIngredients removes "ingredients" edges to FoodIngredients entities.
func (fu *FoodUpdate) RemoveIngredients(f ...*FoodIngredients) *FoodUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveIngredientIDs(ids...)
}

// ClearNutrient clears all "nutrient" edges to the FoodNutrients entity.
func (fu *FoodUpdate) ClearNutrient() *FoodUpdate {
	fu.mutation.ClearNutrient()
	return fu
}

// RemoveNutrientIDs removes the "nutrient" edge to FoodNutrients entities by IDs.
func (fu *FoodUpdate) RemoveNutrientIDs(ids ...int) *FoodUpdate {
	fu.mutation.RemoveNutrientIDs(ids...)
	return fu
}

// RemoveNutrient removes "nutrient" edges to FoodNutrients entities.
func (fu *FoodUpdate) RemoveNutrient(f ...*FoodNutrients) *FoodUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveNutrientIDs(ids...)
}

// ClearUserMeal clears all "user_meal" edges to the UserMealFood entity.
func (fu *FoodUpdate) ClearUserMeal() *FoodUpdate {
	fu.mutation.ClearUserMeal()
	return fu
}

// RemoveUserMealIDs removes the "user_meal" edge to UserMealFood entities by IDs.
func (fu *FoodUpdate) RemoveUserMealIDs(ids ...int) *FoodUpdate {
	fu.mutation.RemoveUserMealIDs(ids...)
	return fu
}

// RemoveUserMeal removes "user_meal" edges to UserMealFood entities.
func (fu *FoodUpdate) RemoveUserMeal(u ...*UserMealFood) *FoodUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveUserMealIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FoodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FoodUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FoodUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FoodUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FoodUpdate) check() error {
	if v, ok := fu.mutation.Effect(); ok {
		if err := food.EffectValidator(v); err != nil {
			return &ValidationError{Name: "effect", err: fmt.Errorf(`ent: validator failed for field "Food.effect": %w`, err)}
		}
	}
	return nil
}

func (fu *FoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(food.Table, food.Columns, sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(food.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Effect(); ok {
		_spec.SetField(food.FieldEffect, field.TypeEnum, value)
	}
	if fu.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.IngredientsTable,
			Columns: []string{food.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodingredients.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedIngredientsIDs(); len(nodes) > 0 && !fu.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.IngredientsTable,
			Columns: []string{food.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodingredients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.IngredientsTable,
			Columns: []string{food.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodingredients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.NutrientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.NutrientTable,
			Columns: []string{food.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedNutrientIDs(); len(nodes) > 0 && !fu.mutation.NutrientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.NutrientTable,
			Columns: []string{food.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.NutrientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.NutrientTable,
			Columns: []string{food.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.UserMealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.UserMealTable,
			Columns: []string{food.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedUserMealIDs(); len(nodes) > 0 && !fu.mutation.UserMealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.UserMealTable,
			Columns: []string{food.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserMealIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.UserMealTable,
			Columns: []string{food.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{food.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FoodUpdateOne is the builder for updating a single Food entity.
type FoodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FoodMutation
}

// SetName sets the "name" field.
func (fuo *FoodUpdateOne) SetName(s string) *FoodUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableName(s *string) *FoodUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetEffect sets the "effect" field.
func (fuo *FoodUpdateOne) SetEffect(f food.Effect) *FoodUpdateOne {
	fuo.mutation.SetEffect(f)
	return fuo
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableEffect(f *food.Effect) *FoodUpdateOne {
	if f != nil {
		fuo.SetEffect(*f)
	}
	return fuo
}

// AddIngredientIDs adds the "ingredients" edge to the FoodIngredients entity by IDs.
func (fuo *FoodUpdateOne) AddIngredientIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.AddIngredientIDs(ids...)
	return fuo
}

// AddIngredients adds the "ingredients" edges to the FoodIngredients entity.
func (fuo *FoodUpdateOne) AddIngredients(f ...*FoodIngredients) *FoodUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddIngredientIDs(ids...)
}

// AddNutrientIDs adds the "nutrient" edge to the FoodNutrients entity by IDs.
func (fuo *FoodUpdateOne) AddNutrientIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.AddNutrientIDs(ids...)
	return fuo
}

// AddNutrient adds the "nutrient" edges to the FoodNutrients entity.
func (fuo *FoodUpdateOne) AddNutrient(f ...*FoodNutrients) *FoodUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddNutrientIDs(ids...)
}

// AddUserMealIDs adds the "user_meal" edge to the UserMealFood entity by IDs.
func (fuo *FoodUpdateOne) AddUserMealIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.AddUserMealIDs(ids...)
	return fuo
}

// AddUserMeal adds the "user_meal" edges to the UserMealFood entity.
func (fuo *FoodUpdateOne) AddUserMeal(u ...*UserMealFood) *FoodUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddUserMealIDs(ids...)
}

// Mutation returns the FoodMutation object of the builder.
func (fuo *FoodUpdateOne) Mutation() *FoodMutation {
	return fuo.mutation
}

// ClearIngredients clears all "ingredients" edges to the FoodIngredients entity.
func (fuo *FoodUpdateOne) ClearIngredients() *FoodUpdateOne {
	fuo.mutation.ClearIngredients()
	return fuo
}

// RemoveIngredientIDs removes the "ingredients" edge to FoodIngredients entities by IDs.
func (fuo *FoodUpdateOne) RemoveIngredientIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.RemoveIngredientIDs(ids...)
	return fuo
}

// RemoveIngredients removes "ingredients" edges to FoodIngredients entities.
func (fuo *FoodUpdateOne) RemoveIngredients(f ...*FoodIngredients) *FoodUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveIngredientIDs(ids...)
}

// ClearNutrient clears all "nutrient" edges to the FoodNutrients entity.
func (fuo *FoodUpdateOne) ClearNutrient() *FoodUpdateOne {
	fuo.mutation.ClearNutrient()
	return fuo
}

// RemoveNutrientIDs removes the "nutrient" edge to FoodNutrients entities by IDs.
func (fuo *FoodUpdateOne) RemoveNutrientIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.RemoveNutrientIDs(ids...)
	return fuo
}

// RemoveNutrient removes "nutrient" edges to FoodNutrients entities.
func (fuo *FoodUpdateOne) RemoveNutrient(f ...*FoodNutrients) *FoodUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveNutrientIDs(ids...)
}

// ClearUserMeal clears all "user_meal" edges to the UserMealFood entity.
func (fuo *FoodUpdateOne) ClearUserMeal() *FoodUpdateOne {
	fuo.mutation.ClearUserMeal()
	return fuo
}

// RemoveUserMealIDs removes the "user_meal" edge to UserMealFood entities by IDs.
func (fuo *FoodUpdateOne) RemoveUserMealIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.RemoveUserMealIDs(ids...)
	return fuo
}

// RemoveUserMeal removes "user_meal" edges to UserMealFood entities.
func (fuo *FoodUpdateOne) RemoveUserMeal(u ...*UserMealFood) *FoodUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveUserMealIDs(ids...)
}

// Where appends a list predicates to the FoodUpdate builder.
func (fuo *FoodUpdateOne) Where(ps ...predicate.Food) *FoodUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FoodUpdateOne) Select(field string, fields ...string) *FoodUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Food entity.
func (fuo *FoodUpdateOne) Save(ctx context.Context) (*Food, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FoodUpdateOne) SaveX(ctx context.Context) *Food {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FoodUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FoodUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FoodUpdateOne) check() error {
	if v, ok := fuo.mutation.Effect(); ok {
		if err := food.EffectValidator(v); err != nil {
			return &ValidationError{Name: "effect", err: fmt.Errorf(`ent: validator failed for field "Food.effect": %w`, err)}
		}
	}
	return nil
}

func (fuo *FoodUpdateOne) sqlSave(ctx context.Context) (_node *Food, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(food.Table, food.Columns, sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Food.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, food.FieldID)
		for _, f := range fields {
			if !food.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != food.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(food.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Effect(); ok {
		_spec.SetField(food.FieldEffect, field.TypeEnum, value)
	}
	if fuo.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.IngredientsTable,
			Columns: []string{food.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodingredients.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedIngredientsIDs(); len(nodes) > 0 && !fuo.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.IngredientsTable,
			Columns: []string{food.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodingredients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.IngredientsTable,
			Columns: []string{food.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodingredients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.NutrientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.NutrientTable,
			Columns: []string{food.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedNutrientIDs(); len(nodes) > 0 && !fuo.mutation.NutrientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.NutrientTable,
			Columns: []string{food.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.NutrientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.NutrientTable,
			Columns: []string{food.NutrientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodnutrients.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.UserMealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.UserMealTable,
			Columns: []string{food.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedUserMealIDs(); len(nodes) > 0 && !fuo.mutation.UserMealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.UserMealTable,
			Columns: []string{food.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserMealIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.UserMealTable,
			Columns: []string{food.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Food{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{food.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
