// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/adminroles"
	"HealthMonitor/ent/adminuser"
	"HealthMonitor/ent/adminuserrole"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// AdminUserRole is the model entity for the AdminUserRole schema.
type AdminUserRole struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminUserRoleQuery when eager-loading is set.
	Edges             AdminUserRoleEdges `json:"edges"`
	admin_roles_users *uuid.UUID
	admin_user_roles  *uuid.UUID
	selectValues      sql.SelectValues
}

// AdminUserRoleEdges holds the relations/edges for other nodes in the graph.
type AdminUserRoleEdges struct {
	// User holds the value of the user edge.
	User *AdminUser `json:"user,omitempty"`
	// Role holds the value of the role edge.
	Role *AdminRoles `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminUserRoleEdges) UserOrErr() (*AdminUser, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: adminuser.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminUserRoleEdges) RoleOrErr() (*AdminRoles, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: adminroles.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminUserRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminuserrole.FieldID:
			values[i] = new(sql.NullInt64)
		case adminuserrole.ForeignKeys[0]: // admin_roles_users
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case adminuserrole.ForeignKeys[1]: // admin_user_roles
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminUserRole fields.
func (aur *AdminUserRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminuserrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aur.ID = int(value.Int64)
		case adminuserrole.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field admin_roles_users", values[i])
			} else if value.Valid {
				aur.admin_roles_users = new(uuid.UUID)
				*aur.admin_roles_users = *value.S.(*uuid.UUID)
			}
		case adminuserrole.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field admin_user_roles", values[i])
			} else if value.Valid {
				aur.admin_user_roles = new(uuid.UUID)
				*aur.admin_user_roles = *value.S.(*uuid.UUID)
			}
		default:
			aur.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminUserRole.
// This includes values selected through modifiers, order, etc.
func (aur *AdminUserRole) Value(name string) (ent.Value, error) {
	return aur.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the AdminUserRole entity.
func (aur *AdminUserRole) QueryUser() *AdminUserQuery {
	return NewAdminUserRoleClient(aur.config).QueryUser(aur)
}

// QueryRole queries the "role" edge of the AdminUserRole entity.
func (aur *AdminUserRole) QueryRole() *AdminRolesQuery {
	return NewAdminUserRoleClient(aur.config).QueryRole(aur)
}

// Update returns a builder for updating this AdminUserRole.
// Note that you need to call AdminUserRole.Unwrap() before calling this method if this AdminUserRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (aur *AdminUserRole) Update() *AdminUserRoleUpdateOne {
	return NewAdminUserRoleClient(aur.config).UpdateOne(aur)
}

// Unwrap unwraps the AdminUserRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aur *AdminUserRole) Unwrap() *AdminUserRole {
	_tx, ok := aur.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminUserRole is not a transactional entity")
	}
	aur.config.driver = _tx.drv
	return aur
}

// String implements the fmt.Stringer.
func (aur *AdminUserRole) String() string {
	var builder strings.Builder
	builder.WriteString("AdminUserRole(")
	builder.WriteString(fmt.Sprintf("id=%v", aur.ID))
	builder.WriteByte(')')
	return builder.String()
}

// AdminUserRoles is a parsable slice of AdminUserRole.
type AdminUserRoles []*AdminUserRole
