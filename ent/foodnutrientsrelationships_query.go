// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"healthmonitor/ent/food"
	"healthmonitor/ent/foodnutrientsrelationships"
	"healthmonitor/ent/nutrient"
	"healthmonitor/ent/predicate"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FoodNutrientsRelationshipsQuery is the builder for querying FoodNutrientsRelationships entities.
type FoodNutrientsRelationshipsQuery struct {
	config
	ctx          *QueryContext
	order        []foodnutrientsrelationships.OrderOption
	inters       []Interceptor
	predicates   []predicate.FoodNutrientsRelationships
	withFood     *FoodQuery
	withNutrient *NutrientQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FoodNutrientsRelationshipsQuery builder.
func (fnrq *FoodNutrientsRelationshipsQuery) Where(ps ...predicate.FoodNutrientsRelationships) *FoodNutrientsRelationshipsQuery {
	fnrq.predicates = append(fnrq.predicates, ps...)
	return fnrq
}

// Limit the number of records to be returned by this query.
func (fnrq *FoodNutrientsRelationshipsQuery) Limit(limit int) *FoodNutrientsRelationshipsQuery {
	fnrq.ctx.Limit = &limit
	return fnrq
}

// Offset to start from.
func (fnrq *FoodNutrientsRelationshipsQuery) Offset(offset int) *FoodNutrientsRelationshipsQuery {
	fnrq.ctx.Offset = &offset
	return fnrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fnrq *FoodNutrientsRelationshipsQuery) Unique(unique bool) *FoodNutrientsRelationshipsQuery {
	fnrq.ctx.Unique = &unique
	return fnrq
}

// Order specifies how the records should be ordered.
func (fnrq *FoodNutrientsRelationshipsQuery) Order(o ...foodnutrientsrelationships.OrderOption) *FoodNutrientsRelationshipsQuery {
	fnrq.order = append(fnrq.order, o...)
	return fnrq
}

// QueryFood chains the current query on the "food" edge.
func (fnrq *FoodNutrientsRelationshipsQuery) QueryFood() *FoodQuery {
	query := (&FoodClient{config: fnrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fnrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fnrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(foodnutrientsrelationships.Table, foodnutrientsrelationships.FieldID, selector),
			sqlgraph.To(food.Table, food.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodnutrientsrelationships.FoodTable, foodnutrientsrelationships.FoodColumn),
		)
		fromU = sqlgraph.SetNeighbors(fnrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNutrient chains the current query on the "nutrient" edge.
func (fnrq *FoodNutrientsRelationshipsQuery) QueryNutrient() *NutrientQuery {
	query := (&NutrientClient{config: fnrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fnrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fnrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(foodnutrientsrelationships.Table, foodnutrientsrelationships.FieldID, selector),
			sqlgraph.To(nutrient.Table, nutrient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodnutrientsrelationships.NutrientTable, foodnutrientsrelationships.NutrientColumn),
		)
		fromU = sqlgraph.SetNeighbors(fnrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FoodNutrientsRelationships entity from the query.
// Returns a *NotFoundError when no FoodNutrientsRelationships was found.
func (fnrq *FoodNutrientsRelationshipsQuery) First(ctx context.Context) (*FoodNutrientsRelationships, error) {
	nodes, err := fnrq.Limit(1).All(setContextOp(ctx, fnrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{foodnutrientsrelationships.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fnrq *FoodNutrientsRelationshipsQuery) FirstX(ctx context.Context) *FoodNutrientsRelationships {
	node, err := fnrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FoodNutrientsRelationships ID from the query.
// Returns a *NotFoundError when no FoodNutrientsRelationships ID was found.
func (fnrq *FoodNutrientsRelationshipsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fnrq.Limit(1).IDs(setContextOp(ctx, fnrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{foodnutrientsrelationships.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fnrq *FoodNutrientsRelationshipsQuery) FirstIDX(ctx context.Context) int {
	id, err := fnrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FoodNutrientsRelationships entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FoodNutrientsRelationships entity is found.
// Returns a *NotFoundError when no FoodNutrientsRelationships entities are found.
func (fnrq *FoodNutrientsRelationshipsQuery) Only(ctx context.Context) (*FoodNutrientsRelationships, error) {
	nodes, err := fnrq.Limit(2).All(setContextOp(ctx, fnrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{foodnutrientsrelationships.Label}
	default:
		return nil, &NotSingularError{foodnutrientsrelationships.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fnrq *FoodNutrientsRelationshipsQuery) OnlyX(ctx context.Context) *FoodNutrientsRelationships {
	node, err := fnrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FoodNutrientsRelationships ID in the query.
// Returns a *NotSingularError when more than one FoodNutrientsRelationships ID is found.
// Returns a *NotFoundError when no entities are found.
func (fnrq *FoodNutrientsRelationshipsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fnrq.Limit(2).IDs(setContextOp(ctx, fnrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{foodnutrientsrelationships.Label}
	default:
		err = &NotSingularError{foodnutrientsrelationships.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fnrq *FoodNutrientsRelationshipsQuery) OnlyIDX(ctx context.Context) int {
	id, err := fnrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FoodNutrientsRelationshipsSlice.
func (fnrq *FoodNutrientsRelationshipsQuery) All(ctx context.Context) ([]*FoodNutrientsRelationships, error) {
	ctx = setContextOp(ctx, fnrq.ctx, ent.OpQueryAll)
	if err := fnrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FoodNutrientsRelationships, *FoodNutrientsRelationshipsQuery]()
	return withInterceptors[[]*FoodNutrientsRelationships](ctx, fnrq, qr, fnrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fnrq *FoodNutrientsRelationshipsQuery) AllX(ctx context.Context) []*FoodNutrientsRelationships {
	nodes, err := fnrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FoodNutrientsRelationships IDs.
func (fnrq *FoodNutrientsRelationshipsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fnrq.ctx.Unique == nil && fnrq.path != nil {
		fnrq.Unique(true)
	}
	ctx = setContextOp(ctx, fnrq.ctx, ent.OpQueryIDs)
	if err = fnrq.Select(foodnutrientsrelationships.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fnrq *FoodNutrientsRelationshipsQuery) IDsX(ctx context.Context) []int {
	ids, err := fnrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fnrq *FoodNutrientsRelationshipsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fnrq.ctx, ent.OpQueryCount)
	if err := fnrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fnrq, querierCount[*FoodNutrientsRelationshipsQuery](), fnrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fnrq *FoodNutrientsRelationshipsQuery) CountX(ctx context.Context) int {
	count, err := fnrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fnrq *FoodNutrientsRelationshipsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fnrq.ctx, ent.OpQueryExist)
	switch _, err := fnrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fnrq *FoodNutrientsRelationshipsQuery) ExistX(ctx context.Context) bool {
	exist, err := fnrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FoodNutrientsRelationshipsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fnrq *FoodNutrientsRelationshipsQuery) Clone() *FoodNutrientsRelationshipsQuery {
	if fnrq == nil {
		return nil
	}
	return &FoodNutrientsRelationshipsQuery{
		config:       fnrq.config,
		ctx:          fnrq.ctx.Clone(),
		order:        append([]foodnutrientsrelationships.OrderOption{}, fnrq.order...),
		inters:       append([]Interceptor{}, fnrq.inters...),
		predicates:   append([]predicate.FoodNutrientsRelationships{}, fnrq.predicates...),
		withFood:     fnrq.withFood.Clone(),
		withNutrient: fnrq.withNutrient.Clone(),
		// clone intermediate query.
		sql:  fnrq.sql.Clone(),
		path: fnrq.path,
	}
}

// WithFood tells the query-builder to eager-load the nodes that are connected to
// the "food" edge. The optional arguments are used to configure the query builder of the edge.
func (fnrq *FoodNutrientsRelationshipsQuery) WithFood(opts ...func(*FoodQuery)) *FoodNutrientsRelationshipsQuery {
	query := (&FoodClient{config: fnrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fnrq.withFood = query
	return fnrq
}

// WithNutrient tells the query-builder to eager-load the nodes that are connected to
// the "nutrient" edge. The optional arguments are used to configure the query builder of the edge.
func (fnrq *FoodNutrientsRelationshipsQuery) WithNutrient(opts ...func(*NutrientQuery)) *FoodNutrientsRelationshipsQuery {
	query := (&NutrientClient{config: fnrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fnrq.withNutrient = query
	return fnrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (fnrq *FoodNutrientsRelationshipsQuery) GroupBy(field string, fields ...string) *FoodNutrientsRelationshipsGroupBy {
	fnrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FoodNutrientsRelationshipsGroupBy{build: fnrq}
	grbuild.flds = &fnrq.ctx.Fields
	grbuild.label = foodnutrientsrelationships.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (fnrq *FoodNutrientsRelationshipsQuery) Select(fields ...string) *FoodNutrientsRelationshipsSelect {
	fnrq.ctx.Fields = append(fnrq.ctx.Fields, fields...)
	sbuild := &FoodNutrientsRelationshipsSelect{FoodNutrientsRelationshipsQuery: fnrq}
	sbuild.label = foodnutrientsrelationships.Label
	sbuild.flds, sbuild.scan = &fnrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FoodNutrientsRelationshipsSelect configured with the given aggregations.
func (fnrq *FoodNutrientsRelationshipsQuery) Aggregate(fns ...AggregateFunc) *FoodNutrientsRelationshipsSelect {
	return fnrq.Select().Aggregate(fns...)
}

func (fnrq *FoodNutrientsRelationshipsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fnrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fnrq); err != nil {
				return err
			}
		}
	}
	for _, f := range fnrq.ctx.Fields {
		if !foodnutrientsrelationships.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fnrq.path != nil {
		prev, err := fnrq.path(ctx)
		if err != nil {
			return err
		}
		fnrq.sql = prev
	}
	return nil
}

func (fnrq *FoodNutrientsRelationshipsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FoodNutrientsRelationships, error) {
	var (
		nodes       = []*FoodNutrientsRelationships{}
		withFKs     = fnrq.withFKs
		_spec       = fnrq.querySpec()
		loadedTypes = [2]bool{
			fnrq.withFood != nil,
			fnrq.withNutrient != nil,
		}
	)
	if fnrq.withFood != nil || fnrq.withNutrient != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, foodnutrientsrelationships.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FoodNutrientsRelationships).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FoodNutrientsRelationships{config: fnrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fnrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fnrq.withFood; query != nil {
		if err := fnrq.loadFood(ctx, query, nodes, nil,
			func(n *FoodNutrientsRelationships, e *Food) { n.Edges.Food = e }); err != nil {
			return nil, err
		}
	}
	if query := fnrq.withNutrient; query != nil {
		if err := fnrq.loadNutrient(ctx, query, nodes, nil,
			func(n *FoodNutrientsRelationships, e *Nutrient) { n.Edges.Nutrient = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fnrq *FoodNutrientsRelationshipsQuery) loadFood(ctx context.Context, query *FoodQuery, nodes []*FoodNutrientsRelationships, init func(*FoodNutrientsRelationships), assign func(*FoodNutrientsRelationships, *Food)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FoodNutrientsRelationships)
	for i := range nodes {
		if nodes[i].food_nutrient == nil {
			continue
		}
		fk := *nodes[i].food_nutrient
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(food.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "food_nutrient" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fnrq *FoodNutrientsRelationshipsQuery) loadNutrient(ctx context.Context, query *NutrientQuery, nodes []*FoodNutrientsRelationships, init func(*FoodNutrientsRelationships), assign func(*FoodNutrientsRelationships, *Nutrient)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FoodNutrientsRelationships)
	for i := range nodes {
		if nodes[i].nutrient_food == nil {
			continue
		}
		fk := *nodes[i].nutrient_food
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(nutrient.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "nutrient_food" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fnrq *FoodNutrientsRelationshipsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fnrq.querySpec()
	_spec.Node.Columns = fnrq.ctx.Fields
	if len(fnrq.ctx.Fields) > 0 {
		_spec.Unique = fnrq.ctx.Unique != nil && *fnrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fnrq.driver, _spec)
}

func (fnrq *FoodNutrientsRelationshipsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(foodnutrientsrelationships.Table, foodnutrientsrelationships.Columns, sqlgraph.NewFieldSpec(foodnutrientsrelationships.FieldID, field.TypeInt))
	_spec.From = fnrq.sql
	if unique := fnrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fnrq.path != nil {
		_spec.Unique = true
	}
	if fields := fnrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, foodnutrientsrelationships.FieldID)
		for i := range fields {
			if fields[i] != foodnutrientsrelationships.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fnrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fnrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fnrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fnrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fnrq *FoodNutrientsRelationshipsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fnrq.driver.Dialect())
	t1 := builder.Table(foodnutrientsrelationships.Table)
	columns := fnrq.ctx.Fields
	if len(columns) == 0 {
		columns = foodnutrientsrelationships.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fnrq.sql != nil {
		selector = fnrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fnrq.ctx.Unique != nil && *fnrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fnrq.predicates {
		p(selector)
	}
	for _, p := range fnrq.order {
		p(selector)
	}
	if offset := fnrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fnrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FoodNutrientsRelationshipsGroupBy is the group-by builder for FoodNutrientsRelationships entities.
type FoodNutrientsRelationshipsGroupBy struct {
	selector
	build *FoodNutrientsRelationshipsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fnrgb *FoodNutrientsRelationshipsGroupBy) Aggregate(fns ...AggregateFunc) *FoodNutrientsRelationshipsGroupBy {
	fnrgb.fns = append(fnrgb.fns, fns...)
	return fnrgb
}

// Scan applies the selector query and scans the result into the given value.
func (fnrgb *FoodNutrientsRelationshipsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fnrgb.build.ctx, ent.OpQueryGroupBy)
	if err := fnrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FoodNutrientsRelationshipsQuery, *FoodNutrientsRelationshipsGroupBy](ctx, fnrgb.build, fnrgb, fnrgb.build.inters, v)
}

func (fnrgb *FoodNutrientsRelationshipsGroupBy) sqlScan(ctx context.Context, root *FoodNutrientsRelationshipsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fnrgb.fns))
	for _, fn := range fnrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fnrgb.flds)+len(fnrgb.fns))
		for _, f := range *fnrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fnrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fnrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FoodNutrientsRelationshipsSelect is the builder for selecting fields of FoodNutrientsRelationships entities.
type FoodNutrientsRelationshipsSelect struct {
	*FoodNutrientsRelationshipsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fnrs *FoodNutrientsRelationshipsSelect) Aggregate(fns ...AggregateFunc) *FoodNutrientsRelationshipsSelect {
	fnrs.fns = append(fnrs.fns, fns...)
	return fnrs
}

// Scan applies the selector query and scans the result into the given value.
func (fnrs *FoodNutrientsRelationshipsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fnrs.ctx, ent.OpQuerySelect)
	if err := fnrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FoodNutrientsRelationshipsQuery, *FoodNutrientsRelationshipsSelect](ctx, fnrs.FoodNutrientsRelationshipsQuery, fnrs, fnrs.inters, v)
}

func (fnrs *FoodNutrientsRelationshipsSelect) sqlScan(ctx context.Context, root *FoodNutrientsRelationshipsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fnrs.fns))
	for _, fn := range fnrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fnrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fnrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
