// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/predicate"
	"healthmonitor/ent/usermeal"
	"healthmonitor/ent/usermealfood"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserMealUpdate is the builder for updating UserMeal entities.
type UserMealUpdate struct {
	config
	hooks    []Hook
	mutation *UserMealMutation
}

// Where appends a list predicates to the UserMealUpdate builder.
func (umu *UserMealUpdate) Where(ps ...predicate.UserMeal) *UserMealUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetUserID sets the "user_id" field.
func (umu *UserMealUpdate) SetUserID(i int) *UserMealUpdate {
	umu.mutation.ResetUserID()
	umu.mutation.SetUserID(i)
	return umu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (umu *UserMealUpdate) SetNillableUserID(i *int) *UserMealUpdate {
	if i != nil {
		umu.SetUserID(*i)
	}
	return umu
}

// AddUserID adds i to the "user_id" field.
func (umu *UserMealUpdate) AddUserID(i int) *UserMealUpdate {
	umu.mutation.AddUserID(i)
	return umu
}

// SetRecordDate sets the "record_date" field.
func (umu *UserMealUpdate) SetRecordDate(t time.Time) *UserMealUpdate {
	umu.mutation.SetRecordDate(t)
	return umu
}

// SetNillableRecordDate sets the "record_date" field if the given value is not nil.
func (umu *UserMealUpdate) SetNillableRecordDate(t *time.Time) *UserMealUpdate {
	if t != nil {
		umu.SetRecordDate(*t)
	}
	return umu
}

// SetMealType sets the "meal_type" field.
func (umu *UserMealUpdate) SetMealType(ut usermeal.MealType) *UserMealUpdate {
	umu.mutation.SetMealType(ut)
	return umu
}

// SetNillableMealType sets the "meal_type" field if the given value is not nil.
func (umu *UserMealUpdate) SetNillableMealType(ut *usermeal.MealType) *UserMealUpdate {
	if ut != nil {
		umu.SetMealType(*ut)
	}
	return umu
}

// SetDescription sets the "description" field.
func (umu *UserMealUpdate) SetDescription(s string) *UserMealUpdate {
	umu.mutation.SetDescription(s)
	return umu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (umu *UserMealUpdate) SetNillableDescription(s *string) *UserMealUpdate {
	if s != nil {
		umu.SetDescription(*s)
	}
	return umu
}

// AddFoodIDs adds the "food" edge to the UserMealFood entity by IDs.
func (umu *UserMealUpdate) AddFoodIDs(ids ...int) *UserMealUpdate {
	umu.mutation.AddFoodIDs(ids...)
	return umu
}

// AddFood adds the "food" edges to the UserMealFood entity.
func (umu *UserMealUpdate) AddFood(u ...*UserMealFood) *UserMealUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return umu.AddFoodIDs(ids...)
}

// Mutation returns the UserMealMutation object of the builder.
func (umu *UserMealUpdate) Mutation() *UserMealMutation {
	return umu.mutation
}

// ClearFood clears all "food" edges to the UserMealFood entity.
func (umu *UserMealUpdate) ClearFood() *UserMealUpdate {
	umu.mutation.ClearFood()
	return umu
}

// RemoveFoodIDs removes the "food" edge to UserMealFood entities by IDs.
func (umu *UserMealUpdate) RemoveFoodIDs(ids ...int) *UserMealUpdate {
	umu.mutation.RemoveFoodIDs(ids...)
	return umu
}

// RemoveFood removes "food" edges to UserMealFood entities.
func (umu *UserMealUpdate) RemoveFood(u ...*UserMealFood) *UserMealUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return umu.RemoveFoodIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserMealUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, umu.sqlSave, umu.mutation, umu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserMealUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserMealUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserMealUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umu *UserMealUpdate) check() error {
	if v, ok := umu.mutation.MealType(); ok {
		if err := usermeal.MealTypeValidator(v); err != nil {
			return &ValidationError{Name: "meal_type", err: fmt.Errorf(`ent: validator failed for field "UserMeal.meal_type": %w`, err)}
		}
	}
	return nil
}

func (umu *UserMealUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := umu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usermeal.Table, usermeal.Columns, sqlgraph.NewFieldSpec(usermeal.FieldID, field.TypeInt))
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.UserID(); ok {
		_spec.SetField(usermeal.FieldUserID, field.TypeInt, value)
	}
	if value, ok := umu.mutation.AddedUserID(); ok {
		_spec.AddField(usermeal.FieldUserID, field.TypeInt, value)
	}
	if value, ok := umu.mutation.RecordDate(); ok {
		_spec.SetField(usermeal.FieldRecordDate, field.TypeTime, value)
	}
	if value, ok := umu.mutation.MealType(); ok {
		_spec.SetField(usermeal.FieldMealType, field.TypeEnum, value)
	}
	if value, ok := umu.mutation.Description(); ok {
		_spec.SetField(usermeal.FieldDescription, field.TypeString, value)
	}
	if umu.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermeal.FoodTable,
			Columns: []string{usermeal.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedFoodIDs(); len(nodes) > 0 && !umu.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermeal.FoodTable,
			Columns: []string{usermeal.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermeal.FoodTable,
			Columns: []string{usermeal.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermeal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	umu.mutation.done = true
	return n, nil
}

// UserMealUpdateOne is the builder for updating a single UserMeal entity.
type UserMealUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMealMutation
}

// SetUserID sets the "user_id" field.
func (umuo *UserMealUpdateOne) SetUserID(i int) *UserMealUpdateOne {
	umuo.mutation.ResetUserID()
	umuo.mutation.SetUserID(i)
	return umuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (umuo *UserMealUpdateOne) SetNillableUserID(i *int) *UserMealUpdateOne {
	if i != nil {
		umuo.SetUserID(*i)
	}
	return umuo
}

// AddUserID adds i to the "user_id" field.
func (umuo *UserMealUpdateOne) AddUserID(i int) *UserMealUpdateOne {
	umuo.mutation.AddUserID(i)
	return umuo
}

// SetRecordDate sets the "record_date" field.
func (umuo *UserMealUpdateOne) SetRecordDate(t time.Time) *UserMealUpdateOne {
	umuo.mutation.SetRecordDate(t)
	return umuo
}

// SetNillableRecordDate sets the "record_date" field if the given value is not nil.
func (umuo *UserMealUpdateOne) SetNillableRecordDate(t *time.Time) *UserMealUpdateOne {
	if t != nil {
		umuo.SetRecordDate(*t)
	}
	return umuo
}

// SetMealType sets the "meal_type" field.
func (umuo *UserMealUpdateOne) SetMealType(ut usermeal.MealType) *UserMealUpdateOne {
	umuo.mutation.SetMealType(ut)
	return umuo
}

// SetNillableMealType sets the "meal_type" field if the given value is not nil.
func (umuo *UserMealUpdateOne) SetNillableMealType(ut *usermeal.MealType) *UserMealUpdateOne {
	if ut != nil {
		umuo.SetMealType(*ut)
	}
	return umuo
}

// SetDescription sets the "description" field.
func (umuo *UserMealUpdateOne) SetDescription(s string) *UserMealUpdateOne {
	umuo.mutation.SetDescription(s)
	return umuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (umuo *UserMealUpdateOne) SetNillableDescription(s *string) *UserMealUpdateOne {
	if s != nil {
		umuo.SetDescription(*s)
	}
	return umuo
}

// AddFoodIDs adds the "food" edge to the UserMealFood entity by IDs.
func (umuo *UserMealUpdateOne) AddFoodIDs(ids ...int) *UserMealUpdateOne {
	umuo.mutation.AddFoodIDs(ids...)
	return umuo
}

// AddFood adds the "food" edges to the UserMealFood entity.
func (umuo *UserMealUpdateOne) AddFood(u ...*UserMealFood) *UserMealUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return umuo.AddFoodIDs(ids...)
}

// Mutation returns the UserMealMutation object of the builder.
func (umuo *UserMealUpdateOne) Mutation() *UserMealMutation {
	return umuo.mutation
}

// ClearFood clears all "food" edges to the UserMealFood entity.
func (umuo *UserMealUpdateOne) ClearFood() *UserMealUpdateOne {
	umuo.mutation.ClearFood()
	return umuo
}

// RemoveFoodIDs removes the "food" edge to UserMealFood entities by IDs.
func (umuo *UserMealUpdateOne) RemoveFoodIDs(ids ...int) *UserMealUpdateOne {
	umuo.mutation.RemoveFoodIDs(ids...)
	return umuo
}

// RemoveFood removes "food" edges to UserMealFood entities.
func (umuo *UserMealUpdateOne) RemoveFood(u ...*UserMealFood) *UserMealUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return umuo.RemoveFoodIDs(ids...)
}

// Where appends a list predicates to the UserMealUpdate builder.
func (umuo *UserMealUpdateOne) Where(ps ...predicate.UserMeal) *UserMealUpdateOne {
	umuo.mutation.Where(ps...)
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserMealUpdateOne) Select(field string, fields ...string) *UserMealUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserMeal entity.
func (umuo *UserMealUpdateOne) Save(ctx context.Context) (*UserMeal, error) {
	return withHooks(ctx, umuo.sqlSave, umuo.mutation, umuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserMealUpdateOne) SaveX(ctx context.Context) *UserMeal {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserMealUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserMealUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umuo *UserMealUpdateOne) check() error {
	if v, ok := umuo.mutation.MealType(); ok {
		if err := usermeal.MealTypeValidator(v); err != nil {
			return &ValidationError{Name: "meal_type", err: fmt.Errorf(`ent: validator failed for field "UserMeal.meal_type": %w`, err)}
		}
	}
	return nil
}

func (umuo *UserMealUpdateOne) sqlSave(ctx context.Context) (_node *UserMeal, err error) {
	if err := umuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usermeal.Table, usermeal.Columns, sqlgraph.NewFieldSpec(usermeal.FieldID, field.TypeInt))
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserMeal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermeal.FieldID)
		for _, f := range fields {
			if !usermeal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermeal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.UserID(); ok {
		_spec.SetField(usermeal.FieldUserID, field.TypeInt, value)
	}
	if value, ok := umuo.mutation.AddedUserID(); ok {
		_spec.AddField(usermeal.FieldUserID, field.TypeInt, value)
	}
	if value, ok := umuo.mutation.RecordDate(); ok {
		_spec.SetField(usermeal.FieldRecordDate, field.TypeTime, value)
	}
	if value, ok := umuo.mutation.MealType(); ok {
		_spec.SetField(usermeal.FieldMealType, field.TypeEnum, value)
	}
	if value, ok := umuo.mutation.Description(); ok {
		_spec.SetField(usermeal.FieldDescription, field.TypeString, value)
	}
	if umuo.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermeal.FoodTable,
			Columns: []string{usermeal.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedFoodIDs(); len(nodes) > 0 && !umuo.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermeal.FoodTable,
			Columns: []string{usermeal.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermeal.FoodTable,
			Columns: []string{usermeal.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserMeal{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermeal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	umuo.mutation.done = true
	return _node, nil
}
