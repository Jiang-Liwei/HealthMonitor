// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/adminpermission"
	"HealthMonitor/ent/adminrolepermission"
	"HealthMonitor/ent/adminroles"
	"HealthMonitor/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AdminRolePermissionQuery is the builder for querying AdminRolePermission entities.
type AdminRolePermissionQuery struct {
	config
	ctx            *QueryContext
	order          []adminrolepermission.OrderOption
	inters         []Interceptor
	predicates     []predicate.AdminRolePermission
	withRole       *AdminRolesQuery
	withPermission *AdminPermissionQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdminRolePermissionQuery builder.
func (arpq *AdminRolePermissionQuery) Where(ps ...predicate.AdminRolePermission) *AdminRolePermissionQuery {
	arpq.predicates = append(arpq.predicates, ps...)
	return arpq
}

// Limit the number of records to be returned by this query.
func (arpq *AdminRolePermissionQuery) Limit(limit int) *AdminRolePermissionQuery {
	arpq.ctx.Limit = &limit
	return arpq
}

// Offset to start from.
func (arpq *AdminRolePermissionQuery) Offset(offset int) *AdminRolePermissionQuery {
	arpq.ctx.Offset = &offset
	return arpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (arpq *AdminRolePermissionQuery) Unique(unique bool) *AdminRolePermissionQuery {
	arpq.ctx.Unique = &unique
	return arpq
}

// Order specifies how the records should be ordered.
func (arpq *AdminRolePermissionQuery) Order(o ...adminrolepermission.OrderOption) *AdminRolePermissionQuery {
	arpq.order = append(arpq.order, o...)
	return arpq
}

// QueryRole chains the current query on the "role" edge.
func (arpq *AdminRolePermissionQuery) QueryRole() *AdminRolesQuery {
	query := (&AdminRolesClient{config: arpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adminrolepermission.Table, adminrolepermission.FieldID, selector),
			sqlgraph.To(adminroles.Table, adminroles.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminrolepermission.RoleTable, adminrolepermission.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(arpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPermission chains the current query on the "permission" edge.
func (arpq *AdminRolePermissionQuery) QueryPermission() *AdminPermissionQuery {
	query := (&AdminPermissionClient{config: arpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adminrolepermission.Table, adminrolepermission.FieldID, selector),
			sqlgraph.To(adminpermission.Table, adminpermission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminrolepermission.PermissionTable, adminrolepermission.PermissionColumn),
		)
		fromU = sqlgraph.SetNeighbors(arpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AdminRolePermission entity from the query.
// Returns a *NotFoundError when no AdminRolePermission was found.
func (arpq *AdminRolePermissionQuery) First(ctx context.Context) (*AdminRolePermission, error) {
	nodes, err := arpq.Limit(1).All(setContextOp(ctx, arpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{adminrolepermission.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (arpq *AdminRolePermissionQuery) FirstX(ctx context.Context) *AdminRolePermission {
	node, err := arpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AdminRolePermission ID from the query.
// Returns a *NotFoundError when no AdminRolePermission ID was found.
func (arpq *AdminRolePermissionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = arpq.Limit(1).IDs(setContextOp(ctx, arpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{adminrolepermission.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (arpq *AdminRolePermissionQuery) FirstIDX(ctx context.Context) int {
	id, err := arpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AdminRolePermission entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AdminRolePermission entity is found.
// Returns a *NotFoundError when no AdminRolePermission entities are found.
func (arpq *AdminRolePermissionQuery) Only(ctx context.Context) (*AdminRolePermission, error) {
	nodes, err := arpq.Limit(2).All(setContextOp(ctx, arpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{adminrolepermission.Label}
	default:
		return nil, &NotSingularError{adminrolepermission.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (arpq *AdminRolePermissionQuery) OnlyX(ctx context.Context) *AdminRolePermission {
	node, err := arpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AdminRolePermission ID in the query.
// Returns a *NotSingularError when more than one AdminRolePermission ID is found.
// Returns a *NotFoundError when no entities are found.
func (arpq *AdminRolePermissionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = arpq.Limit(2).IDs(setContextOp(ctx, arpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{adminrolepermission.Label}
	default:
		err = &NotSingularError{adminrolepermission.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (arpq *AdminRolePermissionQuery) OnlyIDX(ctx context.Context) int {
	id, err := arpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AdminRolePermissions.
func (arpq *AdminRolePermissionQuery) All(ctx context.Context) ([]*AdminRolePermission, error) {
	ctx = setContextOp(ctx, arpq.ctx, ent.OpQueryAll)
	if err := arpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AdminRolePermission, *AdminRolePermissionQuery]()
	return withInterceptors[[]*AdminRolePermission](ctx, arpq, qr, arpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (arpq *AdminRolePermissionQuery) AllX(ctx context.Context) []*AdminRolePermission {
	nodes, err := arpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AdminRolePermission IDs.
func (arpq *AdminRolePermissionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if arpq.ctx.Unique == nil && arpq.path != nil {
		arpq.Unique(true)
	}
	ctx = setContextOp(ctx, arpq.ctx, ent.OpQueryIDs)
	if err = arpq.Select(adminrolepermission.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (arpq *AdminRolePermissionQuery) IDsX(ctx context.Context) []int {
	ids, err := arpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (arpq *AdminRolePermissionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, arpq.ctx, ent.OpQueryCount)
	if err := arpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, arpq, querierCount[*AdminRolePermissionQuery](), arpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (arpq *AdminRolePermissionQuery) CountX(ctx context.Context) int {
	count, err := arpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (arpq *AdminRolePermissionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, arpq.ctx, ent.OpQueryExist)
	switch _, err := arpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (arpq *AdminRolePermissionQuery) ExistX(ctx context.Context) bool {
	exist, err := arpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdminRolePermissionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (arpq *AdminRolePermissionQuery) Clone() *AdminRolePermissionQuery {
	if arpq == nil {
		return nil
	}
	return &AdminRolePermissionQuery{
		config:         arpq.config,
		ctx:            arpq.ctx.Clone(),
		order:          append([]adminrolepermission.OrderOption{}, arpq.order...),
		inters:         append([]Interceptor{}, arpq.inters...),
		predicates:     append([]predicate.AdminRolePermission{}, arpq.predicates...),
		withRole:       arpq.withRole.Clone(),
		withPermission: arpq.withPermission.Clone(),
		// clone intermediate query.
		sql:  arpq.sql.Clone(),
		path: arpq.path,
	}
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (arpq *AdminRolePermissionQuery) WithRole(opts ...func(*AdminRolesQuery)) *AdminRolePermissionQuery {
	query := (&AdminRolesClient{config: arpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arpq.withRole = query
	return arpq
}

// WithPermission tells the query-builder to eager-load the nodes that are connected to
// the "permission" edge. The optional arguments are used to configure the query builder of the edge.
func (arpq *AdminRolePermissionQuery) WithPermission(opts ...func(*AdminPermissionQuery)) *AdminRolePermissionQuery {
	query := (&AdminPermissionClient{config: arpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arpq.withPermission = query
	return arpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (arpq *AdminRolePermissionQuery) GroupBy(field string, fields ...string) *AdminRolePermissionGroupBy {
	arpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AdminRolePermissionGroupBy{build: arpq}
	grbuild.flds = &arpq.ctx.Fields
	grbuild.label = adminrolepermission.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (arpq *AdminRolePermissionQuery) Select(fields ...string) *AdminRolePermissionSelect {
	arpq.ctx.Fields = append(arpq.ctx.Fields, fields...)
	sbuild := &AdminRolePermissionSelect{AdminRolePermissionQuery: arpq}
	sbuild.label = adminrolepermission.Label
	sbuild.flds, sbuild.scan = &arpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AdminRolePermissionSelect configured with the given aggregations.
func (arpq *AdminRolePermissionQuery) Aggregate(fns ...AggregateFunc) *AdminRolePermissionSelect {
	return arpq.Select().Aggregate(fns...)
}

func (arpq *AdminRolePermissionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range arpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, arpq); err != nil {
				return err
			}
		}
	}
	for _, f := range arpq.ctx.Fields {
		if !adminrolepermission.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if arpq.path != nil {
		prev, err := arpq.path(ctx)
		if err != nil {
			return err
		}
		arpq.sql = prev
	}
	return nil
}

func (arpq *AdminRolePermissionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AdminRolePermission, error) {
	var (
		nodes       = []*AdminRolePermission{}
		withFKs     = arpq.withFKs
		_spec       = arpq.querySpec()
		loadedTypes = [2]bool{
			arpq.withRole != nil,
			arpq.withPermission != nil,
		}
	)
	if arpq.withRole != nil || arpq.withPermission != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, adminrolepermission.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AdminRolePermission).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AdminRolePermission{config: arpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, arpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := arpq.withRole; query != nil {
		if err := arpq.loadRole(ctx, query, nodes, nil,
			func(n *AdminRolePermission, e *AdminRoles) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	if query := arpq.withPermission; query != nil {
		if err := arpq.loadPermission(ctx, query, nodes, nil,
			func(n *AdminRolePermission, e *AdminPermission) { n.Edges.Permission = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (arpq *AdminRolePermissionQuery) loadRole(ctx context.Context, query *AdminRolesQuery, nodes []*AdminRolePermission, init func(*AdminRolePermission), assign func(*AdminRolePermission, *AdminRoles)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AdminRolePermission)
	for i := range nodes {
		if nodes[i].admin_roles_permissions == nil {
			continue
		}
		fk := *nodes[i].admin_roles_permissions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(adminroles.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "admin_roles_permissions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (arpq *AdminRolePermissionQuery) loadPermission(ctx context.Context, query *AdminPermissionQuery, nodes []*AdminRolePermission, init func(*AdminRolePermission), assign func(*AdminRolePermission, *AdminPermission)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*AdminRolePermission)
	for i := range nodes {
		if nodes[i].admin_permission_roles == nil {
			continue
		}
		fk := *nodes[i].admin_permission_roles
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(adminpermission.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "admin_permission_roles" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (arpq *AdminRolePermissionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := arpq.querySpec()
	_spec.Node.Columns = arpq.ctx.Fields
	if len(arpq.ctx.Fields) > 0 {
		_spec.Unique = arpq.ctx.Unique != nil && *arpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, arpq.driver, _spec)
}

func (arpq *AdminRolePermissionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(adminrolepermission.Table, adminrolepermission.Columns, sqlgraph.NewFieldSpec(adminrolepermission.FieldID, field.TypeInt))
	_spec.From = arpq.sql
	if unique := arpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if arpq.path != nil {
		_spec.Unique = true
	}
	if fields := arpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminrolepermission.FieldID)
		for i := range fields {
			if fields[i] != adminrolepermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := arpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := arpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := arpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := arpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (arpq *AdminRolePermissionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(arpq.driver.Dialect())
	t1 := builder.Table(adminrolepermission.Table)
	columns := arpq.ctx.Fields
	if len(columns) == 0 {
		columns = adminrolepermission.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if arpq.sql != nil {
		selector = arpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if arpq.ctx.Unique != nil && *arpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range arpq.predicates {
		p(selector)
	}
	for _, p := range arpq.order {
		p(selector)
	}
	if offset := arpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := arpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AdminRolePermissionGroupBy is the group-by builder for AdminRolePermission entities.
type AdminRolePermissionGroupBy struct {
	selector
	build *AdminRolePermissionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (arpgb *AdminRolePermissionGroupBy) Aggregate(fns ...AggregateFunc) *AdminRolePermissionGroupBy {
	arpgb.fns = append(arpgb.fns, fns...)
	return arpgb
}

// Scan applies the selector query and scans the result into the given value.
func (arpgb *AdminRolePermissionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, arpgb.build.ctx, ent.OpQueryGroupBy)
	if err := arpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AdminRolePermissionQuery, *AdminRolePermissionGroupBy](ctx, arpgb.build, arpgb, arpgb.build.inters, v)
}

func (arpgb *AdminRolePermissionGroupBy) sqlScan(ctx context.Context, root *AdminRolePermissionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(arpgb.fns))
	for _, fn := range arpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*arpgb.flds)+len(arpgb.fns))
		for _, f := range *arpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*arpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := arpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AdminRolePermissionSelect is the builder for selecting fields of AdminRolePermission entities.
type AdminRolePermissionSelect struct {
	*AdminRolePermissionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (arps *AdminRolePermissionSelect) Aggregate(fns ...AggregateFunc) *AdminRolePermissionSelect {
	arps.fns = append(arps.fns, fns...)
	return arps
}

// Scan applies the selector query and scans the result into the given value.
func (arps *AdminRolePermissionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, arps.ctx, ent.OpQuerySelect)
	if err := arps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AdminRolePermissionQuery, *AdminRolePermissionSelect](ctx, arps.AdminRolePermissionQuery, arps, arps.inters, v)
}

func (arps *AdminRolePermissionSelect) sqlScan(ctx context.Context, root *AdminRolePermissionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(arps.fns))
	for _, fn := range arps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*arps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := arps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
