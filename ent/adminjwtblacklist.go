// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthmonitor/ent/adminjwtblacklist"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AdminJWTBlacklist is the model entity for the AdminJWTBlacklist schema.
type AdminJWTBlacklist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Jti holds the value of the "jti" field.
	Jti string `json:"jti,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// RevokedAt holds the value of the "revoked_at" field.
	RevokedAt    time.Time `json:"revoked_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminJWTBlacklist) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminjwtblacklist.FieldID:
			values[i] = new(sql.NullInt64)
		case adminjwtblacklist.FieldJti:
			values[i] = new(sql.NullString)
		case adminjwtblacklist.FieldExpiresAt, adminjwtblacklist.FieldRevokedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminJWTBlacklist fields.
func (ajb *AdminJWTBlacklist) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminjwtblacklist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ajb.ID = int(value.Int64)
		case adminjwtblacklist.FieldJti:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jti", values[i])
			} else if value.Valid {
				ajb.Jti = value.String
			}
		case adminjwtblacklist.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				ajb.ExpiresAt = value.Time
			}
		case adminjwtblacklist.FieldRevokedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field revoked_at", values[i])
			} else if value.Valid {
				ajb.RevokedAt = value.Time
			}
		default:
			ajb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminJWTBlacklist.
// This includes values selected through modifiers, order, etc.
func (ajb *AdminJWTBlacklist) Value(name string) (ent.Value, error) {
	return ajb.selectValues.Get(name)
}

// Update returns a builder for updating this AdminJWTBlacklist.
// Note that you need to call AdminJWTBlacklist.Unwrap() before calling this method if this AdminJWTBlacklist
// was returned from a transaction, and the transaction was committed or rolled back.
func (ajb *AdminJWTBlacklist) Update() *AdminJWTBlacklistUpdateOne {
	return NewAdminJWTBlacklistClient(ajb.config).UpdateOne(ajb)
}

// Unwrap unwraps the AdminJWTBlacklist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ajb *AdminJWTBlacklist) Unwrap() *AdminJWTBlacklist {
	_tx, ok := ajb.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminJWTBlacklist is not a transactional entity")
	}
	ajb.config.driver = _tx.drv
	return ajb
}

// String implements the fmt.Stringer.
func (ajb *AdminJWTBlacklist) String() string {
	var builder strings.Builder
	builder.WriteString("AdminJWTBlacklist(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ajb.ID))
	builder.WriteString("jti=")
	builder.WriteString(ajb.Jti)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(ajb.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("revoked_at=")
	builder.WriteString(ajb.RevokedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AdminJWTBlacklists is a parsable slice of AdminJWTBlacklist.
type AdminJWTBlacklists []*AdminJWTBlacklist
