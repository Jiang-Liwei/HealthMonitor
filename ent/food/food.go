// Code generated by ent, DO NOT EDIT.

package food

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the food type in the database.
	Label = "food"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEffect holds the string denoting the effect field in the database.
	FieldEffect = "effect"
	// EdgeIngredients holds the string denoting the ingredients edge name in mutations.
	EdgeIngredients = "ingredients"
	// EdgeNutrient holds the string denoting the nutrient edge name in mutations.
	EdgeNutrient = "nutrient"
	// EdgeUserMeal holds the string denoting the user_meal edge name in mutations.
	EdgeUserMeal = "user_meal"
	// Table holds the table name of the food in the database.
	Table = "foods"
	// IngredientsTable is the table that holds the ingredients relation/edge.
	IngredientsTable = "food_ingredients"
	// IngredientsInverseTable is the table name for the FoodIngredients entity.
	// It exists in this package in order to avoid circular dependency with the "foodingredients" package.
	IngredientsInverseTable = "food_ingredients"
	// IngredientsColumn is the table column denoting the ingredients relation/edge.
	IngredientsColumn = "food_ingredients"
	// NutrientTable is the table that holds the nutrient relation/edge.
	NutrientTable = "food_nutrients_relationships"
	// NutrientInverseTable is the table name for the FoodNutrientsRelationships entity.
	// It exists in this package in order to avoid circular dependency with the "foodnutrientsrelationships" package.
	NutrientInverseTable = "food_nutrients_relationships"
	// NutrientColumn is the table column denoting the nutrient relation/edge.
	NutrientColumn = "food_nutrient"
	// UserMealTable is the table that holds the user_meal relation/edge.
	UserMealTable = "user_meal_foods"
	// UserMealInverseTable is the table name for the UserMealFood entity.
	// It exists in this package in order to avoid circular dependency with the "usermealfood" package.
	UserMealInverseTable = "user_meal_foods"
	// UserMealColumn is the table column denoting the user_meal relation/edge.
	UserMealColumn = "food_user_meal"
)

// Columns holds all SQL columns for food fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEffect,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Effect defines the type for the "effect" enum field.
type Effect string

// Effect values.
const (
	EffectBeneficial Effect = "beneficial"
	EffectNeutral    Effect = "neutral"
	EffectHarmful    Effect = "harmful"
)

func (e Effect) String() string {
	return string(e)
}

// EffectValidator is a validator for the "effect" field enum values. It is called by the builders before save.
func EffectValidator(e Effect) error {
	switch e {
	case EffectBeneficial, EffectNeutral, EffectHarmful:
		return nil
	default:
		return fmt.Errorf("food: invalid enum value for effect field: %q", e)
	}
}

// OrderOption defines the ordering options for the Food queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEffect orders the results by the effect field.
func ByEffect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffect, opts...).ToFunc()
}

// ByIngredientsCount orders the results by ingredients count.
func ByIngredientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIngredientsStep(), opts...)
	}
}

// ByIngredients orders the results by ingredients terms.
func ByIngredients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIngredientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNutrientCount orders the results by nutrient count.
func ByNutrientCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNutrientStep(), opts...)
	}
}

// ByNutrient orders the results by nutrient terms.
func ByNutrient(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNutrientStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserMealCount orders the results by user_meal count.
func ByUserMealCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserMealStep(), opts...)
	}
}

// ByUserMeal orders the results by user_meal terms.
func ByUserMeal(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserMealStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIngredientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IngredientsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IngredientsTable, IngredientsColumn),
	)
}
func newNutrientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NutrientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NutrientTable, NutrientColumn),
	)
}
func newUserMealStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserMealInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserMealTable, UserMealColumn),
	)
}
