// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/bloodstatusrecord"
	"healthmonitor/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BloodStatusRecordUpdate is the builder for updating BloodStatusRecord entities.
type BloodStatusRecordUpdate struct {
	config
	hooks    []Hook
	mutation *BloodStatusRecordMutation
}

// Where appends a list predicates to the BloodStatusRecordUpdate builder.
func (bsru *BloodStatusRecordUpdate) Where(ps ...predicate.BloodStatusRecord) *BloodStatusRecordUpdate {
	bsru.mutation.Where(ps...)
	return bsru
}

// SetUserID sets the "user_id" field.
func (bsru *BloodStatusRecordUpdate) SetUserID(u uuid.UUID) *BloodStatusRecordUpdate {
	bsru.mutation.SetUserID(u)
	return bsru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bsru *BloodStatusRecordUpdate) SetNillableUserID(u *uuid.UUID) *BloodStatusRecordUpdate {
	if u != nil {
		bsru.SetUserID(*u)
	}
	return bsru
}

// SetRecordDate sets the "record_date" field.
func (bsru *BloodStatusRecordUpdate) SetRecordDate(t time.Time) *BloodStatusRecordUpdate {
	bsru.mutation.SetRecordDate(t)
	return bsru
}

// SetNillableRecordDate sets the "record_date" field if the given value is not nil.
func (bsru *BloodStatusRecordUpdate) SetNillableRecordDate(t *time.Time) *BloodStatusRecordUpdate {
	if t != nil {
		bsru.SetRecordDate(*t)
	}
	return bsru
}

// SetTimeOfDay sets the "time_of_day" field.
func (bsru *BloodStatusRecordUpdate) SetTimeOfDay(bod bloodstatusrecord.TimeOfDay) *BloodStatusRecordUpdate {
	bsru.mutation.SetTimeOfDay(bod)
	return bsru
}

// SetNillableTimeOfDay sets the "time_of_day" field if the given value is not nil.
func (bsru *BloodStatusRecordUpdate) SetNillableTimeOfDay(bod *bloodstatusrecord.TimeOfDay) *BloodStatusRecordUpdate {
	if bod != nil {
		bsru.SetTimeOfDay(*bod)
	}
	return bsru
}

// SetBeforeAfterMeals sets the "before_after_meals" field.
func (bsru *BloodStatusRecordUpdate) SetBeforeAfterMeals(bam bloodstatusrecord.BeforeAfterMeals) *BloodStatusRecordUpdate {
	bsru.mutation.SetBeforeAfterMeals(bam)
	return bsru
}

// SetNillableBeforeAfterMeals sets the "before_after_meals" field if the given value is not nil.
func (bsru *BloodStatusRecordUpdate) SetNillableBeforeAfterMeals(bam *bloodstatusrecord.BeforeAfterMeals) *BloodStatusRecordUpdate {
	if bam != nil {
		bsru.SetBeforeAfterMeals(*bam)
	}
	return bsru
}

// SetSystolicPressure sets the "systolic_pressure" field.
func (bsru *BloodStatusRecordUpdate) SetSystolicPressure(f float64) *BloodStatusRecordUpdate {
	bsru.mutation.ResetSystolicPressure()
	bsru.mutation.SetSystolicPressure(f)
	return bsru
}

// SetNillableSystolicPressure sets the "systolic_pressure" field if the given value is not nil.
func (bsru *BloodStatusRecordUpdate) SetNillableSystolicPressure(f *float64) *BloodStatusRecordUpdate {
	if f != nil {
		bsru.SetSystolicPressure(*f)
	}
	return bsru
}

// AddSystolicPressure adds f to the "systolic_pressure" field.
func (bsru *BloodStatusRecordUpdate) AddSystolicPressure(f float64) *BloodStatusRecordUpdate {
	bsru.mutation.AddSystolicPressure(f)
	return bsru
}

// SetDiastolicPressure sets the "diastolic_pressure" field.
func (bsru *BloodStatusRecordUpdate) SetDiastolicPressure(f float64) *BloodStatusRecordUpdate {
	bsru.mutation.ResetDiastolicPressure()
	bsru.mutation.SetDiastolicPressure(f)
	return bsru
}

// SetNillableDiastolicPressure sets the "diastolic_pressure" field if the given value is not nil.
func (bsru *BloodStatusRecordUpdate) SetNillableDiastolicPressure(f *float64) *BloodStatusRecordUpdate {
	if f != nil {
		bsru.SetDiastolicPressure(*f)
	}
	return bsru
}

// AddDiastolicPressure adds f to the "diastolic_pressure" field.
func (bsru *BloodStatusRecordUpdate) AddDiastolicPressure(f float64) *BloodStatusRecordUpdate {
	bsru.mutation.AddDiastolicPressure(f)
	return bsru
}

// SetPulse sets the "pulse" field.
func (bsru *BloodStatusRecordUpdate) SetPulse(f float64) *BloodStatusRecordUpdate {
	bsru.mutation.ResetPulse()
	bsru.mutation.SetPulse(f)
	return bsru
}

// SetNillablePulse sets the "pulse" field if the given value is not nil.
func (bsru *BloodStatusRecordUpdate) SetNillablePulse(f *float64) *BloodStatusRecordUpdate {
	if f != nil {
		bsru.SetPulse(*f)
	}
	return bsru
}

// AddPulse adds f to the "pulse" field.
func (bsru *BloodStatusRecordUpdate) AddPulse(f float64) *BloodStatusRecordUpdate {
	bsru.mutation.AddPulse(f)
	return bsru
}

// Mutation returns the BloodStatusRecordMutation object of the builder.
func (bsru *BloodStatusRecordUpdate) Mutation() *BloodStatusRecordMutation {
	return bsru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsru *BloodStatusRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bsru.sqlSave, bsru.mutation, bsru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsru *BloodStatusRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := bsru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsru *BloodStatusRecordUpdate) Exec(ctx context.Context) error {
	_, err := bsru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsru *BloodStatusRecordUpdate) ExecX(ctx context.Context) {
	if err := bsru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsru *BloodStatusRecordUpdate) check() error {
	if v, ok := bsru.mutation.TimeOfDay(); ok {
		if err := bloodstatusrecord.TimeOfDayValidator(v); err != nil {
			return &ValidationError{Name: "time_of_day", err: fmt.Errorf(`ent: validator failed for field "BloodStatusRecord.time_of_day": %w`, err)}
		}
	}
	if v, ok := bsru.mutation.BeforeAfterMeals(); ok {
		if err := bloodstatusrecord.BeforeAfterMealsValidator(v); err != nil {
			return &ValidationError{Name: "before_after_meals", err: fmt.Errorf(`ent: validator failed for field "BloodStatusRecord.before_after_meals": %w`, err)}
		}
	}
	return nil
}

func (bsru *BloodStatusRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bsru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bloodstatusrecord.Table, bloodstatusrecord.Columns, sqlgraph.NewFieldSpec(bloodstatusrecord.FieldID, field.TypeUUID))
	if ps := bsru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsru.mutation.UserID(); ok {
		_spec.SetField(bloodstatusrecord.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := bsru.mutation.RecordDate(); ok {
		_spec.SetField(bloodstatusrecord.FieldRecordDate, field.TypeTime, value)
	}
	if value, ok := bsru.mutation.TimeOfDay(); ok {
		_spec.SetField(bloodstatusrecord.FieldTimeOfDay, field.TypeEnum, value)
	}
	if value, ok := bsru.mutation.BeforeAfterMeals(); ok {
		_spec.SetField(bloodstatusrecord.FieldBeforeAfterMeals, field.TypeEnum, value)
	}
	if value, ok := bsru.mutation.SystolicPressure(); ok {
		_spec.SetField(bloodstatusrecord.FieldSystolicPressure, field.TypeFloat64, value)
	}
	if value, ok := bsru.mutation.AddedSystolicPressure(); ok {
		_spec.AddField(bloodstatusrecord.FieldSystolicPressure, field.TypeFloat64, value)
	}
	if value, ok := bsru.mutation.DiastolicPressure(); ok {
		_spec.SetField(bloodstatusrecord.FieldDiastolicPressure, field.TypeFloat64, value)
	}
	if value, ok := bsru.mutation.AddedDiastolicPressure(); ok {
		_spec.AddField(bloodstatusrecord.FieldDiastolicPressure, field.TypeFloat64, value)
	}
	if value, ok := bsru.mutation.Pulse(); ok {
		_spec.SetField(bloodstatusrecord.FieldPulse, field.TypeFloat64, value)
	}
	if value, ok := bsru.mutation.AddedPulse(); ok {
		_spec.AddField(bloodstatusrecord.FieldPulse, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bloodstatusrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsru.mutation.done = true
	return n, nil
}

// BloodStatusRecordUpdateOne is the builder for updating a single BloodStatusRecord entity.
type BloodStatusRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BloodStatusRecordMutation
}

// SetUserID sets the "user_id" field.
func (bsruo *BloodStatusRecordUpdateOne) SetUserID(u uuid.UUID) *BloodStatusRecordUpdateOne {
	bsruo.mutation.SetUserID(u)
	return bsruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bsruo *BloodStatusRecordUpdateOne) SetNillableUserID(u *uuid.UUID) *BloodStatusRecordUpdateOne {
	if u != nil {
		bsruo.SetUserID(*u)
	}
	return bsruo
}

// SetRecordDate sets the "record_date" field.
func (bsruo *BloodStatusRecordUpdateOne) SetRecordDate(t time.Time) *BloodStatusRecordUpdateOne {
	bsruo.mutation.SetRecordDate(t)
	return bsruo
}

// SetNillableRecordDate sets the "record_date" field if the given value is not nil.
func (bsruo *BloodStatusRecordUpdateOne) SetNillableRecordDate(t *time.Time) *BloodStatusRecordUpdateOne {
	if t != nil {
		bsruo.SetRecordDate(*t)
	}
	return bsruo
}

// SetTimeOfDay sets the "time_of_day" field.
func (bsruo *BloodStatusRecordUpdateOne) SetTimeOfDay(bod bloodstatusrecord.TimeOfDay) *BloodStatusRecordUpdateOne {
	bsruo.mutation.SetTimeOfDay(bod)
	return bsruo
}

// SetNillableTimeOfDay sets the "time_of_day" field if the given value is not nil.
func (bsruo *BloodStatusRecordUpdateOne) SetNillableTimeOfDay(bod *bloodstatusrecord.TimeOfDay) *BloodStatusRecordUpdateOne {
	if bod != nil {
		bsruo.SetTimeOfDay(*bod)
	}
	return bsruo
}

// SetBeforeAfterMeals sets the "before_after_meals" field.
func (bsruo *BloodStatusRecordUpdateOne) SetBeforeAfterMeals(bam bloodstatusrecord.BeforeAfterMeals) *BloodStatusRecordUpdateOne {
	bsruo.mutation.SetBeforeAfterMeals(bam)
	return bsruo
}

// SetNillableBeforeAfterMeals sets the "before_after_meals" field if the given value is not nil.
func (bsruo *BloodStatusRecordUpdateOne) SetNillableBeforeAfterMeals(bam *bloodstatusrecord.BeforeAfterMeals) *BloodStatusRecordUpdateOne {
	if bam != nil {
		bsruo.SetBeforeAfterMeals(*bam)
	}
	return bsruo
}

// SetSystolicPressure sets the "systolic_pressure" field.
func (bsruo *BloodStatusRecordUpdateOne) SetSystolicPressure(f float64) *BloodStatusRecordUpdateOne {
	bsruo.mutation.ResetSystolicPressure()
	bsruo.mutation.SetSystolicPressure(f)
	return bsruo
}

// SetNillableSystolicPressure sets the "systolic_pressure" field if the given value is not nil.
func (bsruo *BloodStatusRecordUpdateOne) SetNillableSystolicPressure(f *float64) *BloodStatusRecordUpdateOne {
	if f != nil {
		bsruo.SetSystolicPressure(*f)
	}
	return bsruo
}

// AddSystolicPressure adds f to the "systolic_pressure" field.
func (bsruo *BloodStatusRecordUpdateOne) AddSystolicPressure(f float64) *BloodStatusRecordUpdateOne {
	bsruo.mutation.AddSystolicPressure(f)
	return bsruo
}

// SetDiastolicPressure sets the "diastolic_pressure" field.
func (bsruo *BloodStatusRecordUpdateOne) SetDiastolicPressure(f float64) *BloodStatusRecordUpdateOne {
	bsruo.mutation.ResetDiastolicPressure()
	bsruo.mutation.SetDiastolicPressure(f)
	return bsruo
}

// SetNillableDiastolicPressure sets the "diastolic_pressure" field if the given value is not nil.
func (bsruo *BloodStatusRecordUpdateOne) SetNillableDiastolicPressure(f *float64) *BloodStatusRecordUpdateOne {
	if f != nil {
		bsruo.SetDiastolicPressure(*f)
	}
	return bsruo
}

// AddDiastolicPressure adds f to the "diastolic_pressure" field.
func (bsruo *BloodStatusRecordUpdateOne) AddDiastolicPressure(f float64) *BloodStatusRecordUpdateOne {
	bsruo.mutation.AddDiastolicPressure(f)
	return bsruo
}

// SetPulse sets the "pulse" field.
func (bsruo *BloodStatusRecordUpdateOne) SetPulse(f float64) *BloodStatusRecordUpdateOne {
	bsruo.mutation.ResetPulse()
	bsruo.mutation.SetPulse(f)
	return bsruo
}

// SetNillablePulse sets the "pulse" field if the given value is not nil.
func (bsruo *BloodStatusRecordUpdateOne) SetNillablePulse(f *float64) *BloodStatusRecordUpdateOne {
	if f != nil {
		bsruo.SetPulse(*f)
	}
	return bsruo
}

// AddPulse adds f to the "pulse" field.
func (bsruo *BloodStatusRecordUpdateOne) AddPulse(f float64) *BloodStatusRecordUpdateOne {
	bsruo.mutation.AddPulse(f)
	return bsruo
}

// Mutation returns the BloodStatusRecordMutation object of the builder.
func (bsruo *BloodStatusRecordUpdateOne) Mutation() *BloodStatusRecordMutation {
	return bsruo.mutation
}

// Where appends a list predicates to the BloodStatusRecordUpdate builder.
func (bsruo *BloodStatusRecordUpdateOne) Where(ps ...predicate.BloodStatusRecord) *BloodStatusRecordUpdateOne {
	bsruo.mutation.Where(ps...)
	return bsruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsruo *BloodStatusRecordUpdateOne) Select(field string, fields ...string) *BloodStatusRecordUpdateOne {
	bsruo.fields = append([]string{field}, fields...)
	return bsruo
}

// Save executes the query and returns the updated BloodStatusRecord entity.
func (bsruo *BloodStatusRecordUpdateOne) Save(ctx context.Context) (*BloodStatusRecord, error) {
	return withHooks(ctx, bsruo.sqlSave, bsruo.mutation, bsruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsruo *BloodStatusRecordUpdateOne) SaveX(ctx context.Context) *BloodStatusRecord {
	node, err := bsruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsruo *BloodStatusRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := bsruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsruo *BloodStatusRecordUpdateOne) ExecX(ctx context.Context) {
	if err := bsruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsruo *BloodStatusRecordUpdateOne) check() error {
	if v, ok := bsruo.mutation.TimeOfDay(); ok {
		if err := bloodstatusrecord.TimeOfDayValidator(v); err != nil {
			return &ValidationError{Name: "time_of_day", err: fmt.Errorf(`ent: validator failed for field "BloodStatusRecord.time_of_day": %w`, err)}
		}
	}
	if v, ok := bsruo.mutation.BeforeAfterMeals(); ok {
		if err := bloodstatusrecord.BeforeAfterMealsValidator(v); err != nil {
			return &ValidationError{Name: "before_after_meals", err: fmt.Errorf(`ent: validator failed for field "BloodStatusRecord.before_after_meals": %w`, err)}
		}
	}
	return nil
}

func (bsruo *BloodStatusRecordUpdateOne) sqlSave(ctx context.Context) (_node *BloodStatusRecord, err error) {
	if err := bsruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bloodstatusrecord.Table, bloodstatusrecord.Columns, sqlgraph.NewFieldSpec(bloodstatusrecord.FieldID, field.TypeUUID))
	id, ok := bsruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BloodStatusRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bloodstatusrecord.FieldID)
		for _, f := range fields {
			if !bloodstatusrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bloodstatusrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsruo.mutation.UserID(); ok {
		_spec.SetField(bloodstatusrecord.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := bsruo.mutation.RecordDate(); ok {
		_spec.SetField(bloodstatusrecord.FieldRecordDate, field.TypeTime, value)
	}
	if value, ok := bsruo.mutation.TimeOfDay(); ok {
		_spec.SetField(bloodstatusrecord.FieldTimeOfDay, field.TypeEnum, value)
	}
	if value, ok := bsruo.mutation.BeforeAfterMeals(); ok {
		_spec.SetField(bloodstatusrecord.FieldBeforeAfterMeals, field.TypeEnum, value)
	}
	if value, ok := bsruo.mutation.SystolicPressure(); ok {
		_spec.SetField(bloodstatusrecord.FieldSystolicPressure, field.TypeFloat64, value)
	}
	if value, ok := bsruo.mutation.AddedSystolicPressure(); ok {
		_spec.AddField(bloodstatusrecord.FieldSystolicPressure, field.TypeFloat64, value)
	}
	if value, ok := bsruo.mutation.DiastolicPressure(); ok {
		_spec.SetField(bloodstatusrecord.FieldDiastolicPressure, field.TypeFloat64, value)
	}
	if value, ok := bsruo.mutation.AddedDiastolicPressure(); ok {
		_spec.AddField(bloodstatusrecord.FieldDiastolicPressure, field.TypeFloat64, value)
	}
	if value, ok := bsruo.mutation.Pulse(); ok {
		_spec.SetField(bloodstatusrecord.FieldPulse, field.TypeFloat64, value)
	}
	if value, ok := bsruo.mutation.AddedPulse(); ok {
		_spec.AddField(bloodstatusrecord.FieldPulse, field.TypeFloat64, value)
	}
	_node = &BloodStatusRecord{config: bsruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bloodstatusrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsruo.mutation.done = true
	return _node, nil
}
