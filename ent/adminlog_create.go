// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthmonitor/ent/adminlog"
	"healthmonitor/ent/adminuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AdminLogCreate is the builder for creating a AdminLog entity.
type AdminLogCreate struct {
	config
	mutation *AdminLogMutation
	hooks    []Hook
}

// SetAction sets the "action" field.
func (alc *AdminLogCreate) SetAction(s string) *AdminLogCreate {
	alc.mutation.SetAction(s)
	return alc
}

// SetIPAddress sets the "ip_address" field.
func (alc *AdminLogCreate) SetIPAddress(s string) *AdminLogCreate {
	alc.mutation.SetIPAddress(s)
	return alc
}

// SetCreatedAt sets the "created_at" field.
func (alc *AdminLogCreate) SetCreatedAt(t time.Time) *AdminLogCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *AdminLogCreate) SetNillableCreatedAt(t *time.Time) *AdminLogCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// SetID sets the "id" field.
func (alc *AdminLogCreate) SetID(u uuid.UUID) *AdminLogCreate {
	alc.mutation.SetID(u)
	return alc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (alc *AdminLogCreate) SetNillableID(u *uuid.UUID) *AdminLogCreate {
	if u != nil {
		alc.SetID(*u)
	}
	return alc
}

// SetUserID sets the "user" edge to the AdminUser entity by ID.
func (alc *AdminLogCreate) SetUserID(id uuid.UUID) *AdminLogCreate {
	alc.mutation.SetUserID(id)
	return alc
}

// SetNillableUserID sets the "user" edge to the AdminUser entity by ID if the given value is not nil.
func (alc *AdminLogCreate) SetNillableUserID(id *uuid.UUID) *AdminLogCreate {
	if id != nil {
		alc = alc.SetUserID(*id)
	}
	return alc
}

// SetUser sets the "user" edge to the AdminUser entity.
func (alc *AdminLogCreate) SetUser(a *AdminUser) *AdminLogCreate {
	return alc.SetUserID(a.ID)
}

// Mutation returns the AdminLogMutation object of the builder.
func (alc *AdminLogCreate) Mutation() *AdminLogMutation {
	return alc.mutation
}

// Save creates the AdminLog in the database.
func (alc *AdminLogCreate) Save(ctx context.Context) (*AdminLog, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AdminLogCreate) SaveX(ctx context.Context) *AdminLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AdminLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AdminLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AdminLogCreate) defaults() {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		v := adminlog.DefaultCreatedAt()
		alc.mutation.SetCreatedAt(v)
	}
	if _, ok := alc.mutation.ID(); !ok {
		v := adminlog.DefaultID()
		alc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AdminLogCreate) check() error {
	if _, ok := alc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "AdminLog.action"`)}
	}
	if _, ok := alc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "AdminLog.ip_address"`)}
	}
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AdminLog.created_at"`)}
	}
	return nil
}

func (alc *AdminLogCreate) sqlSave(ctx context.Context) (*AdminLog, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AdminLogCreate) createSpec() (*AdminLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminLog{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(adminlog.Table, sqlgraph.NewFieldSpec(adminlog.FieldID, field.TypeUUID))
	)
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := alc.mutation.Action(); ok {
		_spec.SetField(adminlog.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := alc.mutation.IPAddress(); ok {
		_spec.SetField(adminlog.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(adminlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := alc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlog.UserTable,
			Columns: []string{adminlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.admin_user_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminLogCreateBulk is the builder for creating many AdminLog entities in bulk.
type AdminLogCreateBulk struct {
	config
	err      error
	builders []*AdminLogCreate
}

// Save creates the AdminLog entities in the database.
func (alcb *AdminLogCreateBulk) Save(ctx context.Context) ([]*AdminLog, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AdminLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AdminLogCreateBulk) SaveX(ctx context.Context) []*AdminLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AdminLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AdminLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
