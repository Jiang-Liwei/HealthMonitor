// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/food"
	"HealthMonitor/ent/predicate"
	"HealthMonitor/ent/usermeal"
	"HealthMonitor/ent/usermealfood"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserMealFoodUpdate is the builder for updating UserMealFood entities.
type UserMealFoodUpdate struct {
	config
	hooks    []Hook
	mutation *UserMealFoodMutation
}

// Where appends a list predicates to the UserMealFoodUpdate builder.
func (umfu *UserMealFoodUpdate) Where(ps ...predicate.UserMealFood) *UserMealFoodUpdate {
	umfu.mutation.Where(ps...)
	return umfu
}

// SetUserMealID sets the "user_meal" edge to the UserMeal entity by ID.
func (umfu *UserMealFoodUpdate) SetUserMealID(id int) *UserMealFoodUpdate {
	umfu.mutation.SetUserMealID(id)
	return umfu
}

// SetNillableUserMealID sets the "user_meal" edge to the UserMeal entity by ID if the given value is not nil.
func (umfu *UserMealFoodUpdate) SetNillableUserMealID(id *int) *UserMealFoodUpdate {
	if id != nil {
		umfu = umfu.SetUserMealID(*id)
	}
	return umfu
}

// SetUserMeal sets the "user_meal" edge to the UserMeal entity.
func (umfu *UserMealFoodUpdate) SetUserMeal(u *UserMeal) *UserMealFoodUpdate {
	return umfu.SetUserMealID(u.ID)
}

// SetFoodID sets the "food" edge to the Food entity by ID.
func (umfu *UserMealFoodUpdate) SetFoodID(id uuid.UUID) *UserMealFoodUpdate {
	umfu.mutation.SetFoodID(id)
	return umfu
}

// SetNillableFoodID sets the "food" edge to the Food entity by ID if the given value is not nil.
func (umfu *UserMealFoodUpdate) SetNillableFoodID(id *uuid.UUID) *UserMealFoodUpdate {
	if id != nil {
		umfu = umfu.SetFoodID(*id)
	}
	return umfu
}

// SetFood sets the "food" edge to the Food entity.
func (umfu *UserMealFoodUpdate) SetFood(f *Food) *UserMealFoodUpdate {
	return umfu.SetFoodID(f.ID)
}

// Mutation returns the UserMealFoodMutation object of the builder.
func (umfu *UserMealFoodUpdate) Mutation() *UserMealFoodMutation {
	return umfu.mutation
}

// ClearUserMeal clears the "user_meal" edge to the UserMeal entity.
func (umfu *UserMealFoodUpdate) ClearUserMeal() *UserMealFoodUpdate {
	umfu.mutation.ClearUserMeal()
	return umfu
}

// ClearFood clears the "food" edge to the Food entity.
func (umfu *UserMealFoodUpdate) ClearFood() *UserMealFoodUpdate {
	umfu.mutation.ClearFood()
	return umfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umfu *UserMealFoodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, umfu.sqlSave, umfu.mutation, umfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umfu *UserMealFoodUpdate) SaveX(ctx context.Context) int {
	affected, err := umfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umfu *UserMealFoodUpdate) Exec(ctx context.Context) error {
	_, err := umfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umfu *UserMealFoodUpdate) ExecX(ctx context.Context) {
	if err := umfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (umfu *UserMealFoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usermealfood.Table, usermealfood.Columns, sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt))
	if ps := umfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if umfu.mutation.UserMealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermealfood.UserMealTable,
			Columns: []string{usermealfood.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermeal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umfu.mutation.UserMealIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermealfood.UserMealTable,
			Columns: []string{usermealfood.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermeal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umfu.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermealfood.FoodTable,
			Columns: []string{usermealfood.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umfu.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermealfood.FoodTable,
			Columns: []string{usermealfood.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermealfood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	umfu.mutation.done = true
	return n, nil
}

// UserMealFoodUpdateOne is the builder for updating a single UserMealFood entity.
type UserMealFoodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMealFoodMutation
}

// SetUserMealID sets the "user_meal" edge to the UserMeal entity by ID.
func (umfuo *UserMealFoodUpdateOne) SetUserMealID(id int) *UserMealFoodUpdateOne {
	umfuo.mutation.SetUserMealID(id)
	return umfuo
}

// SetNillableUserMealID sets the "user_meal" edge to the UserMeal entity by ID if the given value is not nil.
func (umfuo *UserMealFoodUpdateOne) SetNillableUserMealID(id *int) *UserMealFoodUpdateOne {
	if id != nil {
		umfuo = umfuo.SetUserMealID(*id)
	}
	return umfuo
}

// SetUserMeal sets the "user_meal" edge to the UserMeal entity.
func (umfuo *UserMealFoodUpdateOne) SetUserMeal(u *UserMeal) *UserMealFoodUpdateOne {
	return umfuo.SetUserMealID(u.ID)
}

// SetFoodID sets the "food" edge to the Food entity by ID.
func (umfuo *UserMealFoodUpdateOne) SetFoodID(id uuid.UUID) *UserMealFoodUpdateOne {
	umfuo.mutation.SetFoodID(id)
	return umfuo
}

// SetNillableFoodID sets the "food" edge to the Food entity by ID if the given value is not nil.
func (umfuo *UserMealFoodUpdateOne) SetNillableFoodID(id *uuid.UUID) *UserMealFoodUpdateOne {
	if id != nil {
		umfuo = umfuo.SetFoodID(*id)
	}
	return umfuo
}

// SetFood sets the "food" edge to the Food entity.
func (umfuo *UserMealFoodUpdateOne) SetFood(f *Food) *UserMealFoodUpdateOne {
	return umfuo.SetFoodID(f.ID)
}

// Mutation returns the UserMealFoodMutation object of the builder.
func (umfuo *UserMealFoodUpdateOne) Mutation() *UserMealFoodMutation {
	return umfuo.mutation
}

// ClearUserMeal clears the "user_meal" edge to the UserMeal entity.
func (umfuo *UserMealFoodUpdateOne) ClearUserMeal() *UserMealFoodUpdateOne {
	umfuo.mutation.ClearUserMeal()
	return umfuo
}

// ClearFood clears the "food" edge to the Food entity.
func (umfuo *UserMealFoodUpdateOne) ClearFood() *UserMealFoodUpdateOne {
	umfuo.mutation.ClearFood()
	return umfuo
}

// Where appends a list predicates to the UserMealFoodUpdate builder.
func (umfuo *UserMealFoodUpdateOne) Where(ps ...predicate.UserMealFood) *UserMealFoodUpdateOne {
	umfuo.mutation.Where(ps...)
	return umfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umfuo *UserMealFoodUpdateOne) Select(field string, fields ...string) *UserMealFoodUpdateOne {
	umfuo.fields = append([]string{field}, fields...)
	return umfuo
}

// Save executes the query and returns the updated UserMealFood entity.
func (umfuo *UserMealFoodUpdateOne) Save(ctx context.Context) (*UserMealFood, error) {
	return withHooks(ctx, umfuo.sqlSave, umfuo.mutation, umfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umfuo *UserMealFoodUpdateOne) SaveX(ctx context.Context) *UserMealFood {
	node, err := umfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umfuo *UserMealFoodUpdateOne) Exec(ctx context.Context) error {
	_, err := umfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umfuo *UserMealFoodUpdateOne) ExecX(ctx context.Context) {
	if err := umfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (umfuo *UserMealFoodUpdateOne) sqlSave(ctx context.Context) (_node *UserMealFood, err error) {
	_spec := sqlgraph.NewUpdateSpec(usermealfood.Table, usermealfood.Columns, sqlgraph.NewFieldSpec(usermealfood.FieldID, field.TypeInt))
	id, ok := umfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserMealFood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermealfood.FieldID)
		for _, f := range fields {
			if !usermealfood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermealfood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if umfuo.mutation.UserMealCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermealfood.UserMealTable,
			Columns: []string{usermealfood.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermeal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umfuo.mutation.UserMealIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermealfood.UserMealTable,
			Columns: []string{usermealfood.UserMealColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermeal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umfuo.mutation.FoodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermealfood.FoodTable,
			Columns: []string{usermealfood.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umfuo.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermealfood.FoodTable,
			Columns: []string{usermealfood.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserMealFood{config: umfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermealfood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	umfuo.mutation.done = true
	return _node, nil
}
