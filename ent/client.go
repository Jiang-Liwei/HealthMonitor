// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"HealthMonitor/ent/migrate"

	"HealthMonitor/ent/adminjwtblacklist"
	"HealthMonitor/ent/adminlog"
	"HealthMonitor/ent/adminmenu"
	"HealthMonitor/ent/adminpermission"
	"HealthMonitor/ent/adminrolepermission"
	"HealthMonitor/ent/adminroles"
	"HealthMonitor/ent/adminuser"
	"HealthMonitor/ent/adminuserrole"
	"HealthMonitor/ent/bloodstatusrecord"
	"HealthMonitor/ent/food"
	"HealthMonitor/ent/foodingredients"
	"HealthMonitor/ent/foodnutrients"
	"HealthMonitor/ent/ingredients"
	"HealthMonitor/ent/nutrient"
	"HealthMonitor/ent/usermeal"
	"HealthMonitor/ent/usermealfood"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AdminJWTBlacklist is the client for interacting with the AdminJWTBlacklist builders.
	AdminJWTBlacklist *AdminJWTBlacklistClient
	// AdminLog is the client for interacting with the AdminLog builders.
	AdminLog *AdminLogClient
	// AdminMenu is the client for interacting with the AdminMenu builders.
	AdminMenu *AdminMenuClient
	// AdminPermission is the client for interacting with the AdminPermission builders.
	AdminPermission *AdminPermissionClient
	// AdminRolePermission is the client for interacting with the AdminRolePermission builders.
	AdminRolePermission *AdminRolePermissionClient
	// AdminRoles is the client for interacting with the AdminRoles builders.
	AdminRoles *AdminRolesClient
	// AdminUser is the client for interacting with the AdminUser builders.
	AdminUser *AdminUserClient
	// AdminUserRole is the client for interacting with the AdminUserRole builders.
	AdminUserRole *AdminUserRoleClient
	// BloodStatusRecord is the client for interacting with the BloodStatusRecord builders.
	BloodStatusRecord *BloodStatusRecordClient
	// Food is the client for interacting with the Food builders.
	Food *FoodClient
	// FoodIngredients is the client for interacting with the FoodIngredients builders.
	FoodIngredients *FoodIngredientsClient
	// FoodNutrients is the client for interacting with the FoodNutrients builders.
	FoodNutrients *FoodNutrientsClient
	// Ingredients is the client for interacting with the Ingredients builders.
	Ingredients *IngredientsClient
	// Nutrient is the client for interacting with the Nutrient builders.
	Nutrient *NutrientClient
	// UserMeal is the client for interacting with the UserMeal builders.
	UserMeal *UserMealClient
	// UserMealFood is the client for interacting with the UserMealFood builders.
	UserMealFood *UserMealFoodClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AdminJWTBlacklist = NewAdminJWTBlacklistClient(c.config)
	c.AdminLog = NewAdminLogClient(c.config)
	c.AdminMenu = NewAdminMenuClient(c.config)
	c.AdminPermission = NewAdminPermissionClient(c.config)
	c.AdminRolePermission = NewAdminRolePermissionClient(c.config)
	c.AdminRoles = NewAdminRolesClient(c.config)
	c.AdminUser = NewAdminUserClient(c.config)
	c.AdminUserRole = NewAdminUserRoleClient(c.config)
	c.BloodStatusRecord = NewBloodStatusRecordClient(c.config)
	c.Food = NewFoodClient(c.config)
	c.FoodIngredients = NewFoodIngredientsClient(c.config)
	c.FoodNutrients = NewFoodNutrientsClient(c.config)
	c.Ingredients = NewIngredientsClient(c.config)
	c.Nutrient = NewNutrientClient(c.config)
	c.UserMeal = NewUserMealClient(c.config)
	c.UserMealFood = NewUserMealFoodClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		AdminJWTBlacklist:   NewAdminJWTBlacklistClient(cfg),
		AdminLog:            NewAdminLogClient(cfg),
		AdminMenu:           NewAdminMenuClient(cfg),
		AdminPermission:     NewAdminPermissionClient(cfg),
		AdminRolePermission: NewAdminRolePermissionClient(cfg),
		AdminRoles:          NewAdminRolesClient(cfg),
		AdminUser:           NewAdminUserClient(cfg),
		AdminUserRole:       NewAdminUserRoleClient(cfg),
		BloodStatusRecord:   NewBloodStatusRecordClient(cfg),
		Food:                NewFoodClient(cfg),
		FoodIngredients:     NewFoodIngredientsClient(cfg),
		FoodNutrients:       NewFoodNutrientsClient(cfg),
		Ingredients:         NewIngredientsClient(cfg),
		Nutrient:            NewNutrientClient(cfg),
		UserMeal:            NewUserMealClient(cfg),
		UserMealFood:        NewUserMealFoodClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		AdminJWTBlacklist:   NewAdminJWTBlacklistClient(cfg),
		AdminLog:            NewAdminLogClient(cfg),
		AdminMenu:           NewAdminMenuClient(cfg),
		AdminPermission:     NewAdminPermissionClient(cfg),
		AdminRolePermission: NewAdminRolePermissionClient(cfg),
		AdminRoles:          NewAdminRolesClient(cfg),
		AdminUser:           NewAdminUserClient(cfg),
		AdminUserRole:       NewAdminUserRoleClient(cfg),
		BloodStatusRecord:   NewBloodStatusRecordClient(cfg),
		Food:                NewFoodClient(cfg),
		FoodIngredients:     NewFoodIngredientsClient(cfg),
		FoodNutrients:       NewFoodNutrientsClient(cfg),
		Ingredients:         NewIngredientsClient(cfg),
		Nutrient:            NewNutrientClient(cfg),
		UserMeal:            NewUserMealClient(cfg),
		UserMealFood:        NewUserMealFoodClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AdminJWTBlacklist.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AdminJWTBlacklist, c.AdminLog, c.AdminMenu, c.AdminPermission,
		c.AdminRolePermission, c.AdminRoles, c.AdminUser, c.AdminUserRole,
		c.BloodStatusRecord, c.Food, c.FoodIngredients, c.FoodNutrients, c.Ingredients,
		c.Nutrient, c.UserMeal, c.UserMealFood,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AdminJWTBlacklist, c.AdminLog, c.AdminMenu, c.AdminPermission,
		c.AdminRolePermission, c.AdminRoles, c.AdminUser, c.AdminUserRole,
		c.BloodStatusRecord, c.Food, c.FoodIngredients, c.FoodNutrients, c.Ingredients,
		c.Nutrient, c.UserMeal, c.UserMealFood,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdminJWTBlacklistMutation:
		return c.AdminJWTBlacklist.mutate(ctx, m)
	case *AdminLogMutation:
		return c.AdminLog.mutate(ctx, m)
	case *AdminMenuMutation:
		return c.AdminMenu.mutate(ctx, m)
	case *AdminPermissionMutation:
		return c.AdminPermission.mutate(ctx, m)
	case *AdminRolePermissionMutation:
		return c.AdminRolePermission.mutate(ctx, m)
	case *AdminRolesMutation:
		return c.AdminRoles.mutate(ctx, m)
	case *AdminUserMutation:
		return c.AdminUser.mutate(ctx, m)
	case *AdminUserRoleMutation:
		return c.AdminUserRole.mutate(ctx, m)
	case *BloodStatusRecordMutation:
		return c.BloodStatusRecord.mutate(ctx, m)
	case *FoodMutation:
		return c.Food.mutate(ctx, m)
	case *FoodIngredientsMutation:
		return c.FoodIngredients.mutate(ctx, m)
	case *FoodNutrientsMutation:
		return c.FoodNutrients.mutate(ctx, m)
	case *IngredientsMutation:
		return c.Ingredients.mutate(ctx, m)
	case *NutrientMutation:
		return c.Nutrient.mutate(ctx, m)
	case *UserMealMutation:
		return c.UserMeal.mutate(ctx, m)
	case *UserMealFoodMutation:
		return c.UserMealFood.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdminJWTBlacklistClient is a client for the AdminJWTBlacklist schema.
type AdminJWTBlacklistClient struct {
	config
}

// NewAdminJWTBlacklistClient returns a client for the AdminJWTBlacklist from the given config.
func NewAdminJWTBlacklistClient(c config) *AdminJWTBlacklistClient {
	return &AdminJWTBlacklistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminjwtblacklist.Hooks(f(g(h())))`.
func (c *AdminJWTBlacklistClient) Use(hooks ...Hook) {
	c.hooks.AdminJWTBlacklist = append(c.hooks.AdminJWTBlacklist, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminjwtblacklist.Intercept(f(g(h())))`.
func (c *AdminJWTBlacklistClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminJWTBlacklist = append(c.inters.AdminJWTBlacklist, interceptors...)
}

// Create returns a builder for creating a AdminJWTBlacklist entity.
func (c *AdminJWTBlacklistClient) Create() *AdminJWTBlacklistCreate {
	mutation := newAdminJWTBlacklistMutation(c.config, OpCreate)
	return &AdminJWTBlacklistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminJWTBlacklist entities.
func (c *AdminJWTBlacklistClient) CreateBulk(builders ...*AdminJWTBlacklistCreate) *AdminJWTBlacklistCreateBulk {
	return &AdminJWTBlacklistCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminJWTBlacklistClient) MapCreateBulk(slice any, setFunc func(*AdminJWTBlacklistCreate, int)) *AdminJWTBlacklistCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminJWTBlacklistCreateBulk{err: fmt.Errorf("calling to AdminJWTBlacklistClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminJWTBlacklistCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminJWTBlacklistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminJWTBlacklist.
func (c *AdminJWTBlacklistClient) Update() *AdminJWTBlacklistUpdate {
	mutation := newAdminJWTBlacklistMutation(c.config, OpUpdate)
	return &AdminJWTBlacklistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminJWTBlacklistClient) UpdateOne(ajb *AdminJWTBlacklist) *AdminJWTBlacklistUpdateOne {
	mutation := newAdminJWTBlacklistMutation(c.config, OpUpdateOne, withAdminJWTBlacklist(ajb))
	return &AdminJWTBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminJWTBlacklistClient) UpdateOneID(id int) *AdminJWTBlacklistUpdateOne {
	mutation := newAdminJWTBlacklistMutation(c.config, OpUpdateOne, withAdminJWTBlacklistID(id))
	return &AdminJWTBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminJWTBlacklist.
func (c *AdminJWTBlacklistClient) Delete() *AdminJWTBlacklistDelete {
	mutation := newAdminJWTBlacklistMutation(c.config, OpDelete)
	return &AdminJWTBlacklistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminJWTBlacklistClient) DeleteOne(ajb *AdminJWTBlacklist) *AdminJWTBlacklistDeleteOne {
	return c.DeleteOneID(ajb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminJWTBlacklistClient) DeleteOneID(id int) *AdminJWTBlacklistDeleteOne {
	builder := c.Delete().Where(adminjwtblacklist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminJWTBlacklistDeleteOne{builder}
}

// Query returns a query builder for AdminJWTBlacklist.
func (c *AdminJWTBlacklistClient) Query() *AdminJWTBlacklistQuery {
	return &AdminJWTBlacklistQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminJWTBlacklist},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminJWTBlacklist entity by its id.
func (c *AdminJWTBlacklistClient) Get(ctx context.Context, id int) (*AdminJWTBlacklist, error) {
	return c.Query().Where(adminjwtblacklist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminJWTBlacklistClient) GetX(ctx context.Context, id int) *AdminJWTBlacklist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AdminJWTBlacklistClient) Hooks() []Hook {
	return c.hooks.AdminJWTBlacklist
}

// Interceptors returns the client interceptors.
func (c *AdminJWTBlacklistClient) Interceptors() []Interceptor {
	return c.inters.AdminJWTBlacklist
}

func (c *AdminJWTBlacklistClient) mutate(ctx context.Context, m *AdminJWTBlacklistMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminJWTBlacklistCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminJWTBlacklistUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminJWTBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminJWTBlacklistDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminJWTBlacklist mutation op: %q", m.Op())
	}
}

// AdminLogClient is a client for the AdminLog schema.
type AdminLogClient struct {
	config
}

// NewAdminLogClient returns a client for the AdminLog from the given config.
func NewAdminLogClient(c config) *AdminLogClient {
	return &AdminLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminlog.Hooks(f(g(h())))`.
func (c *AdminLogClient) Use(hooks ...Hook) {
	c.hooks.AdminLog = append(c.hooks.AdminLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminlog.Intercept(f(g(h())))`.
func (c *AdminLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminLog = append(c.inters.AdminLog, interceptors...)
}

// Create returns a builder for creating a AdminLog entity.
func (c *AdminLogClient) Create() *AdminLogCreate {
	mutation := newAdminLogMutation(c.config, OpCreate)
	return &AdminLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminLog entities.
func (c *AdminLogClient) CreateBulk(builders ...*AdminLogCreate) *AdminLogCreateBulk {
	return &AdminLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminLogClient) MapCreateBulk(slice any, setFunc func(*AdminLogCreate, int)) *AdminLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminLogCreateBulk{err: fmt.Errorf("calling to AdminLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminLog.
func (c *AdminLogClient) Update() *AdminLogUpdate {
	mutation := newAdminLogMutation(c.config, OpUpdate)
	return &AdminLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminLogClient) UpdateOne(al *AdminLog) *AdminLogUpdateOne {
	mutation := newAdminLogMutation(c.config, OpUpdateOne, withAdminLog(al))
	return &AdminLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminLogClient) UpdateOneID(id uuid.UUID) *AdminLogUpdateOne {
	mutation := newAdminLogMutation(c.config, OpUpdateOne, withAdminLogID(id))
	return &AdminLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminLog.
func (c *AdminLogClient) Delete() *AdminLogDelete {
	mutation := newAdminLogMutation(c.config, OpDelete)
	return &AdminLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminLogClient) DeleteOne(al *AdminLog) *AdminLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminLogClient) DeleteOneID(id uuid.UUID) *AdminLogDeleteOne {
	builder := c.Delete().Where(adminlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminLogDeleteOne{builder}
}

// Query returns a query builder for AdminLog.
func (c *AdminLogClient) Query() *AdminLogQuery {
	return &AdminLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminLog},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminLog entity by its id.
func (c *AdminLogClient) Get(ctx context.Context, id uuid.UUID) (*AdminLog, error) {
	return c.Query().Where(adminlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminLogClient) GetX(ctx context.Context, id uuid.UUID) *AdminLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AdminLog.
func (c *AdminLogClient) QueryUser(al *AdminLog) *AdminUserQuery {
	query := (&AdminUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminlog.Table, adminlog.FieldID, id),
			sqlgraph.To(adminuser.Table, adminuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminlog.UserTable, adminlog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminLogClient) Hooks() []Hook {
	return c.hooks.AdminLog
}

// Interceptors returns the client interceptors.
func (c *AdminLogClient) Interceptors() []Interceptor {
	return c.inters.AdminLog
}

func (c *AdminLogClient) mutate(ctx context.Context, m *AdminLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminLog mutation op: %q", m.Op())
	}
}

// AdminMenuClient is a client for the AdminMenu schema.
type AdminMenuClient struct {
	config
}

// NewAdminMenuClient returns a client for the AdminMenu from the given config.
func NewAdminMenuClient(c config) *AdminMenuClient {
	return &AdminMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminmenu.Hooks(f(g(h())))`.
func (c *AdminMenuClient) Use(hooks ...Hook) {
	c.hooks.AdminMenu = append(c.hooks.AdminMenu, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminmenu.Intercept(f(g(h())))`.
func (c *AdminMenuClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminMenu = append(c.inters.AdminMenu, interceptors...)
}

// Create returns a builder for creating a AdminMenu entity.
func (c *AdminMenuClient) Create() *AdminMenuCreate {
	mutation := newAdminMenuMutation(c.config, OpCreate)
	return &AdminMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminMenu entities.
func (c *AdminMenuClient) CreateBulk(builders ...*AdminMenuCreate) *AdminMenuCreateBulk {
	return &AdminMenuCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminMenuClient) MapCreateBulk(slice any, setFunc func(*AdminMenuCreate, int)) *AdminMenuCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminMenuCreateBulk{err: fmt.Errorf("calling to AdminMenuClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminMenuCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminMenu.
func (c *AdminMenuClient) Update() *AdminMenuUpdate {
	mutation := newAdminMenuMutation(c.config, OpUpdate)
	return &AdminMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminMenuClient) UpdateOne(am *AdminMenu) *AdminMenuUpdateOne {
	mutation := newAdminMenuMutation(c.config, OpUpdateOne, withAdminMenu(am))
	return &AdminMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminMenuClient) UpdateOneID(id uuid.UUID) *AdminMenuUpdateOne {
	mutation := newAdminMenuMutation(c.config, OpUpdateOne, withAdminMenuID(id))
	return &AdminMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminMenu.
func (c *AdminMenuClient) Delete() *AdminMenuDelete {
	mutation := newAdminMenuMutation(c.config, OpDelete)
	return &AdminMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminMenuClient) DeleteOne(am *AdminMenu) *AdminMenuDeleteOne {
	return c.DeleteOneID(am.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminMenuClient) DeleteOneID(id uuid.UUID) *AdminMenuDeleteOne {
	builder := c.Delete().Where(adminmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminMenuDeleteOne{builder}
}

// Query returns a query builder for AdminMenu.
func (c *AdminMenuClient) Query() *AdminMenuQuery {
	return &AdminMenuQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminMenu},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminMenu entity by its id.
func (c *AdminMenuClient) Get(ctx context.Context, id uuid.UUID) (*AdminMenu, error) {
	return c.Query().Where(adminmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminMenuClient) GetX(ctx context.Context, id uuid.UUID) *AdminMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AdminMenuClient) Hooks() []Hook {
	return c.hooks.AdminMenu
}

// Interceptors returns the client interceptors.
func (c *AdminMenuClient) Interceptors() []Interceptor {
	return c.inters.AdminMenu
}

func (c *AdminMenuClient) mutate(ctx context.Context, m *AdminMenuMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminMenuCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminMenuDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminMenu mutation op: %q", m.Op())
	}
}

// AdminPermissionClient is a client for the AdminPermission schema.
type AdminPermissionClient struct {
	config
}

// NewAdminPermissionClient returns a client for the AdminPermission from the given config.
func NewAdminPermissionClient(c config) *AdminPermissionClient {
	return &AdminPermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminpermission.Hooks(f(g(h())))`.
func (c *AdminPermissionClient) Use(hooks ...Hook) {
	c.hooks.AdminPermission = append(c.hooks.AdminPermission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminpermission.Intercept(f(g(h())))`.
func (c *AdminPermissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminPermission = append(c.inters.AdminPermission, interceptors...)
}

// Create returns a builder for creating a AdminPermission entity.
func (c *AdminPermissionClient) Create() *AdminPermissionCreate {
	mutation := newAdminPermissionMutation(c.config, OpCreate)
	return &AdminPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminPermission entities.
func (c *AdminPermissionClient) CreateBulk(builders ...*AdminPermissionCreate) *AdminPermissionCreateBulk {
	return &AdminPermissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminPermissionClient) MapCreateBulk(slice any, setFunc func(*AdminPermissionCreate, int)) *AdminPermissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminPermissionCreateBulk{err: fmt.Errorf("calling to AdminPermissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminPermissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminPermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminPermission.
func (c *AdminPermissionClient) Update() *AdminPermissionUpdate {
	mutation := newAdminPermissionMutation(c.config, OpUpdate)
	return &AdminPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminPermissionClient) UpdateOne(ap *AdminPermission) *AdminPermissionUpdateOne {
	mutation := newAdminPermissionMutation(c.config, OpUpdateOne, withAdminPermission(ap))
	return &AdminPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminPermissionClient) UpdateOneID(id uuid.UUID) *AdminPermissionUpdateOne {
	mutation := newAdminPermissionMutation(c.config, OpUpdateOne, withAdminPermissionID(id))
	return &AdminPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminPermission.
func (c *AdminPermissionClient) Delete() *AdminPermissionDelete {
	mutation := newAdminPermissionMutation(c.config, OpDelete)
	return &AdminPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminPermissionClient) DeleteOne(ap *AdminPermission) *AdminPermissionDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminPermissionClient) DeleteOneID(id uuid.UUID) *AdminPermissionDeleteOne {
	builder := c.Delete().Where(adminpermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminPermissionDeleteOne{builder}
}

// Query returns a query builder for AdminPermission.
func (c *AdminPermissionClient) Query() *AdminPermissionQuery {
	return &AdminPermissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminPermission},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminPermission entity by its id.
func (c *AdminPermissionClient) Get(ctx context.Context, id uuid.UUID) (*AdminPermission, error) {
	return c.Query().Where(adminpermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminPermissionClient) GetX(ctx context.Context, id uuid.UUID) *AdminPermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a AdminPermission.
func (c *AdminPermissionClient) QueryRoles(ap *AdminPermission) *AdminRolePermissionQuery {
	query := (&AdminRolePermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminpermission.Table, adminpermission.FieldID, id),
			sqlgraph.To(adminrolepermission.Table, adminrolepermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adminpermission.RolesTable, adminpermission.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminPermissionClient) Hooks() []Hook {
	return c.hooks.AdminPermission
}

// Interceptors returns the client interceptors.
func (c *AdminPermissionClient) Interceptors() []Interceptor {
	return c.inters.AdminPermission
}

func (c *AdminPermissionClient) mutate(ctx context.Context, m *AdminPermissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminPermission mutation op: %q", m.Op())
	}
}

// AdminRolePermissionClient is a client for the AdminRolePermission schema.
type AdminRolePermissionClient struct {
	config
}

// NewAdminRolePermissionClient returns a client for the AdminRolePermission from the given config.
func NewAdminRolePermissionClient(c config) *AdminRolePermissionClient {
	return &AdminRolePermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminrolepermission.Hooks(f(g(h())))`.
func (c *AdminRolePermissionClient) Use(hooks ...Hook) {
	c.hooks.AdminRolePermission = append(c.hooks.AdminRolePermission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminrolepermission.Intercept(f(g(h())))`.
func (c *AdminRolePermissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminRolePermission = append(c.inters.AdminRolePermission, interceptors...)
}

// Create returns a builder for creating a AdminRolePermission entity.
func (c *AdminRolePermissionClient) Create() *AdminRolePermissionCreate {
	mutation := newAdminRolePermissionMutation(c.config, OpCreate)
	return &AdminRolePermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminRolePermission entities.
func (c *AdminRolePermissionClient) CreateBulk(builders ...*AdminRolePermissionCreate) *AdminRolePermissionCreateBulk {
	return &AdminRolePermissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminRolePermissionClient) MapCreateBulk(slice any, setFunc func(*AdminRolePermissionCreate, int)) *AdminRolePermissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminRolePermissionCreateBulk{err: fmt.Errorf("calling to AdminRolePermissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminRolePermissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminRolePermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminRolePermission.
func (c *AdminRolePermissionClient) Update() *AdminRolePermissionUpdate {
	mutation := newAdminRolePermissionMutation(c.config, OpUpdate)
	return &AdminRolePermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminRolePermissionClient) UpdateOne(arp *AdminRolePermission) *AdminRolePermissionUpdateOne {
	mutation := newAdminRolePermissionMutation(c.config, OpUpdateOne, withAdminRolePermission(arp))
	return &AdminRolePermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminRolePermissionClient) UpdateOneID(id int) *AdminRolePermissionUpdateOne {
	mutation := newAdminRolePermissionMutation(c.config, OpUpdateOne, withAdminRolePermissionID(id))
	return &AdminRolePermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminRolePermission.
func (c *AdminRolePermissionClient) Delete() *AdminRolePermissionDelete {
	mutation := newAdminRolePermissionMutation(c.config, OpDelete)
	return &AdminRolePermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminRolePermissionClient) DeleteOne(arp *AdminRolePermission) *AdminRolePermissionDeleteOne {
	return c.DeleteOneID(arp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminRolePermissionClient) DeleteOneID(id int) *AdminRolePermissionDeleteOne {
	builder := c.Delete().Where(adminrolepermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminRolePermissionDeleteOne{builder}
}

// Query returns a query builder for AdminRolePermission.
func (c *AdminRolePermissionClient) Query() *AdminRolePermissionQuery {
	return &AdminRolePermissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminRolePermission},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminRolePermission entity by its id.
func (c *AdminRolePermissionClient) Get(ctx context.Context, id int) (*AdminRolePermission, error) {
	return c.Query().Where(adminrolepermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminRolePermissionClient) GetX(ctx context.Context, id int) *AdminRolePermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a AdminRolePermission.
func (c *AdminRolePermissionClient) QueryRole(arp *AdminRolePermission) *AdminRolesQuery {
	query := (&AdminRolesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := arp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminrolepermission.Table, adminrolepermission.FieldID, id),
			sqlgraph.To(adminroles.Table, adminroles.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminrolepermission.RoleTable, adminrolepermission.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(arp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermission queries the permission edge of a AdminRolePermission.
func (c *AdminRolePermissionClient) QueryPermission(arp *AdminRolePermission) *AdminPermissionQuery {
	query := (&AdminPermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := arp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminrolepermission.Table, adminrolepermission.FieldID, id),
			sqlgraph.To(adminpermission.Table, adminpermission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminrolepermission.PermissionTable, adminrolepermission.PermissionColumn),
		)
		fromV = sqlgraph.Neighbors(arp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminRolePermissionClient) Hooks() []Hook {
	return c.hooks.AdminRolePermission
}

// Interceptors returns the client interceptors.
func (c *AdminRolePermissionClient) Interceptors() []Interceptor {
	return c.inters.AdminRolePermission
}

func (c *AdminRolePermissionClient) mutate(ctx context.Context, m *AdminRolePermissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminRolePermissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminRolePermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminRolePermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminRolePermissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminRolePermission mutation op: %q", m.Op())
	}
}

// AdminRolesClient is a client for the AdminRoles schema.
type AdminRolesClient struct {
	config
}

// NewAdminRolesClient returns a client for the AdminRoles from the given config.
func NewAdminRolesClient(c config) *AdminRolesClient {
	return &AdminRolesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminroles.Hooks(f(g(h())))`.
func (c *AdminRolesClient) Use(hooks ...Hook) {
	c.hooks.AdminRoles = append(c.hooks.AdminRoles, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminroles.Intercept(f(g(h())))`.
func (c *AdminRolesClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminRoles = append(c.inters.AdminRoles, interceptors...)
}

// Create returns a builder for creating a AdminRoles entity.
func (c *AdminRolesClient) Create() *AdminRolesCreate {
	mutation := newAdminRolesMutation(c.config, OpCreate)
	return &AdminRolesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminRoles entities.
func (c *AdminRolesClient) CreateBulk(builders ...*AdminRolesCreate) *AdminRolesCreateBulk {
	return &AdminRolesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminRolesClient) MapCreateBulk(slice any, setFunc func(*AdminRolesCreate, int)) *AdminRolesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminRolesCreateBulk{err: fmt.Errorf("calling to AdminRolesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminRolesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminRolesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminRoles.
func (c *AdminRolesClient) Update() *AdminRolesUpdate {
	mutation := newAdminRolesMutation(c.config, OpUpdate)
	return &AdminRolesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminRolesClient) UpdateOne(ar *AdminRoles) *AdminRolesUpdateOne {
	mutation := newAdminRolesMutation(c.config, OpUpdateOne, withAdminRoles(ar))
	return &AdminRolesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminRolesClient) UpdateOneID(id uuid.UUID) *AdminRolesUpdateOne {
	mutation := newAdminRolesMutation(c.config, OpUpdateOne, withAdminRolesID(id))
	return &AdminRolesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminRoles.
func (c *AdminRolesClient) Delete() *AdminRolesDelete {
	mutation := newAdminRolesMutation(c.config, OpDelete)
	return &AdminRolesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminRolesClient) DeleteOne(ar *AdminRoles) *AdminRolesDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminRolesClient) DeleteOneID(id uuid.UUID) *AdminRolesDeleteOne {
	builder := c.Delete().Where(adminroles.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminRolesDeleteOne{builder}
}

// Query returns a query builder for AdminRoles.
func (c *AdminRolesClient) Query() *AdminRolesQuery {
	return &AdminRolesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminRoles},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminRoles entity by its id.
func (c *AdminRolesClient) Get(ctx context.Context, id uuid.UUID) (*AdminRoles, error) {
	return c.Query().Where(adminroles.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminRolesClient) GetX(ctx context.Context, id uuid.UUID) *AdminRoles {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPermissions queries the permissions edge of a AdminRoles.
func (c *AdminRolesClient) QueryPermissions(ar *AdminRoles) *AdminRolePermissionQuery {
	query := (&AdminRolePermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminroles.Table, adminroles.FieldID, id),
			sqlgraph.To(adminrolepermission.Table, adminrolepermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adminroles.PermissionsTable, adminroles.PermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a AdminRoles.
func (c *AdminRolesClient) QueryUsers(ar *AdminRoles) *AdminUserRoleQuery {
	query := (&AdminUserRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminroles.Table, adminroles.FieldID, id),
			sqlgraph.To(adminuserrole.Table, adminuserrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adminroles.UsersTable, adminroles.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminRolesClient) Hooks() []Hook {
	return c.hooks.AdminRoles
}

// Interceptors returns the client interceptors.
func (c *AdminRolesClient) Interceptors() []Interceptor {
	return c.inters.AdminRoles
}

func (c *AdminRolesClient) mutate(ctx context.Context, m *AdminRolesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminRolesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminRolesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminRolesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminRolesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminRoles mutation op: %q", m.Op())
	}
}

// AdminUserClient is a client for the AdminUser schema.
type AdminUserClient struct {
	config
}

// NewAdminUserClient returns a client for the AdminUser from the given config.
func NewAdminUserClient(c config) *AdminUserClient {
	return &AdminUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminuser.Hooks(f(g(h())))`.
func (c *AdminUserClient) Use(hooks ...Hook) {
	c.hooks.AdminUser = append(c.hooks.AdminUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminuser.Intercept(f(g(h())))`.
func (c *AdminUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminUser = append(c.inters.AdminUser, interceptors...)
}

// Create returns a builder for creating a AdminUser entity.
func (c *AdminUserClient) Create() *AdminUserCreate {
	mutation := newAdminUserMutation(c.config, OpCreate)
	return &AdminUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminUser entities.
func (c *AdminUserClient) CreateBulk(builders ...*AdminUserCreate) *AdminUserCreateBulk {
	return &AdminUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminUserClient) MapCreateBulk(slice any, setFunc func(*AdminUserCreate, int)) *AdminUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminUserCreateBulk{err: fmt.Errorf("calling to AdminUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminUser.
func (c *AdminUserClient) Update() *AdminUserUpdate {
	mutation := newAdminUserMutation(c.config, OpUpdate)
	return &AdminUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminUserClient) UpdateOne(au *AdminUser) *AdminUserUpdateOne {
	mutation := newAdminUserMutation(c.config, OpUpdateOne, withAdminUser(au))
	return &AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminUserClient) UpdateOneID(id uuid.UUID) *AdminUserUpdateOne {
	mutation := newAdminUserMutation(c.config, OpUpdateOne, withAdminUserID(id))
	return &AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminUser.
func (c *AdminUserClient) Delete() *AdminUserDelete {
	mutation := newAdminUserMutation(c.config, OpDelete)
	return &AdminUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminUserClient) DeleteOne(au *AdminUser) *AdminUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminUserClient) DeleteOneID(id uuid.UUID) *AdminUserDeleteOne {
	builder := c.Delete().Where(adminuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminUserDeleteOne{builder}
}

// Query returns a query builder for AdminUser.
func (c *AdminUserClient) Query() *AdminUserQuery {
	return &AdminUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminUser},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminUser entity by its id.
func (c *AdminUserClient) Get(ctx context.Context, id uuid.UUID) (*AdminUser, error) {
	return c.Query().Where(adminuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminUserClient) GetX(ctx context.Context, id uuid.UUID) *AdminUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a AdminUser.
func (c *AdminUserClient) QueryRoles(au *AdminUser) *AdminUserRoleQuery {
	query := (&AdminUserRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminuser.Table, adminuser.FieldID, id),
			sqlgraph.To(adminuserrole.Table, adminuserrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adminuser.RolesTable, adminuser.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogs queries the logs edge of a AdminUser.
func (c *AdminUserClient) QueryLogs(au *AdminUser) *AdminLogQuery {
	query := (&AdminLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminuser.Table, adminuser.FieldID, id),
			sqlgraph.To(adminlog.Table, adminlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adminuser.LogsTable, adminuser.LogsColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminUserClient) Hooks() []Hook {
	return c.hooks.AdminUser
}

// Interceptors returns the client interceptors.
func (c *AdminUserClient) Interceptors() []Interceptor {
	return c.inters.AdminUser
}

func (c *AdminUserClient) mutate(ctx context.Context, m *AdminUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminUser mutation op: %q", m.Op())
	}
}

// AdminUserRoleClient is a client for the AdminUserRole schema.
type AdminUserRoleClient struct {
	config
}

// NewAdminUserRoleClient returns a client for the AdminUserRole from the given config.
func NewAdminUserRoleClient(c config) *AdminUserRoleClient {
	return &AdminUserRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminuserrole.Hooks(f(g(h())))`.
func (c *AdminUserRoleClient) Use(hooks ...Hook) {
	c.hooks.AdminUserRole = append(c.hooks.AdminUserRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminuserrole.Intercept(f(g(h())))`.
func (c *AdminUserRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminUserRole = append(c.inters.AdminUserRole, interceptors...)
}

// Create returns a builder for creating a AdminUserRole entity.
func (c *AdminUserRoleClient) Create() *AdminUserRoleCreate {
	mutation := newAdminUserRoleMutation(c.config, OpCreate)
	return &AdminUserRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminUserRole entities.
func (c *AdminUserRoleClient) CreateBulk(builders ...*AdminUserRoleCreate) *AdminUserRoleCreateBulk {
	return &AdminUserRoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminUserRoleClient) MapCreateBulk(slice any, setFunc func(*AdminUserRoleCreate, int)) *AdminUserRoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminUserRoleCreateBulk{err: fmt.Errorf("calling to AdminUserRoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminUserRoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminUserRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminUserRole.
func (c *AdminUserRoleClient) Update() *AdminUserRoleUpdate {
	mutation := newAdminUserRoleMutation(c.config, OpUpdate)
	return &AdminUserRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminUserRoleClient) UpdateOne(aur *AdminUserRole) *AdminUserRoleUpdateOne {
	mutation := newAdminUserRoleMutation(c.config, OpUpdateOne, withAdminUserRole(aur))
	return &AdminUserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminUserRoleClient) UpdateOneID(id int) *AdminUserRoleUpdateOne {
	mutation := newAdminUserRoleMutation(c.config, OpUpdateOne, withAdminUserRoleID(id))
	return &AdminUserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminUserRole.
func (c *AdminUserRoleClient) Delete() *AdminUserRoleDelete {
	mutation := newAdminUserRoleMutation(c.config, OpDelete)
	return &AdminUserRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminUserRoleClient) DeleteOne(aur *AdminUserRole) *AdminUserRoleDeleteOne {
	return c.DeleteOneID(aur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminUserRoleClient) DeleteOneID(id int) *AdminUserRoleDeleteOne {
	builder := c.Delete().Where(adminuserrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminUserRoleDeleteOne{builder}
}

// Query returns a query builder for AdminUserRole.
func (c *AdminUserRoleClient) Query() *AdminUserRoleQuery {
	return &AdminUserRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminUserRole},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminUserRole entity by its id.
func (c *AdminUserRoleClient) Get(ctx context.Context, id int) (*AdminUserRole, error) {
	return c.Query().Where(adminuserrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminUserRoleClient) GetX(ctx context.Context, id int) *AdminUserRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AdminUserRole.
func (c *AdminUserRoleClient) QueryUser(aur *AdminUserRole) *AdminUserQuery {
	query := (&AdminUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminuserrole.Table, adminuserrole.FieldID, id),
			sqlgraph.To(adminuser.Table, adminuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminuserrole.UserTable, adminuserrole.UserColumn),
		)
		fromV = sqlgraph.Neighbors(aur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a AdminUserRole.
func (c *AdminUserRoleClient) QueryRole(aur *AdminUserRole) *AdminRolesQuery {
	query := (&AdminRolesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminuserrole.Table, adminuserrole.FieldID, id),
			sqlgraph.To(adminroles.Table, adminroles.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminuserrole.RoleTable, adminuserrole.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(aur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminUserRoleClient) Hooks() []Hook {
	return c.hooks.AdminUserRole
}

// Interceptors returns the client interceptors.
func (c *AdminUserRoleClient) Interceptors() []Interceptor {
	return c.inters.AdminUserRole
}

func (c *AdminUserRoleClient) mutate(ctx context.Context, m *AdminUserRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminUserRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminUserRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminUserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminUserRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminUserRole mutation op: %q", m.Op())
	}
}

// BloodStatusRecordClient is a client for the BloodStatusRecord schema.
type BloodStatusRecordClient struct {
	config
}

// NewBloodStatusRecordClient returns a client for the BloodStatusRecord from the given config.
func NewBloodStatusRecordClient(c config) *BloodStatusRecordClient {
	return &BloodStatusRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bloodstatusrecord.Hooks(f(g(h())))`.
func (c *BloodStatusRecordClient) Use(hooks ...Hook) {
	c.hooks.BloodStatusRecord = append(c.hooks.BloodStatusRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bloodstatusrecord.Intercept(f(g(h())))`.
func (c *BloodStatusRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.BloodStatusRecord = append(c.inters.BloodStatusRecord, interceptors...)
}

// Create returns a builder for creating a BloodStatusRecord entity.
func (c *BloodStatusRecordClient) Create() *BloodStatusRecordCreate {
	mutation := newBloodStatusRecordMutation(c.config, OpCreate)
	return &BloodStatusRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BloodStatusRecord entities.
func (c *BloodStatusRecordClient) CreateBulk(builders ...*BloodStatusRecordCreate) *BloodStatusRecordCreateBulk {
	return &BloodStatusRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BloodStatusRecordClient) MapCreateBulk(slice any, setFunc func(*BloodStatusRecordCreate, int)) *BloodStatusRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BloodStatusRecordCreateBulk{err: fmt.Errorf("calling to BloodStatusRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BloodStatusRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BloodStatusRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BloodStatusRecord.
func (c *BloodStatusRecordClient) Update() *BloodStatusRecordUpdate {
	mutation := newBloodStatusRecordMutation(c.config, OpUpdate)
	return &BloodStatusRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BloodStatusRecordClient) UpdateOne(bsr *BloodStatusRecord) *BloodStatusRecordUpdateOne {
	mutation := newBloodStatusRecordMutation(c.config, OpUpdateOne, withBloodStatusRecord(bsr))
	return &BloodStatusRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BloodStatusRecordClient) UpdateOneID(id uuid.UUID) *BloodStatusRecordUpdateOne {
	mutation := newBloodStatusRecordMutation(c.config, OpUpdateOne, withBloodStatusRecordID(id))
	return &BloodStatusRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BloodStatusRecord.
func (c *BloodStatusRecordClient) Delete() *BloodStatusRecordDelete {
	mutation := newBloodStatusRecordMutation(c.config, OpDelete)
	return &BloodStatusRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BloodStatusRecordClient) DeleteOne(bsr *BloodStatusRecord) *BloodStatusRecordDeleteOne {
	return c.DeleteOneID(bsr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BloodStatusRecordClient) DeleteOneID(id uuid.UUID) *BloodStatusRecordDeleteOne {
	builder := c.Delete().Where(bloodstatusrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BloodStatusRecordDeleteOne{builder}
}

// Query returns a query builder for BloodStatusRecord.
func (c *BloodStatusRecordClient) Query() *BloodStatusRecordQuery {
	return &BloodStatusRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBloodStatusRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a BloodStatusRecord entity by its id.
func (c *BloodStatusRecordClient) Get(ctx context.Context, id uuid.UUID) (*BloodStatusRecord, error) {
	return c.Query().Where(bloodstatusrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BloodStatusRecordClient) GetX(ctx context.Context, id uuid.UUID) *BloodStatusRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BloodStatusRecordClient) Hooks() []Hook {
	return c.hooks.BloodStatusRecord
}

// Interceptors returns the client interceptors.
func (c *BloodStatusRecordClient) Interceptors() []Interceptor {
	return c.inters.BloodStatusRecord
}

func (c *BloodStatusRecordClient) mutate(ctx context.Context, m *BloodStatusRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BloodStatusRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BloodStatusRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BloodStatusRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BloodStatusRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BloodStatusRecord mutation op: %q", m.Op())
	}
}

// FoodClient is a client for the Food schema.
type FoodClient struct {
	config
}

// NewFoodClient returns a client for the Food from the given config.
func NewFoodClient(c config) *FoodClient {
	return &FoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `food.Hooks(f(g(h())))`.
func (c *FoodClient) Use(hooks ...Hook) {
	c.hooks.Food = append(c.hooks.Food, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `food.Intercept(f(g(h())))`.
func (c *FoodClient) Intercept(interceptors ...Interceptor) {
	c.inters.Food = append(c.inters.Food, interceptors...)
}

// Create returns a builder for creating a Food entity.
func (c *FoodClient) Create() *FoodCreate {
	mutation := newFoodMutation(c.config, OpCreate)
	return &FoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Food entities.
func (c *FoodClient) CreateBulk(builders ...*FoodCreate) *FoodCreateBulk {
	return &FoodCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FoodClient) MapCreateBulk(slice any, setFunc func(*FoodCreate, int)) *FoodCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FoodCreateBulk{err: fmt.Errorf("calling to FoodClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FoodCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Food.
func (c *FoodClient) Update() *FoodUpdate {
	mutation := newFoodMutation(c.config, OpUpdate)
	return &FoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FoodClient) UpdateOne(f *Food) *FoodUpdateOne {
	mutation := newFoodMutation(c.config, OpUpdateOne, withFood(f))
	return &FoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FoodClient) UpdateOneID(id uuid.UUID) *FoodUpdateOne {
	mutation := newFoodMutation(c.config, OpUpdateOne, withFoodID(id))
	return &FoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Food.
func (c *FoodClient) Delete() *FoodDelete {
	mutation := newFoodMutation(c.config, OpDelete)
	return &FoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FoodClient) DeleteOne(f *Food) *FoodDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FoodClient) DeleteOneID(id uuid.UUID) *FoodDeleteOne {
	builder := c.Delete().Where(food.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FoodDeleteOne{builder}
}

// Query returns a query builder for Food.
func (c *FoodClient) Query() *FoodQuery {
	return &FoodQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFood},
		inters: c.Interceptors(),
	}
}

// Get returns a Food entity by its id.
func (c *FoodClient) Get(ctx context.Context, id uuid.UUID) (*Food, error) {
	return c.Query().Where(food.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FoodClient) GetX(ctx context.Context, id uuid.UUID) *Food {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIngredients queries the ingredients edge of a Food.
func (c *FoodClient) QueryIngredients(f *Food) *FoodIngredientsQuery {
	query := (&FoodIngredientsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(food.Table, food.FieldID, id),
			sqlgraph.To(foodingredients.Table, foodingredients.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, food.IngredientsTable, food.IngredientsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNutrient queries the nutrient edge of a Food.
func (c *FoodClient) QueryNutrient(f *Food) *FoodNutrientsQuery {
	query := (&FoodNutrientsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(food.Table, food.FieldID, id),
			sqlgraph.To(foodnutrients.Table, foodnutrients.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, food.NutrientTable, food.NutrientColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserMeal queries the user_meal edge of a Food.
func (c *FoodClient) QueryUserMeal(f *Food) *UserMealFoodQuery {
	query := (&UserMealFoodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(food.Table, food.FieldID, id),
			sqlgraph.To(usermealfood.Table, usermealfood.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, food.UserMealTable, food.UserMealColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FoodClient) Hooks() []Hook {
	return c.hooks.Food
}

// Interceptors returns the client interceptors.
func (c *FoodClient) Interceptors() []Interceptor {
	return c.inters.Food
}

func (c *FoodClient) mutate(ctx context.Context, m *FoodMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FoodCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FoodUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FoodDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Food mutation op: %q", m.Op())
	}
}

// FoodIngredientsClient is a client for the FoodIngredients schema.
type FoodIngredientsClient struct {
	config
}

// NewFoodIngredientsClient returns a client for the FoodIngredients from the given config.
func NewFoodIngredientsClient(c config) *FoodIngredientsClient {
	return &FoodIngredientsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `foodingredients.Hooks(f(g(h())))`.
func (c *FoodIngredientsClient) Use(hooks ...Hook) {
	c.hooks.FoodIngredients = append(c.hooks.FoodIngredients, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `foodingredients.Intercept(f(g(h())))`.
func (c *FoodIngredientsClient) Intercept(interceptors ...Interceptor) {
	c.inters.FoodIngredients = append(c.inters.FoodIngredients, interceptors...)
}

// Create returns a builder for creating a FoodIngredients entity.
func (c *FoodIngredientsClient) Create() *FoodIngredientsCreate {
	mutation := newFoodIngredientsMutation(c.config, OpCreate)
	return &FoodIngredientsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FoodIngredients entities.
func (c *FoodIngredientsClient) CreateBulk(builders ...*FoodIngredientsCreate) *FoodIngredientsCreateBulk {
	return &FoodIngredientsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FoodIngredientsClient) MapCreateBulk(slice any, setFunc func(*FoodIngredientsCreate, int)) *FoodIngredientsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FoodIngredientsCreateBulk{err: fmt.Errorf("calling to FoodIngredientsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FoodIngredientsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FoodIngredientsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FoodIngredients.
func (c *FoodIngredientsClient) Update() *FoodIngredientsUpdate {
	mutation := newFoodIngredientsMutation(c.config, OpUpdate)
	return &FoodIngredientsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FoodIngredientsClient) UpdateOne(fi *FoodIngredients) *FoodIngredientsUpdateOne {
	mutation := newFoodIngredientsMutation(c.config, OpUpdateOne, withFoodIngredients(fi))
	return &FoodIngredientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FoodIngredientsClient) UpdateOneID(id int) *FoodIngredientsUpdateOne {
	mutation := newFoodIngredientsMutation(c.config, OpUpdateOne, withFoodIngredientsID(id))
	return &FoodIngredientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FoodIngredients.
func (c *FoodIngredientsClient) Delete() *FoodIngredientsDelete {
	mutation := newFoodIngredientsMutation(c.config, OpDelete)
	return &FoodIngredientsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FoodIngredientsClient) DeleteOne(fi *FoodIngredients) *FoodIngredientsDeleteOne {
	return c.DeleteOneID(fi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FoodIngredientsClient) DeleteOneID(id int) *FoodIngredientsDeleteOne {
	builder := c.Delete().Where(foodingredients.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FoodIngredientsDeleteOne{builder}
}

// Query returns a query builder for FoodIngredients.
func (c *FoodIngredientsClient) Query() *FoodIngredientsQuery {
	return &FoodIngredientsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFoodIngredients},
		inters: c.Interceptors(),
	}
}

// Get returns a FoodIngredients entity by its id.
func (c *FoodIngredientsClient) Get(ctx context.Context, id int) (*FoodIngredients, error) {
	return c.Query().Where(foodingredients.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FoodIngredientsClient) GetX(ctx context.Context, id int) *FoodIngredients {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFood queries the food edge of a FoodIngredients.
func (c *FoodIngredientsClient) QueryFood(fi *FoodIngredients) *FoodQuery {
	query := (&FoodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(foodingredients.Table, foodingredients.FieldID, id),
			sqlgraph.To(food.Table, food.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodingredients.FoodTable, foodingredients.FoodColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIngredient queries the ingredient edge of a FoodIngredients.
func (c *FoodIngredientsClient) QueryIngredient(fi *FoodIngredients) *IngredientsQuery {
	query := (&IngredientsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(foodingredients.Table, foodingredients.FieldID, id),
			sqlgraph.To(ingredients.Table, ingredients.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodingredients.IngredientTable, foodingredients.IngredientColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FoodIngredientsClient) Hooks() []Hook {
	return c.hooks.FoodIngredients
}

// Interceptors returns the client interceptors.
func (c *FoodIngredientsClient) Interceptors() []Interceptor {
	return c.inters.FoodIngredients
}

func (c *FoodIngredientsClient) mutate(ctx context.Context, m *FoodIngredientsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FoodIngredientsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FoodIngredientsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FoodIngredientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FoodIngredientsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FoodIngredients mutation op: %q", m.Op())
	}
}

// FoodNutrientsClient is a client for the FoodNutrients schema.
type FoodNutrientsClient struct {
	config
}

// NewFoodNutrientsClient returns a client for the FoodNutrients from the given config.
func NewFoodNutrientsClient(c config) *FoodNutrientsClient {
	return &FoodNutrientsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `foodnutrients.Hooks(f(g(h())))`.
func (c *FoodNutrientsClient) Use(hooks ...Hook) {
	c.hooks.FoodNutrients = append(c.hooks.FoodNutrients, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `foodnutrients.Intercept(f(g(h())))`.
func (c *FoodNutrientsClient) Intercept(interceptors ...Interceptor) {
	c.inters.FoodNutrients = append(c.inters.FoodNutrients, interceptors...)
}

// Create returns a builder for creating a FoodNutrients entity.
func (c *FoodNutrientsClient) Create() *FoodNutrientsCreate {
	mutation := newFoodNutrientsMutation(c.config, OpCreate)
	return &FoodNutrientsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FoodNutrients entities.
func (c *FoodNutrientsClient) CreateBulk(builders ...*FoodNutrientsCreate) *FoodNutrientsCreateBulk {
	return &FoodNutrientsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FoodNutrientsClient) MapCreateBulk(slice any, setFunc func(*FoodNutrientsCreate, int)) *FoodNutrientsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FoodNutrientsCreateBulk{err: fmt.Errorf("calling to FoodNutrientsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FoodNutrientsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FoodNutrientsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FoodNutrients.
func (c *FoodNutrientsClient) Update() *FoodNutrientsUpdate {
	mutation := newFoodNutrientsMutation(c.config, OpUpdate)
	return &FoodNutrientsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FoodNutrientsClient) UpdateOne(fn *FoodNutrients) *FoodNutrientsUpdateOne {
	mutation := newFoodNutrientsMutation(c.config, OpUpdateOne, withFoodNutrients(fn))
	return &FoodNutrientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FoodNutrientsClient) UpdateOneID(id int) *FoodNutrientsUpdateOne {
	mutation := newFoodNutrientsMutation(c.config, OpUpdateOne, withFoodNutrientsID(id))
	return &FoodNutrientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FoodNutrients.
func (c *FoodNutrientsClient) Delete() *FoodNutrientsDelete {
	mutation := newFoodNutrientsMutation(c.config, OpDelete)
	return &FoodNutrientsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FoodNutrientsClient) DeleteOne(fn *FoodNutrients) *FoodNutrientsDeleteOne {
	return c.DeleteOneID(fn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FoodNutrientsClient) DeleteOneID(id int) *FoodNutrientsDeleteOne {
	builder := c.Delete().Where(foodnutrients.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FoodNutrientsDeleteOne{builder}
}

// Query returns a query builder for FoodNutrients.
func (c *FoodNutrientsClient) Query() *FoodNutrientsQuery {
	return &FoodNutrientsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFoodNutrients},
		inters: c.Interceptors(),
	}
}

// Get returns a FoodNutrients entity by its id.
func (c *FoodNutrientsClient) Get(ctx context.Context, id int) (*FoodNutrients, error) {
	return c.Query().Where(foodnutrients.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FoodNutrientsClient) GetX(ctx context.Context, id int) *FoodNutrients {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFood queries the food edge of a FoodNutrients.
func (c *FoodNutrientsClient) QueryFood(fn *FoodNutrients) *FoodQuery {
	query := (&FoodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(foodnutrients.Table, foodnutrients.FieldID, id),
			sqlgraph.To(food.Table, food.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodnutrients.FoodTable, foodnutrients.FoodColumn),
		)
		fromV = sqlgraph.Neighbors(fn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNutrient queries the nutrient edge of a FoodNutrients.
func (c *FoodNutrientsClient) QueryNutrient(fn *FoodNutrients) *NutrientQuery {
	query := (&NutrientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(foodnutrients.Table, foodnutrients.FieldID, id),
			sqlgraph.To(nutrient.Table, nutrient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodnutrients.NutrientTable, foodnutrients.NutrientColumn),
		)
		fromV = sqlgraph.Neighbors(fn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FoodNutrientsClient) Hooks() []Hook {
	return c.hooks.FoodNutrients
}

// Interceptors returns the client interceptors.
func (c *FoodNutrientsClient) Interceptors() []Interceptor {
	return c.inters.FoodNutrients
}

func (c *FoodNutrientsClient) mutate(ctx context.Context, m *FoodNutrientsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FoodNutrientsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FoodNutrientsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FoodNutrientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FoodNutrientsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FoodNutrients mutation op: %q", m.Op())
	}
}

// IngredientsClient is a client for the Ingredients schema.
type IngredientsClient struct {
	config
}

// NewIngredientsClient returns a client for the Ingredients from the given config.
func NewIngredientsClient(c config) *IngredientsClient {
	return &IngredientsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ingredients.Hooks(f(g(h())))`.
func (c *IngredientsClient) Use(hooks ...Hook) {
	c.hooks.Ingredients = append(c.hooks.Ingredients, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ingredients.Intercept(f(g(h())))`.
func (c *IngredientsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ingredients = append(c.inters.Ingredients, interceptors...)
}

// Create returns a builder for creating a Ingredients entity.
func (c *IngredientsClient) Create() *IngredientsCreate {
	mutation := newIngredientsMutation(c.config, OpCreate)
	return &IngredientsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ingredients entities.
func (c *IngredientsClient) CreateBulk(builders ...*IngredientsCreate) *IngredientsCreateBulk {
	return &IngredientsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IngredientsClient) MapCreateBulk(slice any, setFunc func(*IngredientsCreate, int)) *IngredientsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IngredientsCreateBulk{err: fmt.Errorf("calling to IngredientsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IngredientsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IngredientsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ingredients.
func (c *IngredientsClient) Update() *IngredientsUpdate {
	mutation := newIngredientsMutation(c.config, OpUpdate)
	return &IngredientsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IngredientsClient) UpdateOne(i *Ingredients) *IngredientsUpdateOne {
	mutation := newIngredientsMutation(c.config, OpUpdateOne, withIngredients(i))
	return &IngredientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IngredientsClient) UpdateOneID(id uuid.UUID) *IngredientsUpdateOne {
	mutation := newIngredientsMutation(c.config, OpUpdateOne, withIngredientsID(id))
	return &IngredientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ingredients.
func (c *IngredientsClient) Delete() *IngredientsDelete {
	mutation := newIngredientsMutation(c.config, OpDelete)
	return &IngredientsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IngredientsClient) DeleteOne(i *Ingredients) *IngredientsDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IngredientsClient) DeleteOneID(id uuid.UUID) *IngredientsDeleteOne {
	builder := c.Delete().Where(ingredients.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IngredientsDeleteOne{builder}
}

// Query returns a query builder for Ingredients.
func (c *IngredientsClient) Query() *IngredientsQuery {
	return &IngredientsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIngredients},
		inters: c.Interceptors(),
	}
}

// Get returns a Ingredients entity by its id.
func (c *IngredientsClient) Get(ctx context.Context, id uuid.UUID) (*Ingredients, error) {
	return c.Query().Where(ingredients.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IngredientsClient) GetX(ctx context.Context, id uuid.UUID) *Ingredients {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFood queries the food edge of a Ingredients.
func (c *IngredientsClient) QueryFood(i *Ingredients) *FoodIngredientsQuery {
	query := (&FoodIngredientsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ingredients.Table, ingredients.FieldID, id),
			sqlgraph.To(foodingredients.Table, foodingredients.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ingredients.FoodTable, ingredients.FoodColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IngredientsClient) Hooks() []Hook {
	return c.hooks.Ingredients
}

// Interceptors returns the client interceptors.
func (c *IngredientsClient) Interceptors() []Interceptor {
	return c.inters.Ingredients
}

func (c *IngredientsClient) mutate(ctx context.Context, m *IngredientsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IngredientsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IngredientsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IngredientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IngredientsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ingredients mutation op: %q", m.Op())
	}
}

// NutrientClient is a client for the Nutrient schema.
type NutrientClient struct {
	config
}

// NewNutrientClient returns a client for the Nutrient from the given config.
func NewNutrientClient(c config) *NutrientClient {
	return &NutrientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nutrient.Hooks(f(g(h())))`.
func (c *NutrientClient) Use(hooks ...Hook) {
	c.hooks.Nutrient = append(c.hooks.Nutrient, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `nutrient.Intercept(f(g(h())))`.
func (c *NutrientClient) Intercept(interceptors ...Interceptor) {
	c.inters.Nutrient = append(c.inters.Nutrient, interceptors...)
}

// Create returns a builder for creating a Nutrient entity.
func (c *NutrientClient) Create() *NutrientCreate {
	mutation := newNutrientMutation(c.config, OpCreate)
	return &NutrientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Nutrient entities.
func (c *NutrientClient) CreateBulk(builders ...*NutrientCreate) *NutrientCreateBulk {
	return &NutrientCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NutrientClient) MapCreateBulk(slice any, setFunc func(*NutrientCreate, int)) *NutrientCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NutrientCreateBulk{err: fmt.Errorf("calling to NutrientClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NutrientCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NutrientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Nutrient.
func (c *NutrientClient) Update() *NutrientUpdate {
	mutation := newNutrientMutation(c.config, OpUpdate)
	return &NutrientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NutrientClient) UpdateOne(n *Nutrient) *NutrientUpdateOne {
	mutation := newNutrientMutation(c.config, OpUpdateOne, withNutrient(n))
	return &NutrientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NutrientClient) UpdateOneID(id uuid.UUID) *NutrientUpdateOne {
	mutation := newNutrientMutation(c.config, OpUpdateOne, withNutrientID(id))
	return &NutrientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nutrient.
func (c *NutrientClient) Delete() *NutrientDelete {
	mutation := newNutrientMutation(c.config, OpDelete)
	return &NutrientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NutrientClient) DeleteOne(n *Nutrient) *NutrientDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NutrientClient) DeleteOneID(id uuid.UUID) *NutrientDeleteOne {
	builder := c.Delete().Where(nutrient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NutrientDeleteOne{builder}
}

// Query returns a query builder for Nutrient.
func (c *NutrientClient) Query() *NutrientQuery {
	return &NutrientQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNutrient},
		inters: c.Interceptors(),
	}
}

// Get returns a Nutrient entity by its id.
func (c *NutrientClient) Get(ctx context.Context, id uuid.UUID) (*Nutrient, error) {
	return c.Query().Where(nutrient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NutrientClient) GetX(ctx context.Context, id uuid.UUID) *Nutrient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFood queries the food edge of a Nutrient.
func (c *NutrientClient) QueryFood(n *Nutrient) *FoodNutrientsQuery {
	query := (&FoodNutrientsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nutrient.Table, nutrient.FieldID, id),
			sqlgraph.To(foodnutrients.Table, foodnutrients.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nutrient.FoodTable, nutrient.FoodColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NutrientClient) Hooks() []Hook {
	return c.hooks.Nutrient
}

// Interceptors returns the client interceptors.
func (c *NutrientClient) Interceptors() []Interceptor {
	return c.inters.Nutrient
}

func (c *NutrientClient) mutate(ctx context.Context, m *NutrientMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NutrientCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NutrientUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NutrientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NutrientDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Nutrient mutation op: %q", m.Op())
	}
}

// UserMealClient is a client for the UserMeal schema.
type UserMealClient struct {
	config
}

// NewUserMealClient returns a client for the UserMeal from the given config.
func NewUserMealClient(c config) *UserMealClient {
	return &UserMealClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermeal.Hooks(f(g(h())))`.
func (c *UserMealClient) Use(hooks ...Hook) {
	c.hooks.UserMeal = append(c.hooks.UserMeal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usermeal.Intercept(f(g(h())))`.
func (c *UserMealClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserMeal = append(c.inters.UserMeal, interceptors...)
}

// Create returns a builder for creating a UserMeal entity.
func (c *UserMealClient) Create() *UserMealCreate {
	mutation := newUserMealMutation(c.config, OpCreate)
	return &UserMealCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserMeal entities.
func (c *UserMealClient) CreateBulk(builders ...*UserMealCreate) *UserMealCreateBulk {
	return &UserMealCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserMealClient) MapCreateBulk(slice any, setFunc func(*UserMealCreate, int)) *UserMealCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserMealCreateBulk{err: fmt.Errorf("calling to UserMealClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserMealCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserMealCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserMeal.
func (c *UserMealClient) Update() *UserMealUpdate {
	mutation := newUserMealMutation(c.config, OpUpdate)
	return &UserMealUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserMealClient) UpdateOne(um *UserMeal) *UserMealUpdateOne {
	mutation := newUserMealMutation(c.config, OpUpdateOne, withUserMeal(um))
	return &UserMealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserMealClient) UpdateOneID(id int) *UserMealUpdateOne {
	mutation := newUserMealMutation(c.config, OpUpdateOne, withUserMealID(id))
	return &UserMealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserMeal.
func (c *UserMealClient) Delete() *UserMealDelete {
	mutation := newUserMealMutation(c.config, OpDelete)
	return &UserMealDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserMealClient) DeleteOne(um *UserMeal) *UserMealDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserMealClient) DeleteOneID(id int) *UserMealDeleteOne {
	builder := c.Delete().Where(usermeal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserMealDeleteOne{builder}
}

// Query returns a query builder for UserMeal.
func (c *UserMealClient) Query() *UserMealQuery {
	return &UserMealQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserMeal},
		inters: c.Interceptors(),
	}
}

// Get returns a UserMeal entity by its id.
func (c *UserMealClient) Get(ctx context.Context, id int) (*UserMeal, error) {
	return c.Query().Where(usermeal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserMealClient) GetX(ctx context.Context, id int) *UserMeal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFood queries the food edge of a UserMeal.
func (c *UserMealClient) QueryFood(um *UserMeal) *UserMealFoodQuery {
	query := (&UserMealFoodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermeal.Table, usermeal.FieldID, id),
			sqlgraph.To(usermealfood.Table, usermealfood.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermeal.FoodTable, usermeal.FoodColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserMealClient) Hooks() []Hook {
	return c.hooks.UserMeal
}

// Interceptors returns the client interceptors.
func (c *UserMealClient) Interceptors() []Interceptor {
	return c.inters.UserMeal
}

func (c *UserMealClient) mutate(ctx context.Context, m *UserMealMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserMealCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserMealUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserMealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserMealDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserMeal mutation op: %q", m.Op())
	}
}

// UserMealFoodClient is a client for the UserMealFood schema.
type UserMealFoodClient struct {
	config
}

// NewUserMealFoodClient returns a client for the UserMealFood from the given config.
func NewUserMealFoodClient(c config) *UserMealFoodClient {
	return &UserMealFoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermealfood.Hooks(f(g(h())))`.
func (c *UserMealFoodClient) Use(hooks ...Hook) {
	c.hooks.UserMealFood = append(c.hooks.UserMealFood, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usermealfood.Intercept(f(g(h())))`.
func (c *UserMealFoodClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserMealFood = append(c.inters.UserMealFood, interceptors...)
}

// Create returns a builder for creating a UserMealFood entity.
func (c *UserMealFoodClient) Create() *UserMealFoodCreate {
	mutation := newUserMealFoodMutation(c.config, OpCreate)
	return &UserMealFoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserMealFood entities.
func (c *UserMealFoodClient) CreateBulk(builders ...*UserMealFoodCreate) *UserMealFoodCreateBulk {
	return &UserMealFoodCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserMealFoodClient) MapCreateBulk(slice any, setFunc func(*UserMealFoodCreate, int)) *UserMealFoodCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserMealFoodCreateBulk{err: fmt.Errorf("calling to UserMealFoodClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserMealFoodCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserMealFoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserMealFood.
func (c *UserMealFoodClient) Update() *UserMealFoodUpdate {
	mutation := newUserMealFoodMutation(c.config, OpUpdate)
	return &UserMealFoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserMealFoodClient) UpdateOne(umf *UserMealFood) *UserMealFoodUpdateOne {
	mutation := newUserMealFoodMutation(c.config, OpUpdateOne, withUserMealFood(umf))
	return &UserMealFoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserMealFoodClient) UpdateOneID(id int) *UserMealFoodUpdateOne {
	mutation := newUserMealFoodMutation(c.config, OpUpdateOne, withUserMealFoodID(id))
	return &UserMealFoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserMealFood.
func (c *UserMealFoodClient) Delete() *UserMealFoodDelete {
	mutation := newUserMealFoodMutation(c.config, OpDelete)
	return &UserMealFoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserMealFoodClient) DeleteOne(umf *UserMealFood) *UserMealFoodDeleteOne {
	return c.DeleteOneID(umf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserMealFoodClient) DeleteOneID(id int) *UserMealFoodDeleteOne {
	builder := c.Delete().Where(usermealfood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserMealFoodDeleteOne{builder}
}

// Query returns a query builder for UserMealFood.
func (c *UserMealFoodClient) Query() *UserMealFoodQuery {
	return &UserMealFoodQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserMealFood},
		inters: c.Interceptors(),
	}
}

// Get returns a UserMealFood entity by its id.
func (c *UserMealFoodClient) Get(ctx context.Context, id int) (*UserMealFood, error) {
	return c.Query().Where(usermealfood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserMealFoodClient) GetX(ctx context.Context, id int) *UserMealFood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserMeal queries the user_meal edge of a UserMealFood.
func (c *UserMealFoodClient) QueryUserMeal(umf *UserMealFood) *UserMealQuery {
	query := (&UserMealClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := umf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermealfood.Table, usermealfood.FieldID, id),
			sqlgraph.To(usermeal.Table, usermeal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermealfood.UserMealTable, usermealfood.UserMealColumn),
		)
		fromV = sqlgraph.Neighbors(umf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFood queries the food edge of a UserMealFood.
func (c *UserMealFoodClient) QueryFood(umf *UserMealFood) *FoodQuery {
	query := (&FoodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := umf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermealfood.Table, usermealfood.FieldID, id),
			sqlgraph.To(food.Table, food.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermealfood.FoodTable, usermealfood.FoodColumn),
		)
		fromV = sqlgraph.Neighbors(umf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserMealFoodClient) Hooks() []Hook {
	return c.hooks.UserMealFood
}

// Interceptors returns the client interceptors.
func (c *UserMealFoodClient) Interceptors() []Interceptor {
	return c.inters.UserMealFood
}

func (c *UserMealFoodClient) mutate(ctx context.Context, m *UserMealFoodMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserMealFoodCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserMealFoodUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserMealFoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserMealFoodDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserMealFood mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AdminJWTBlacklist, AdminLog, AdminMenu, AdminPermission, AdminRolePermission,
		AdminRoles, AdminUser, AdminUserRole, BloodStatusRecord, Food, FoodIngredients,
		FoodNutrients, Ingredients, Nutrient, UserMeal, UserMealFood []ent.Hook
	}
	inters struct {
		AdminJWTBlacklist, AdminLog, AdminMenu, AdminPermission, AdminRolePermission,
		AdminRoles, AdminUser, AdminUserRole, BloodStatusRecord, Food, FoodIngredients,
		FoodNutrients, Ingredients, Nutrient, UserMeal, UserMealFood []ent.Interceptor
	}
)
