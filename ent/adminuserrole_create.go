// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/adminroles"
	"HealthMonitor/ent/adminuser"
	"HealthMonitor/ent/adminuserrole"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AdminUserRoleCreate is the builder for creating a AdminUserRole entity.
type AdminUserRoleCreate struct {
	config
	mutation *AdminUserRoleMutation
	hooks    []Hook
}

// SetUserID sets the "user" edge to the AdminUser entity by ID.
func (aurc *AdminUserRoleCreate) SetUserID(id uuid.UUID) *AdminUserRoleCreate {
	aurc.mutation.SetUserID(id)
	return aurc
}

// SetNillableUserID sets the "user" edge to the AdminUser entity by ID if the given value is not nil.
func (aurc *AdminUserRoleCreate) SetNillableUserID(id *uuid.UUID) *AdminUserRoleCreate {
	if id != nil {
		aurc = aurc.SetUserID(*id)
	}
	return aurc
}

// SetUser sets the "user" edge to the AdminUser entity.
func (aurc *AdminUserRoleCreate) SetUser(a *AdminUser) *AdminUserRoleCreate {
	return aurc.SetUserID(a.ID)
}

// SetRoleID sets the "role" edge to the AdminRoles entity by ID.
func (aurc *AdminUserRoleCreate) SetRoleID(id uuid.UUID) *AdminUserRoleCreate {
	aurc.mutation.SetRoleID(id)
	return aurc
}

// SetNillableRoleID sets the "role" edge to the AdminRoles entity by ID if the given value is not nil.
func (aurc *AdminUserRoleCreate) SetNillableRoleID(id *uuid.UUID) *AdminUserRoleCreate {
	if id != nil {
		aurc = aurc.SetRoleID(*id)
	}
	return aurc
}

// SetRole sets the "role" edge to the AdminRoles entity.
func (aurc *AdminUserRoleCreate) SetRole(a *AdminRoles) *AdminUserRoleCreate {
	return aurc.SetRoleID(a.ID)
}

// Mutation returns the AdminUserRoleMutation object of the builder.
func (aurc *AdminUserRoleCreate) Mutation() *AdminUserRoleMutation {
	return aurc.mutation
}

// Save creates the AdminUserRole in the database.
func (aurc *AdminUserRoleCreate) Save(ctx context.Context) (*AdminUserRole, error) {
	return withHooks(ctx, aurc.sqlSave, aurc.mutation, aurc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aurc *AdminUserRoleCreate) SaveX(ctx context.Context) *AdminUserRole {
	v, err := aurc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aurc *AdminUserRoleCreate) Exec(ctx context.Context) error {
	_, err := aurc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aurc *AdminUserRoleCreate) ExecX(ctx context.Context) {
	if err := aurc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aurc *AdminUserRoleCreate) check() error {
	return nil
}

func (aurc *AdminUserRoleCreate) sqlSave(ctx context.Context) (*AdminUserRole, error) {
	if err := aurc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aurc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aurc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aurc.mutation.id = &_node.ID
	aurc.mutation.done = true
	return _node, nil
}

func (aurc *AdminUserRoleCreate) createSpec() (*AdminUserRole, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminUserRole{config: aurc.config}
		_spec = sqlgraph.NewCreateSpec(adminuserrole.Table, sqlgraph.NewFieldSpec(adminuserrole.FieldID, field.TypeInt))
	)
	if nodes := aurc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminuserrole.UserTable,
			Columns: []string{adminuserrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.admin_user_roles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aurc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminuserrole.RoleTable,
			Columns: []string{adminuserrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminroles.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.admin_roles_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminUserRoleCreateBulk is the builder for creating many AdminUserRole entities in bulk.
type AdminUserRoleCreateBulk struct {
	config
	err      error
	builders []*AdminUserRoleCreate
}

// Save creates the AdminUserRole entities in the database.
func (aurcb *AdminUserRoleCreateBulk) Save(ctx context.Context) ([]*AdminUserRole, error) {
	if aurcb.err != nil {
		return nil, aurcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aurcb.builders))
	nodes := make([]*AdminUserRole, len(aurcb.builders))
	mutators := make([]Mutator, len(aurcb.builders))
	for i := range aurcb.builders {
		func(i int, root context.Context) {
			builder := aurcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminUserRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aurcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aurcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aurcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aurcb *AdminUserRoleCreateBulk) SaveX(ctx context.Context) []*AdminUserRole {
	v, err := aurcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aurcb *AdminUserRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := aurcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aurcb *AdminUserRoleCreateBulk) ExecX(ctx context.Context) {
	if err := aurcb.Exec(ctx); err != nil {
		panic(err)
	}
}
