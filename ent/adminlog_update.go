// Code generated by ent, DO NOT EDIT.

package ent

import (
	"HealthMonitor/ent/adminlog"
	"HealthMonitor/ent/adminuser"
	"HealthMonitor/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AdminLogUpdate is the builder for updating AdminLog entities.
type AdminLogUpdate struct {
	config
	hooks    []Hook
	mutation *AdminLogMutation
}

// Where appends a list predicates to the AdminLogUpdate builder.
func (alu *AdminLogUpdate) Where(ps ...predicate.AdminLog) *AdminLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetAction sets the "action" field.
func (alu *AdminLogUpdate) SetAction(s string) *AdminLogUpdate {
	alu.mutation.SetAction(s)
	return alu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (alu *AdminLogUpdate) SetNillableAction(s *string) *AdminLogUpdate {
	if s != nil {
		alu.SetAction(*s)
	}
	return alu
}

// SetIPAddress sets the "ip_address" field.
func (alu *AdminLogUpdate) SetIPAddress(s string) *AdminLogUpdate {
	alu.mutation.SetIPAddress(s)
	return alu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (alu *AdminLogUpdate) SetNillableIPAddress(s *string) *AdminLogUpdate {
	if s != nil {
		alu.SetIPAddress(*s)
	}
	return alu
}

// SetCreatedAt sets the "created_at" field.
func (alu *AdminLogUpdate) SetCreatedAt(t time.Time) *AdminLogUpdate {
	alu.mutation.SetCreatedAt(t)
	return alu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alu *AdminLogUpdate) SetNillableCreatedAt(t *time.Time) *AdminLogUpdate {
	if t != nil {
		alu.SetCreatedAt(*t)
	}
	return alu
}

// SetUserID sets the "user" edge to the AdminUser entity by ID.
func (alu *AdminLogUpdate) SetUserID(id uuid.UUID) *AdminLogUpdate {
	alu.mutation.SetUserID(id)
	return alu
}

// SetNillableUserID sets the "user" edge to the AdminUser entity by ID if the given value is not nil.
func (alu *AdminLogUpdate) SetNillableUserID(id *uuid.UUID) *AdminLogUpdate {
	if id != nil {
		alu = alu.SetUserID(*id)
	}
	return alu
}

// SetUser sets the "user" edge to the AdminUser entity.
func (alu *AdminLogUpdate) SetUser(a *AdminUser) *AdminLogUpdate {
	return alu.SetUserID(a.ID)
}

// Mutation returns the AdminLogMutation object of the builder.
func (alu *AdminLogUpdate) Mutation() *AdminLogMutation {
	return alu.mutation
}

// ClearUser clears the "user" edge to the AdminUser entity.
func (alu *AdminLogUpdate) ClearUser() *AdminLogUpdate {
	alu.mutation.ClearUser()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AdminLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AdminLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AdminLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AdminLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (alu *AdminLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminlog.Table, adminlog.Columns, sqlgraph.NewFieldSpec(adminlog.FieldID, field.TypeUUID))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.Action(); ok {
		_spec.SetField(adminlog.FieldAction, field.TypeString, value)
	}
	if value, ok := alu.mutation.IPAddress(); ok {
		_spec.SetField(adminlog.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := alu.mutation.CreatedAt(); ok {
		_spec.SetField(adminlog.FieldCreatedAt, field.TypeTime, value)
	}
	if alu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlog.UserTable,
			Columns: []string{adminlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlog.UserTable,
			Columns: []string{adminlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AdminLogUpdateOne is the builder for updating a single AdminLog entity.
type AdminLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminLogMutation
}

// SetAction sets the "action" field.
func (aluo *AdminLogUpdateOne) SetAction(s string) *AdminLogUpdateOne {
	aluo.mutation.SetAction(s)
	return aluo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (aluo *AdminLogUpdateOne) SetNillableAction(s *string) *AdminLogUpdateOne {
	if s != nil {
		aluo.SetAction(*s)
	}
	return aluo
}

// SetIPAddress sets the "ip_address" field.
func (aluo *AdminLogUpdateOne) SetIPAddress(s string) *AdminLogUpdateOne {
	aluo.mutation.SetIPAddress(s)
	return aluo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (aluo *AdminLogUpdateOne) SetNillableIPAddress(s *string) *AdminLogUpdateOne {
	if s != nil {
		aluo.SetIPAddress(*s)
	}
	return aluo
}

// SetCreatedAt sets the "created_at" field.
func (aluo *AdminLogUpdateOne) SetCreatedAt(t time.Time) *AdminLogUpdateOne {
	aluo.mutation.SetCreatedAt(t)
	return aluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aluo *AdminLogUpdateOne) SetNillableCreatedAt(t *time.Time) *AdminLogUpdateOne {
	if t != nil {
		aluo.SetCreatedAt(*t)
	}
	return aluo
}

// SetUserID sets the "user" edge to the AdminUser entity by ID.
func (aluo *AdminLogUpdateOne) SetUserID(id uuid.UUID) *AdminLogUpdateOne {
	aluo.mutation.SetUserID(id)
	return aluo
}

// SetNillableUserID sets the "user" edge to the AdminUser entity by ID if the given value is not nil.
func (aluo *AdminLogUpdateOne) SetNillableUserID(id *uuid.UUID) *AdminLogUpdateOne {
	if id != nil {
		aluo = aluo.SetUserID(*id)
	}
	return aluo
}

// SetUser sets the "user" edge to the AdminUser entity.
func (aluo *AdminLogUpdateOne) SetUser(a *AdminUser) *AdminLogUpdateOne {
	return aluo.SetUserID(a.ID)
}

// Mutation returns the AdminLogMutation object of the builder.
func (aluo *AdminLogUpdateOne) Mutation() *AdminLogMutation {
	return aluo.mutation
}

// ClearUser clears the "user" edge to the AdminUser entity.
func (aluo *AdminLogUpdateOne) ClearUser() *AdminLogUpdateOne {
	aluo.mutation.ClearUser()
	return aluo
}

// Where appends a list predicates to the AdminLogUpdate builder.
func (aluo *AdminLogUpdateOne) Where(ps ...predicate.AdminLog) *AdminLogUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AdminLogUpdateOne) Select(field string, fields ...string) *AdminLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AdminLog entity.
func (aluo *AdminLogUpdateOne) Save(ctx context.Context) (*AdminLog, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AdminLogUpdateOne) SaveX(ctx context.Context) *AdminLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AdminLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AdminLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aluo *AdminLogUpdateOne) sqlSave(ctx context.Context) (_node *AdminLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminlog.Table, adminlog.Columns, sqlgraph.NewFieldSpec(adminlog.FieldID, field.TypeUUID))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminlog.FieldID)
		for _, f := range fields {
			if !adminlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.Action(); ok {
		_spec.SetField(adminlog.FieldAction, field.TypeString, value)
	}
	if value, ok := aluo.mutation.IPAddress(); ok {
		_spec.SetField(adminlog.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := aluo.mutation.CreatedAt(); ok {
		_spec.SetField(adminlog.FieldCreatedAt, field.TypeTime, value)
	}
	if aluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlog.UserTable,
			Columns: []string{adminlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlog.UserTable,
			Columns: []string{adminlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
